/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Status
         * @description Return 200 when tokens exist for the provided ``X-User-Id`` header.
         */
        get: operations["get_status_api_auth_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Webhook
         * @description Validate ``signature`` and enqueue the webhook payload.
         */
        post: operations["post_webhook_api_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create User
         * @description Persist ``info`` and return it, rejecting duplicates.
         */
        post: operations["create_user_api_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/boards/{board_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tags
         * @description Return all tags for ``board_id`` sorted by name.
         */
        get: operations["list_tags_api_boards__board_id__tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/boards/{board_id}/shapes/{shape_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Shape
         * @description Return the specified shape if the requester owns the board.
         */
        get: operations["get_shape_api_boards__board_id__shapes__shape_id__get"];
        /**
         * Update Shape
         * @description Update an existing shape and queue the change.
         */
        put: operations["update_shape_api_boards__board_id__shapes__shape_id__put"];
        post?: never;
        /**
         * Delete Shape
         * @description Delete a shape and queue the removal.
         */
        delete: operations["delete_shape_api_boards__board_id__shapes__shape_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/boards/{board_id}/shapes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Shape
         * @description Create a new shape and queue the change.
         */
        post: operations["create_shape_api_boards__board_id__shapes__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login
         * @description Redirect the user to Miro's OAuth consent screen.
         */
        get: operations["login_oauth_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Callback
         * @description Exchange the code for tokens and store them.
         */
        get: operations["callback_oauth_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture Logs
         * @description Persist a batch of log entries.
         *
         *     Parameters
         *     ----------
         *     entries:
         *         Collection of log entries supplied by the client.
         *     repo:
         *         Repository used to store entries.
         */
        post: operations["capture_logs_api_logs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Cards
         * @description Queue tasks that create the supplied ``cards``.
         */
        post: operations["create_cards_api_cards_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cache/{board_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Board Cache
         * @description Return cached board state for ``board_id``.
         */
        get: operations["get_board_cache_api_cache__board_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Batch
         * @description Validate ``request`` and enqueue its operations.
         *
         *     If ``idempotency_key`` is provided and the request was previously processed,
         *     return the cached response without enqueuing tasks again.
         */
        post: operations["post_batch_api_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Metrics
         * @description Expose Prometheus metrics.
         */
        get: operations["metrics_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Redirect browsers to the built front-end.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health
         * @description Basic health check endpoint.
         */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * BatchRequest
         * @description Incoming batch of operations to process.
         */
        BatchRequest: {
            /** Operations */
            operations: (components["schemas"]["CreateNodeOperation"] | components["schemas"]["UpdateCardOperation"])[];
        };
        /**
         * BatchResponse
         * @description Summary of enqueued operations.
         */
        BatchResponse: {
            /** Enqueued */
            enqueued: number;
        };
        /**
         * CardCreate
         * @description Data describing a card to be created on the board.
         */
        CardCreate: {
            /** Id */
            id?: string | null;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Style */
            style?: {
                [key: string]: unknown;
            } | null;
            /** Fields */
            fields?: {
                [key: string]: unknown;
            }[] | null;
            /** Taskstatus */
            taskStatus?: string | null;
        };
        /**
         * CreateNodeOperation
         * @description Request to create a new node on the board.
         */
        CreateNodeOperation: {
            /**
             * @description Discriminator for the operation type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "create_node";
            /** Node Id */
            node_id: string;
            /** Data */
            data: {
                [key: string]: unknown;
            };
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LogEntryIn
         * @description Log entry received from the client application.
         */
        LogEntryIn: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Level */
            level: string;
            /** Message */
            message: string;
            /** Context */
            context?: {
                [key: string]: string;
            } | null;
        };
        /**
         * Shape
         * @description A shape stored on a board.
         */
        Shape: {
            /** Content */
            content: string;
            /** Id */
            id: string;
        };
        /**
         * ShapeCreate
         * @description Payload required to create a new shape.
         */
        ShapeCreate: {
            /** Content */
            content: string;
        };
        /**
         * ShapeUpdate
         * @description Payload used to update an existing shape.
         */
        ShapeUpdate: {
            /** Content */
            content: string;
        };
        /**
         * Tag
         * @description Serialised representation of a :class:`~miro_backend.models.tag.Tag`.
         */
        Tag: {
            /** Id */
            id: number;
            /** Board Id */
            board_id: number;
            /** Name */
            name: string;
        };
        /**
         * UpdateCardOperation
         * @description Request to update an existing card.
         */
        UpdateCardOperation: {
            /**
             * @description Discriminator for the operation type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "update_card";
            /** Card Id */
            card_id: string;
            /** Payload */
            payload: {
                [key: string]: unknown;
            };
        };
        /**
         * UserInfo
         * @description Authentication and OAuth token details of a Miro user.
         */
        UserInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_status_api_auth_status_get: {
        parameters: {
            query?: never;
            header?: {
                "X-User-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_webhook_api_webhook_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Miro-Signature"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_api_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserInfo"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tags_api_boards__board_id__tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                board_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_shape_api_boards__board_id__shapes__shape_id__get: {
        parameters: {
            query?: never;
            header?: {
                "X-User-Id"?: string | null;
            };
            path: {
                board_id: string;
                shape_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shape"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_shape_api_boards__board_id__shapes__shape_id__put: {
        parameters: {
            query?: never;
            header?: {
                "X-User-Id"?: string | null;
            };
            path: {
                board_id: string;
                shape_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shape"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_shape_api_boards__board_id__shapes__shape_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "X-User-Id"?: string | null;
            };
            path: {
                board_id: string;
                shape_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_shape_api_boards__board_id__shapes__post: {
        parameters: {
            query?: never;
            header?: {
                "X-User-Id"?: string | null;
            };
            path: {
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shape"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_oauth_login_get: {
        parameters: {
            query: {
                userId: string;
                returnUrl?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    callback_oauth_callback_get: {
        parameters: {
            query: {
                code: string;
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    capture_logs_api_logs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogEntryIn"][];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_cards_api_cards_post: {
        parameters: {
            query?: never;
            header: {
                "X-User-Id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCreate"][];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_board_cache_api_cache__board_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_batch_api_batch_post: {
        parameters: {
            query?: never;
            header: {
                "X-User-Id": string;
                "Idempotency-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    metrics_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
}
