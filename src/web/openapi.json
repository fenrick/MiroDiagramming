{
  "openapi": "3.1.0",
  "info": { "title": "FastAPI", "version": "0.1.0" },
  "paths": {
    "/api/auth/status": {
      "get": {
        "tags": ["auth"],
        "summary": "Get Status",
        "description": "Return 200 when tokens exist for the provided ``X-User-Id`` header.",
        "operationId": "get_status_api_auth_status_get",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-User-Id"
            }
          }
        ],
        "responses": {
          "200": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/webhook": {
      "post": {
        "tags": ["webhook"],
        "summary": "Post Webhook",
        "description": "Validate ``signature`` and enqueue the webhook payload.",
        "operationId": "post_webhook_api_webhook_post",
        "parameters": [
          {
            "name": "X-Miro-Signature",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-Miro-Signature"
            }
          }
        ],
        "responses": {
          "202": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create User",
        "description": "Persist ``info`` and return it, rejecting duplicates.",
        "operationId": "create_user_api_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserInfo" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInfo" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/boards/{board_id}/tags": {
      "get": {
        "tags": ["tags"],
        "summary": "List Tags",
        "description": "Return all tags for ``board_id`` sorted by name.",
        "operationId": "list_tags_api_boards__board_id__tags_get",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Board Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Tag" },
                  "title": "Response List Tags Api Boards  Board Id  Tags Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/boards/{board_id}/shapes/{shape_id}": {
      "get": {
        "tags": ["shapes"],
        "summary": "Get Shape",
        "description": "Return the specified shape if the requester owns the board.",
        "operationId": "get_shape_api_boards__board_id__shapes__shape_id__get",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Board Id" }
          },
          {
            "name": "shape_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Shape Id" }
          },
          {
            "name": "X-User-Id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-User-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shape" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["shapes"],
        "summary": "Update Shape",
        "description": "Update an existing shape and queue the change.",
        "operationId": "update_shape_api_boards__board_id__shapes__shape_id__put",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Board Id" }
          },
          {
            "name": "shape_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Shape Id" }
          },
          {
            "name": "X-User-Id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-User-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShapeUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shape" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["shapes"],
        "summary": "Delete Shape",
        "description": "Delete a shape and queue the removal.",
        "operationId": "delete_shape_api_boards__board_id__shapes__shape_id__delete",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Board Id" }
          },
          {
            "name": "shape_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Shape Id" }
          },
          {
            "name": "X-User-Id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-User-Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/boards/{board_id}/shapes/": {
      "post": {
        "tags": ["shapes"],
        "summary": "Create Shape",
        "description": "Create a new shape and queue the change.",
        "operationId": "create_shape_api_boards__board_id__shapes__post",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Board Id" }
          },
          {
            "name": "X-User-Id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "X-User-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShapeCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shape" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/oauth/login": {
      "get": {
        "tags": ["oauth"],
        "summary": "Login",
        "description": "Redirect the user to Miro's OAuth consent screen.",
        "operationId": "login_oauth_login_get",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Returnurl"
            }
          }
        ],
        "responses": {
          "307": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/oauth/callback": {
      "get": {
        "tags": ["oauth"],
        "summary": "Callback",
        "description": "Exchange the code for tokens and store them.",
        "operationId": "callback_oauth_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Code" }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "State" }
          }
        ],
        "responses": {
          "307": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/logs/": {
      "post": {
        "tags": ["logs"],
        "summary": "Capture Logs",
        "description": "Persist a batch of log entries.\n\nParameters\n----------\nentries:\n    Collection of log entries supplied by the client.\nrepo:\n    Repository used to store entries.",
        "operationId": "capture_logs_api_logs__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/LogEntryIn" },
                "type": "array",
                "title": "Entries"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "post": {
        "tags": ["cards"],
        "summary": "Create Cards",
        "description": "Queue tasks that create the supplied ``cards``.",
        "operationId": "create_cards_api_cards_post",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "X-User-Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/CardCreate" },
                "title": "Cards"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "integer" },
                  "title": "Response Create Cards Api Cards Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/cache/{board_id}": {
      "get": {
        "tags": ["cache"],
        "summary": "Get Board Cache",
        "description": "Return cached board state for ``board_id``.",
        "operationId": "get_board_cache_api_cache__board_id__get",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Board Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Board Cache Api Cache  Board Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/batch": {
      "post": {
        "tags": ["batch"],
        "summary": "Post Batch",
        "description": "Validate ``request`` and enqueue its operations.\n\nIf ``idempotency_key`` is provided and the request was previously processed,\nreturn the cached response without enqueuing tasks again.",
        "operationId": "post_batch_api_batch_post",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "X-User-Id" }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Idempotency-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BatchRequest" }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Metrics",
        "description": "Expose Prometheus metrics.",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Redirect browsers to the built front-end.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "text/html": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "description": "Basic health check endpoint.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Health Health Get"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BatchRequest": {
        "properties": {
          "operations": {
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/CreateNodeOperation" },
                { "$ref": "#/components/schemas/UpdateCardOperation" }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "create_node": "#/components/schemas/CreateNodeOperation",
                  "update_card": "#/components/schemas/UpdateCardOperation"
                }
              }
            },
            "type": "array",
            "title": "Operations"
          }
        },
        "type": "object",
        "required": ["operations"],
        "title": "BatchRequest",
        "description": "Incoming batch of operations to process."
      },
      "BatchResponse": {
        "properties": {
          "enqueued": { "type": "integer", "title": "Enqueued" }
        },
        "type": "object",
        "required": ["enqueued"],
        "title": "BatchResponse",
        "description": "Summary of enqueued operations."
      },
      "CardCreate": {
        "properties": {
          "id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Id"
          },
          "title": { "type": "string", "title": "Title" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "style": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Style"
          },
          "fields": {
            "anyOf": [
              {
                "items": { "additionalProperties": true, "type": "object" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Fields"
          },
          "taskStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskstatus"
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "CardCreate",
        "description": "Data describing a card to be created on the board."
      },
      "CreateNodeOperation": {
        "properties": {
          "type": {
            "type": "string",
            "const": "create_node",
            "title": "Type",
            "description": "Discriminator for the operation type"
          },
          "node_id": { "type": "string", "title": "Node Id" },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["type", "node_id", "data"],
        "title": "CreateNodeOperation",
        "description": "Request to create a new node on the board."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LogEntryIn": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "level": { "type": "string", "maxLength": 16, "title": "Level" },
          "message": {
            "type": "string",
            "maxLength": 1024,
            "title": "Message"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Context"
          }
        },
        "type": "object",
        "required": ["timestamp", "level", "message"],
        "title": "LogEntryIn",
        "description": "Log entry received from the client application."
      },
      "Shape": {
        "properties": {
          "content": { "type": "string", "title": "Content" },
          "id": { "type": "string", "title": "Id" }
        },
        "type": "object",
        "required": ["content", "id"],
        "title": "Shape",
        "description": "A shape stored on a board."
      },
      "ShapeCreate": {
        "properties": { "content": { "type": "string", "title": "Content" } },
        "type": "object",
        "required": ["content"],
        "title": "ShapeCreate",
        "description": "Payload required to create a new shape."
      },
      "ShapeUpdate": {
        "properties": { "content": { "type": "string", "title": "Content" } },
        "type": "object",
        "required": ["content"],
        "title": "ShapeUpdate",
        "description": "Payload used to update an existing shape."
      },
      "Tag": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "board_id": { "type": "integer", "title": "Board Id" },
          "name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["id", "board_id", "name"],
        "title": "Tag",
        "description": "Serialised representation of a :class:`~miro_backend.models.tag.Tag`."
      },
      "UpdateCardOperation": {
        "properties": {
          "type": {
            "type": "string",
            "const": "update_card",
            "title": "Type",
            "description": "Discriminator for the operation type"
          },
          "card_id": { "type": "string", "title": "Card Id" },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          }
        },
        "type": "object",
        "required": ["type", "card_id", "payload"],
        "title": "UpdateCardOperation",
        "description": "Request to update an existing card."
      },
      "UserInfo": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "access_token",
          "refresh_token",
          "expires_at"
        ],
        "title": "UserInfo",
        "description": "Authentication and OAuth token details of a Miro user."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
