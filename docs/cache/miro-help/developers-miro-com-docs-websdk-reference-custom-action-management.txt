Custom Action Management Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Custom Action Management Custom Action Management Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Custom Action Management üöß Important! Custom actions are only supported for non-public apps that will be distributed privately via a shareable authorization link from your App Settings page. This means that apps built with custom actions will not be eligible for distribution via the Miro Marketplace at this time, and cannot be widely and publicly distributed. Please follow our Changelog for further developments. Methods register(...) (customAction: CustomAction &lt;T&gt;) =&gt; Promise&lt; CustomAction &lt;T&gt;&gt; üö¶ Rate limit: Level 1 Experimental You use this method to register a custom action with an app. The method takes a single argument: an object that defines the custom action. You need to register custom actions in the headless iframe of your app so that the actions are available as long as the app is running on the board. For Miro apps, this is usually the index.js / .ts file. If you register a custom action in the panel or the modal iframe, the operation throws an error. Custom actions registration requires two steps: Subscribe to the event dispatched by the custom action using miro.board.ui.on method Register custom action with it&#x27;s definition. Apps cannot register custom actions that don&#x27;t have subscription. TypeScript await miro.board.ui.on(&#x27;custom:translate-content&#x27;, handler); await miro.board.experimental.action.register( { &quot;event&quot;: &quot;translate-content&quot;, &quot;ui&quot;: { &quot;label&quot;: &quot;en&quot;: &quot;Translate content&quot;, &quot;icon&quot;: &quot;chat-two&quot;, &quot;description&quot;: &quot;Translate the content of the board items included in the current selection.&quot;, }, &quot;scope&quot;: &quot;local&quot;, &quot;predicate&quot;: { &quot;type&quot;: &quot;text&quot; }, &quot;contexts&quot;: { &quot;item&quot;: {} } } ); You can learn more about custom action on our tutorial . deregister(...) (eventName: string) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 Experimental Use this method to deregister a custom action that was previously registered by an app. The method takes one argument: The name of the event used when registering the custom action. TypeScript await miro.board.ui.on(&#x27;custom:translate-content&#x27;, handler); await miro.board.experimental.action.register( { &quot;event&quot;: &quot;translate-content&quot;, &quot;ui&quot;: { &quot;label&quot;: &quot;en&quot;: &quot;Translate content&quot;, &quot;icon&quot;: &quot;chat-two&quot;, &quot;description&quot;: &quot;Translate the content of the board items included in the current selection.&quot;, }, &quot;scope&quot;: &quot;local&quot;, &quot;predicate&quot;: { &quot;type&quot;: &quot;text&quot; }, &quot;contexts&quot;: { &quot;item&quot;: {} } } ); await miro.board.experimental.action.deregister(&quot;translate-content&quot;) Type definitions CustomActionFilter { $and?: Array&lt; CustomActionFilter &lt;T&gt;&gt; $eq?: T $exists?: boolean $gt?: T $gte?: T $in?: Array&lt;T&gt; $lt?: T $lte?: T $ne?: T $nin?: Array&lt;T&gt; $not?: CustomActionFilter &lt;T&gt; $or?: Array&lt; CustomActionFilter &lt;T&gt;&gt; $regex?: string $where?: string } CustomActionPredicate CustomActionPredicate : | { $and?: Array&lt; CustomActionPredicate &lt;T&gt;&gt;; $not?: CustomActionPredicate &lt;T&gt;; $or?: Array&lt; CustomActionPredicate &lt;T&gt;&gt; } | CustomActionFilter &lt;T&gt; | {} | {} CustomAction { contexts?: { item?: {} } event: string predicate?: CustomActionPredicate &lt;ItemsProps&lt;T&gt;&gt; scope?: &#x27;local&#x27; | &#x27;global&#x27; selection?: &#x27;single&#x27; | &#x27;multi&#x27; title =&quot;ui&quot;&gt;ui?: { description ?: string | Partial&lt;Record&lt;SupportedLanguages, string&gt;&gt; icon: string label: string | Partial&lt;Record&lt;SupportedLanguages, string&gt;&gt; position?: number } } contexts contexts specifies where within the board UI the custom action will be accessible to users. It establishes the entry point for the custom action, indicating the UI element users can interact with to execute the custom action. Currently, custom actions are available only in the context menu of selected board items. Therefore, item is the only supported property for contexts at the moment. The value of contexts.item is an empty object for now. Default value: {} . TypeScript &quot;contexts&quot;: { &quot;item&quot;: {} } Makes the custom action available in a specific context on the board. Currently, you can only make custom actions available in the context menu of selected board items, Tag cannot be used as an item. event The name of the custom event to which the app subscribes in order to respond with a custom action. The event name must match the value of the ${string} placeholder in the custom:${string} event name you provide to the on property when subscribing to the app. The event name can contain only lowercase alphabetic characters and hyphens ( ^[a-z]+(-[a-z]+)\*$ ). It cannot contain spaces. It cannot exceed 30 characters. Example: TypeScript // Event name const eventName = &#x27;translate-content&#x27;; // Custom event name that the app subscribes to. await miro.board.ui.on(`custom:${eventName}`, handler); predicate The predicate property specifies the criteria that determine which board items a custom action applies to. The custom action only appears in the context menu when all currently selected items match the conditions defined in predicate . predicate evaluates each selected item individually, even with multi-selections. It checks each item separately and must return true for every item in the selection. If any selected item fails the predicate check, the custom action does not display. In summary, predicate allows you to selectively show custom actions based on rules that apply to the current selection. The action only appears when all selected items pass the predicate criteria. The conditions that you can set with predicate correspond to the supported board item properties. predicate syntax leverages the MongoDB query DSL syntax . This approach offers a wide range of operators that allow granular control of the availability of a custom action on the board UI. TypeScript // Example of a predicate that makes a custom action available only when // the selected board items are shapes, texts, or sticky notes. &quot;predicate&quot;: { &quot;type&quot;: { &quot;$in&quot;: [&quot;shape&quot;, &quot;text&quot;, &quot;sticky_note&quot;] }, } scope scope defines the scope of the custom action and how it interacts with other capabilities in the board. As of now, this property is not actually relevant since we only support local scope for the time being. Default value: local . selection selection determines whether the custom action is displayed for single or multiple selected items. Use multi if you want the custom action to be displayed when the selection includes 1 or more items and they all match the predicate. Use single for the custom action to be shown when there is only one selected item and it matches the predicate. Default value: multi . Note : If the selection contains more than 100 items, the custom action will not be displayed. ui The object exposes content that is displayed to board users in the context menu when one or more board items are selected. All properties Property Type deregister(...) (eventName: string) =&gt; Promise&lt;void&gt; register(...) (customAction: CustomAction &lt;T&gt;) =&gt; Promise&lt; CustomAction &lt;T&gt;&gt; Updated 10 months ago Table of Contents Methods register(...) deregister(...) Type definitions All properties