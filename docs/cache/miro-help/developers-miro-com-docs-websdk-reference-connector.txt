Connector Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Connector Connector Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Connector Connector The connector item creates lines to connect two items on the board. Connectors are useful when drawing diagrams, flow charts, and mind maps. The line of a connector item must have two terminal points: a start and an end point. These points are located on the area of the board items that they connect. If you remove either the start point, the end point, or both, the connector is removed as well. It&#x27;s possible to style connector lines by defining properties such as thickness, color, and type. You can also assign a shape to either or both ends of a connector. For example, to indicate the direction of the connection. ℹ️ Note: When creating connectors programmatically, either with the Web SDK or the REST API, it&#x27;s not possible to create loose (both ends disconnected) or dangling (one end disconnected) connectors. To create a connector, you must specify at least: start and end points of the connector. The item IDs of the board items that the connector links. The location of the two terminal points that attach the connector to its start and end items. You can set the location of the terminal points in one of the following ways: Either specify the position.x and position.y coordinates of each point. Or specify the snapTo property for each point. You cannot specify both position coordinates and snapTo properties for the start and end points. See also: Connection lines on the Miro Help Center. Example: TypeScript // Create a shape to use as a start point for the connector. const start = await miro.board.createShape({ content: &#x27;start&#x27;, x: 4500, }); // Create a shape to use as an end point for the connector. const end = await miro.board.createShape({ content: &#x27;end&#x27;, x: 4800, }); // Create a connector. const connector = await miro.board.createConnector({ shape: &#x27;elbowed&#x27;, style: { startStrokeCap: &#x27;diamond&#x27;, endStrokeCap: &#x27;stealth&#x27;, strokeStyle: &#x27;dashed&#x27;, strokeColor: &#x27;#ff00ff&#x27;, // Magenta strokeWidth: 2, }, // Set the start point of the connector. start: { // Define the start board item for the connector by specifying the &#x27;start&#x27; item ID. item: start.id, // Set a point on the border of the &#x27;start&#x27; shape to mark the start point of the connector. position: { // Horizontal: right x: 1.0, // Vertical: middle y: 0.5, }, }, // Set the end point of the connector. end: { // Define the end board item for the connector by specifying the &#x27;end&#x27; item ID. item: end.id, // Set a snapTo of &#x27;end&#x27; shape to mark the end point of the connector. snapTo: &#x27;right&#x27;, }, captions: [ { content: &#x27;This connector links a start and an end shape.&#x27;, position: 0.5, textAlignVertical: &#x27;bottom&#x27;, }, ], }); /* Remove the &#x27;end&#x27; shape item. * The connector is automatically removed as well, because the operation removes also * one of the terminal points of the connector. */ const removeEndShape = async () =&gt; { await miro.board.viewport.zoomTo(connector); setTimeout(async () =&gt; { await miro.board.remove(end); }, 3000); }; await removeEndShape(); Connector example: Figure 1. The connector joins the start and end shapes. It starts from the point defined in start.position , and it ends at the point defined in end.snapTo . Properties shape &#x27;straight&#x27; | &#x27;elbowed&#x27; | &#x27;curved&#x27; shape Sets the shape of the line for the connector item. Possible values: straight : the line is completely straight. elbowed : the line isn&#x27;t straight. It bends at 90 degree angles. curved : the line isn&#x27;t straight. It bends in smooth curves . Default: curved Figure 1. Visual representation of straight, elbowed, and curved line shapes. start? Endpoint The start object groups properties that define: The board item that the start point of the connector attaches at. To define the start board item, you must specify the item ID. Position of the start point that can be defined in one of the following ways: snapTo values that are based on predefined positions (specifically center of a connected item&#x27;s edge) x and y coordinates for custom location on the connected shape ℹ️ Note: The default value is undefined . However, you must specify a start and an end for the connector. When creating connectors programmatically, either with the Web SDK or the REST API, it&#x27;s not yet possible to create loose (both ends disconnected) or dangling (one end disconnected) connectors. start data structure with snapTo : TypeScript start: { // Define the start board item for the start point of the connector // by specifying the item ID. item: &#x27;3458764511234567896&#x27;, snapTo: &#x27;right&#x27; } start data structure with custom position: TypeScript start: { // Define the start board item for the start point of the connector // by specifying the item ID. item: &#x27;3458764511234567896&#x27;, position: { // x: 0.0 = left; x: 0.5 = center; x: 1.0 = right x: 1.0, // y: 0.0 = top; y: 0.5 = center; y: 1.0 = bottom y: 0.0 } } item The start or end item that each connector point is attached to. To define start and end board items of a connector, you specify the ID of the corresponding items. Example: TypeScript item: &#x27;3458764511234567890&#x27;; position The position object is nested inside the start and end objects. It includes the x and y coordinates that mark the start and end points of the connector. ℹ️ Note: For the start and end points specify either position coordinates, or snapTo properties. For reference, these are the x and y coordinates that define top-left, center, and bottom-right positions to mark the start or end point of a connector: x: 0.0 , y: 0.0 = top-left corner of the border of the start or end shape. x: 0.5 , y: 0.5 = center of the start or end shape. x: 1.0 , y: 1.0 = bottom-right corner of the border of the start or end shape. position data structure: TypeScript position: { // x: 0.0 = left; x: 0.5 = center; x: 1.0 = right x: 1.0, // y: 0.0 = top; y: 0.5 = center; y: 1.0 = bottom y: 0.0 } Figure 1. Visual representation of horizontal and vertical reference coordinates. x The x-axis coordinate of the start or end point of a connector. x accepts numerical values between 0.0 and 1.0 included. For reference, these are the x coordinates that define horizontal left, center, and right positions to mark the start or end point of a connector: x: 0.0 = left x: 0.5 = center x: 1.0 = right y The y-axis coordinate of the start or end point of a connector. y accepts numerical values between 0.0 and 1.0 included. For reference, these are the y coordinates that define vertical top, middle, and bottom positions to mark the start or end point of a connector: y: 0.0 = top y: 0.5 = middle y: 1.0 = bottom snapTo The snapTo property is nested inside the start and end objects. You can set the snapTo property as an alternative to position.x and position.y to set a connector terminal point to a specific, predefined position on the shape border. The snapTo property accepts the following values: top : the terminal point is positioned at the top of the connected board item. It corresponds to the position coordinates x: 0.5 , y: 0.0 . bottom : the terminal point is positioned at the bottom of the connected board item. It corresponds to the position coordinates x: 0.5 , y: 1.0 . left : the terminal point is positioned on the left side of the connected board item. It corresponds to the position coordinates x: 0.0 ; y: 0.5 . right : the terminal point is positioned on the right side of the connected board item. It corresponds to the position coordinates x: 1.0 ; y: 0.5 . auto : the terminal point is positioned dynamically, and it updates automatically, based on the location on the board of the connected item. It corresponds to the position coordinates undefined . ℹ️ Note: For the start and end points specify either position coordinates, or snapTo properties. snapTo and position are always in sync, and they&#x27;re mutually exclusive. The following table lists the snapTo property values, the position property values, and the description of the connector point position. position snapTo Connector point position x: 0.5 ; y: 0.0 top Top of the connected item. x: 0.0 ; y: 0.5 left Left of the connected item. x: 0.5 ; y: 1.0 bottom Bottom of the connected item. x: 1.0 ; y: 0.5 right Right of the connected item. undefined auto Dynamically updates the point position, based on the location on the board of the connected item. Figure 1. Visual representation of the predefined snapTo positions. end? Endpoint The end object groups properties that define: The board item that the end point of the connector attaches at. To define the end board item, you must specify the item ID. Position of the end point that can be defined in one of the following ways: snapTo values that are based on predefined position (specifically center of a connected item&#x27;s edge) x and y coordinates for custom location on the connected shape ℹ️ Note: The default value is undefined . However, you must specify a start and an end for the connector. When creating connectors programmatically, either with the Web SDK or the REST API, it&#x27;s not yet possible to create loose (both ends disconnected) or dangling (one end disconnected) connectors. end data structure with snapTo : TypeScript end: { // Define the end board item for the end point of the connector // by specifying the item ID. item: &#x27;3458764511234567896&#x27;, snapTo: &#x27;left&#x27; } end data structure with custom position: TypeScript end: { // Define the end board item for the end point of the connector // by specifying the item ID. item: &#x27;3458764511234567896&#x27;, position: { // x: 0.0 = left; x: 0.5 = center; x: 1.0 = right x: 1.0, // y: 0.0 = top; y: 0.5 = center; y: 1.0 = bottom y: 0.0 } } item The start or end item that each connector point is attached to. To define start and end board items of a connector, you specify the ID of the corresponding items. Example: TypeScript item: &#x27;3458764511234567890&#x27;; position The position object is nested inside the start and end objects. It includes the x and y coordinates that mark the start and end points of the connector. ℹ️ Note: For the start and end points specify either position coordinates, or snapTo properties. For reference, these are the x and y coordinates that define top-left, center, and bottom-right positions to mark the start or end point of a connector: x: 0.0 , y: 0.0 = top-left corner of the border of the start or end shape. x: 0.5 , y: 0.5 = center of the start or end shape. x: 1.0 , y: 1.0 = bottom-right corner of the border of the start or end shape. position data structure: TypeScript position: { // x: 0.0 = left; x: 0.5 = center; x: 1.0 = right x: 1.0, // y: 0.0 = top; y: 0.5 = center; y: 1.0 = bottom y: 0.0 } Figure 1. Visual representation of horizontal and vertical reference coordinates. x The x-axis coordinate of the start or end point of a connector. x accepts numerical values between 0.0 and 1.0 included. For reference, these are the x coordinates that define horizontal left, center, and right positions to mark the start or end point of a connector: x: 0.0 = left x: 0.5 = center x: 1.0 = right y The y-axis coordinate of the start or end point of a connector. y accepts numerical values between 0.0 and 1.0 included. For reference, these are the y coordinates that define vertical top, middle, and bottom positions to mark the start or end point of a connector: y: 0.0 = top y: 0.5 = middle y: 1.0 = bottom snapTo The snapTo property is nested inside the start and end objects. You can set the snapTo property as an alternative to position.x and position.y to set a connector terminal point to a specific, predefined position on the shape border. The snapTo property accepts the following values: top : the terminal point is positioned at the top of the connected board item. It corresponds to the position coordinates x: 0.5 , y: 0.0 . bottom : the terminal point is positioned at the bottom of the connected board item. It corresponds to the position coordinates x: 0.5 , y: 1.0 . left : the terminal point is positioned on the left side of the connected board item. It corresponds to the position coordinates x: 0.0 ; y: 0.5 . right : the terminal point is positioned on the right side of the connected board item. It corresponds to the position coordinates x: 1.0 ; y: 0.5 . auto : the terminal point is positioned dynamically, and it updates automatically, based on the location on the board of the connected item. It corresponds to the position coordinates undefined . ℹ️ Note: For the start and end points specify either position coordinates, or snapTo properties. snapTo and position are always in sync, and they&#x27;re mutually exclusive. The following table lists the snapTo property values, the position property values, and the description of the connector point position. position snapTo Connector point position x: 0.5 ; y: 0.0 top Top of the connected item. x: 0.0 ; y: 0.5 left Left of the connected item. x: 0.5 ; y: 1.0 bottom Bottom of the connected item. x: 1.0 ; y: 0.5 right Right of the connected item. undefined auto Dynamically updates the point position, based on the location on the board of the connected item. Figure 1. Visual representation of the predefined snapTo positions. style { color ?: string endStrokeCap?: &#x27;none&#x27; | &#x27;stealth&#x27; | &#x27;rounded_stealth&#x27; | &#x27;arrow&#x27; | &#x27;filled_triangle&#x27; | &#x27;...&#x27; fontSize?: number startStrokeCap?: &#x27;none&#x27; | &#x27;stealth&#x27; | &#x27;rounded_stealth&#x27; | &#x27;arrow&#x27; | &#x27;filled_triangle&#x27; | &#x27;...&#x27; strokeColor?: string strokeStyle?: &#x27;normal&#x27; | &#x27;dotted&#x27; | &#x27;dashed&#x27; strokeWidth?: number textOrientation?: &#x27;horizontal&#x27; | &#x27;aligned&#x27; } startStrokeCap Sets the shape of the start/head of the connector. It accepts values from a list of supported shape types. Default: none (No shape for the start point of the connector.) endStrokeCap Sets the shape of the tail end of the connector. It accepts values from a list of supported shape types. Default: stealth (An arrow shape for the end point of the connector.) Available stroke cap values, and their corresponding left and right shapes displayed on the board UI: Stroke cap Left and right stroke caps none stealth rounded_stealth arrow filled_triangle triangle filled_diamond diamond filled_oval oval erd_one erd_many erd_one_or_many erd_only_one erd_zero_or_many erd_zero_or_one strokeStyle Sets the type of line for the connector item. Possible values: normal : the line is solid. dashed : the line is represented by a series of short dashes. dotted : the line is represented by a series of dots. Default: normal Figure 1. Visual representation of normal, dashed, and dotted line types. strokeWidth Sets the thickness of the line for the connector item. It accepts an integer between 1 and 24 included. Min. (thin): 1 Max. (thick): 24 Default: 1 strokeColor Hex value representing the color of the connector item line . Default: #000000 (black) fontSize Defines the font size, in dp , for the caption of the connector. Default font size: 14 color Hex value representing the color of the connector captions . Default: #1a1a1a (dark grey) textOrientation The orientation of the caption relative to the curvature of the connector. Possible values: aligned : the caption is aligned with the curvature of the connector. horizontal : the caption appears horizontally regardless of the curvature of the connector. Default: aligned captions? Array&lt;{ content?: string; position?: number; textAlignVertical?: &#x27;top&#x27; | &#x27;middle&#x27; | &#x27;bottom&#x27; }&gt; captions An array of objects. Each caption object groups properties that define: The text that appears along the connector. The position of the caption, relative to the connector. The vertical alignment of the caption, relative to the connector. Caption data structure: TypeScript { content?: string position?: number textAlignVertical?: &#x27;top&#x27; | &#x27;middle&#x27; | &#x27;bottom&#x27; } content (captions) The accompanying text displayed along the connector. For example, you add text to content to describe the relationship between the two items that the connector links. position (captions) The position of the caption, relative to the connector. position accepts numerical values between 0.0 and 1.0 included. For example: 0.0 : the caption is at the start of the connector. 0.5 : the caption is in the middle of the connector. 1.0 : the caption is at the end of the connector. Default: 0.5 (middle) textAlignVertical (captions) The vertical alignment of the caption, relative to the connector. For example, set textAlignVertical to bottom to display the caption under the connector. Possible values: top : the caption is above the connector. middle : the caption is in the middle, along the the connector. bottom : the caption is under the connector. Default: middle id readonly string Unique ID of the item, assigned automatically upon creation. Example: 3658432978520043388 type readonly &#x27;connector&#x27; Defines the type of item . Item type is useful to retrieve specific items from a board. For example, you can fetch all card and shape items from the board, and then carry out an action on them. Example: TypeScript // Get all items from the board const items = await miro.board.get(); // Count all card and shape items on the board let cards = 0; let shapes = 0; items.forEach((items) =&gt; { switch (items.type) { case &#x27;card&#x27;: cards++; case &#x27;shape&#x27;: shapes++; } }); // Output to the console the total amount of card and shape items console.log(`The current board has ${cards} cards and ${shapes} shapes.`); parentId readonly &#x27;null&#x27; | string If an item is a child of another item, the child&#x27;s parentId returns the unique identifier of the corresponding parent item. If an item has no parent, its parentId is null . You can use the value to retrieve a tree structure when items are nested inside containers. For example, sticky notes inside frames or text items inside mindmaps. origin &#x27;center&#x27; origin marks: The positioning reference point of a board item. This is the point used to calculate the x and y coordinates of an item when it&#x27;s positioned on the board , or when it&#x27;s a child inside a parent item . The rotation pivot point of a board item that supports rotation . origin accepts only one value: center . Any other value throws an error. relativeTo &#x27;canvas_center&#x27; | &#x27;parent_top_left&#x27; | &#x27;parent_center&#x27; The relativeTo property affects the x and y coordinate values of a board item. relativeTo defines the positioning reference of a board item, which can be: Relative to the board Relative to a parent item Depending on whether an item is a child of a parent item or not, relativeTo can have one of the following values: Value Description On the board UI canvas_center The item is positioned on the board, and it&#x27;s not a child of another item. The x and y coordinate values of the item are relative to the center of the board . Figure 1. The relativeTo property of the board item—a sticky note in the example image—is set to canvas_center . The same mechanism applies to and works in the same way for all supported board items. parent_top_left The item is positioned on the board, and it is a child of a parent item. For example, a parent frame. The x and y coordinate values of the child item are relative to the top-left corner of the parent item ). Figure 2. The relativeTo property of the board item—a sticky note in the example image—is set to parent_top_left . The same mechanism applies to and works in the same way for all supported board items. parent_center Experimental feature The item is positioned on the board, and it is a child of a parent mind map node. The x and y coordinate values of the item are relative to the center of the parent mind map node item. Figure 3. The relativeTo property of the child mind map nodes is set to parent_center . See also: Position and coordinates Children inside parent items createdAt readonly string Timestamp Date and time when the item was created. Format: UTC, ISO 8601 . Includes a trailing Z offset . Example: 2021-05-18T07:59:01Z ℹ️ Note: Timestamps indicating creation and update times are always in UTC time , regardless of the time offset configured on the machine where the app runs or where the code is executed. createdBy readonly string Miro users are automatically assigned a unique ID. createdBy contains the ID of the user who created the item. Example: 3658432978520043388 modifiedAt readonly string Timestamp Date and time when the item was last modified. Format: UTC, ISO 8601 . Includes a trailing Z offset . Example: 2021-05-18T07:59:01Z ℹ️ Note: Timestamps indicating creation and update times are always in UTC time , regardless of the time offset configured on the machine where the app runs or where the code is executed. modifiedBy readonly string Miro users are automatically assigned a unique ID. modifiedBy contains the ID of the user who applied the most recent edit to the item. Example: 3658432978520043388 Methods sync(...) () =&gt; Promise&lt;void&gt; 🚦 Rate limit: Level 1 sync propagates to the board any changes to item and tag properties. After updating the properties of an item or a tag, sync it with the board to: Propagate to the board the changes applied to the item or to the tag. Make the changes visible on the board. All board items and tags require sync to make any changes to their properties visible on the board. For more information and examples, see Update and sync item properties . Example: (The code example updates a text item using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create an item. // In this case, a text item. const text = await miro.board.createText({ content: &#x27;&lt;p&gt;This is a piece of text to remind me that I always finish what I ...&lt;/p&gt;&#x27;, style: { fillColor: &#x27;transparent&#x27;, textAlign: &#x27;left&#x27;, }, x: 0, y: 0, width: 450, rotation: 0.0, }); // Update the board item by modifying the values of its properties. // In the text item case, the updated properties modify content, background color, and rotation of the item. text.content = &#x27;A fourteneer is &quot;A line that rumbles on like this for being a bit too long.&quot;&#x27;; text.style.fillColor = &#x27;#a9fe65&#x27;; text.rotation = 180.0; // Call &#x27;sync&#x27; to make the changed board item properties visible on the board. await text.sync(); // Output the updated board item to the developer console. console.log(text); Example: (The code example updates a tag using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create a tag. const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create a sticky note and attach the tag to it. const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tag: &quot;todo&quot;&#x27;, tagIds: [todo.id], }); console.log(stickyNote.tagIds); // =&gt; [&#x27;3074457345627244742&#x27;] // Update the tag properties: title and color. todo.title = &quot;won&#x27;t fix&quot;; todo.color = &#x27;green&#x27;; // Call &#x27;sync&#x27; to make the changed tag properties visible on the board. await todo.sync(); // Output the updated tag to the developer console. console.log(todo); getMetadata(...) (key: string) =&gt; Promise&lt;T&gt; 🚦 Rate limit: Level 1 Fetches board item metadata, stored per app, for the specified metadata key. The response contains the metadata value assigned to the requested key. To fetch all the metadata for a board item, invoke the method without passing any arguments. The response contains all the metadata associated with the board item as key/value pairs. An app can access only the metadata that it sets. It cannot access metadata set by other apps. getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups ℹ️ Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. getMetadata returns a new object, not a reference to the object that was previously set with setMetadata . If the specified key isn&#x27;t found, the method returns undefined . ⚠️ Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to retrieve metadata from. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;leaderboard&#x27;, [&#x27;Ziltoid&#x27;, &#x27;Howard&#x27;, &#x27;Paul&#x27;]); // Get the specific &#x27;leaderboard&#x27; metadata from the card item. const leaderboard = await geoCard.getMetadata(&#x27;leaderboard&#x27;); // Get all the metadata from the card item by passing no arguments. await geoCard.getMetadata(); setMetadata(...) (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;T&gt; Experimental Adds board item metadata to make it available on the board that the app runs on. An app can access only the board item metadata that it sets. It cannot access metadata set by other apps. Board item metadata is stored in the item it refers to. Therefore: When duplicating an item, the metadata is copied to the new item. When deleting an item, the corresponding metadata is removed with the deleted item. Board item metadata is synced across, and available to, all the users who can: Access and view the board that the app is running on, AND Run the app on the board. ItemMetadata is a key/value-pair object. It can contain values with the following data types: string number boolean Object Array null undefined getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups To overwrite an existing key inside ItemMetadata : Pass the same key multiple times with different values. Only the last/most recent value is stored with the key. To remove a key from ItemMetadata : Set the value of the existing key to either null , or undefined . This clears the key. If you call getMetadata(key) to retrieve a key that has been set to null or undefined , the method returns undefined . ℹ️ Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. You can assign an empty array ( [] ) to a key. It&#x27;s returned as an empty array. You can assign an empty string ( &#x27;&#x27; ) to a key. It&#x27;s returned as an empty string. ⚠️ Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to set metadata to. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;geoData&#x27;, { name: &#x27;null&#x27;, coordinates: { latitude: &#x27;33.950278&#x27;, longitude: &#x27;-105.314167&#x27;, }, lastFound: &#x27;1947-07-08&#x27;, content: true, difficulty: 5, keywords: [&#x27;x-files&#x27;, &#x27;truth-is-out-there&#x27;, &#x27;area-51&#x27;, &#x27;roswell&#x27;, &#x27;aliens&#x27;], geoCache: [ { name: &#x27;UFO&#x27;, description: &#x27;Severely damaged unidentified flying object. &#x27;, }, { name: &#x27;Alien&#x27;, description: &#x27;Remains of an alien life form.&#x27;, }, { name: &#x27;Artifacts&#x27;, description: &#x27;Tools, equipment, and other items found at the crash site.&#x27;, }, { name: &#x27;Edibles&#x27;, description: &#x27;The alien was likely as high as a kite when they crashed. Typical.&#x27;, }, ], }); // Get the specific &#x27;geoData&#x27; metadata from the card item. // The response contains the metadata value assigned to the key. const geoCardGeoData = await geoCard.getMetadata(&#x27;geoData&#x27;); // Get all the metadata from the card item. // The response contains all the metadata assigned to the board item as key/value pairs. const geoCardAllMetaData = await geoCard.getMetadata(); // Clear the metadata about the imaginary geocaching game in one of the following ways: // 1. Assign &#x27;geoData&#x27; an empty object. await miro.board.setMetadata(&#x27;geoData&#x27;, {}); // 2. Set &#x27;geoData&#x27; to &#x27;undefined&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, undefined); // 3. Set &#x27;geoData&#x27; to &#x27;null&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, null); Updated about 1 year ago Table of Contents Properties shape shape start? item position x y snapTo end? item position x y snapTo style startStrokeCap endStrokeCap strokeStyle strokeWidth strokeColor fontSize color textOrientation captions? captions content (captions) position (captions) textAlignVertical (captions) id type parentId origin relativeTo createdAt createdBy modifiedAt modifiedBy Methods sync(...) getMetadata(...) setMetadata(...)