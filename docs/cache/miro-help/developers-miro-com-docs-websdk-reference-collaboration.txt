Collaboration Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Collaboration Collaboration Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Collaboration Experimental The collaboration namespace provides methods and components to handle collaborative features on Miro boards, including: sessions , attention management , and remote viewport control . Sessions are the foundational component necessary for leveraging collaborative features. It is necessary to start a collaborative session (sessionStart) in order to manage features like attention management and remote viewport control. miro.board.collaboration provides methods and components that allow apps to create collaborative experiences across multiple users on the same board. This includes controlling the viewport, attention management capabilities such as zooming into user content, and more. startSession : starts a collaborative session. getSessions : retrieves existing sessions for the current app. zoomTo : zooms the specified user to one or more items on the board. on : subscribes to different collaborative events. off : unsubscribes from previously subscribed collaborative events. attention : provides access to methods related to managing attention. follow : initiates the process of following a specified online user(s), referred to as the followed user. unfollow : is used to stop a user(s) from following another user. isFollowing : checks whether the current user is already following another user on the board. getFollowedUser : if a user is following another user, the method returns the followed user details. Methods startSession(...) (props: SessionStartProps) =&gt; Promise&lt; Session &gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:write An application can start and manage collaborative sessions for participants on a board through the miro.board.collaboration namespace. In order to implement collaborative features, such as setting the focus and viewport control of other users on a board, an application must first start an active session. Concurrent sessions Applications support the ability to run multiple active sessions at one time on a board (for example, breakout rooms). Only one application can run active, concurrent sessions on a board at a time. Participants on a board can only be in one unique session at a time. ‚ÑπÔ∏è Note: Once you start the session , you get a session object returned, with this object you can perform further operations, such as ending the session. A flow diagram which shows collaboration.startSession() method returns a session object, which allows you to access session methods. sessionStart creates, starts and returns a Session for the current app. sessionStart accepts an object with the following properties: All properties Property Type color? string description? string name string name defines the name of the session that will be displayed in some parts of the UI. color is an optional parameter that accepts a hexadecimal color which can also be used in some parts of the UI. description is an optional parameter that will be used in some places in the UI. getSessions(...) () =&gt; Promise&lt;Array&lt; Session &gt;&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:read The getSessions returns a list of the active Sessions for the current application. zoomTo(...) ( user: OnlineUserInfo , items: OneOrMany&lt;{ connectorIds ?: readonly Array&lt;string&gt; createdAt : readonly string createdBy : readonly string groupId ?: readonly string title =&quot;id&quot;&gt;id: readonly string linkedTo ?: string modifiedAt : readonly string modifiedBy : readonly string origin : Origin parentId : readonly string | &#x27;null&#x27; relativeTo : RelativeTo title =&quot;type&quot;&gt;type: string title =&quot;x&quot;&gt;x: number title =&quot;y&quot;&gt;y: number bringInFrontOf : (target: BaseItem) =&gt; Promise&lt;void&gt; bringToFront : () =&gt; Promise&lt;void&gt; getConnectors : () =&gt; Promise&lt;Array&lt; Connector &gt;&gt; getLayerIndex : () =&gt; Promise&lt;number&gt; getMetadata : (key: string) =&gt; Promise&lt;T&gt; goToLink : () =&gt; Promise&lt;boolean&gt; sendBehindOf : (target: BaseItem) =&gt; Promise&lt;void&gt; sendToBack : () =&gt; Promise&lt;void&gt; setMetadata : (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;T&gt; title =&quot;sync&quot;&gt;sync: () =&gt; Promise&lt;void&gt; }&gt; ) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:read zoomTo method zooms the specified user to one or more items on the board. If you zoom to items that are scattered across the board, the method can zoom out to include all the items passed as arguments in the viewport. This method will throw an error if: No user and items are passed as arguments. The specified user is not online. The specified user is not in some session of your app. Example: TypeScript // Get currently online users. const onlineUsers = await miro.board.getOnlineUsers(); // Retrieve the user that you want to navigate. const user = onlineUsers.find((user) =&gt; user.name.includes(&quot;Sara&quot;)); // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, x: 400, y: 400, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, x: -400, y: -400, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Zoom to a sticky note on the board await miro.board.collaboration.zoomTo(user, first); // Or: zoom to multiple sticky notes on the board await miro.board.collaboration.zoomTo(user, [second, third]); // Or: zoom to all sticky notes on the board const stickyNotes = await miro.board.get({ type: &#x27;sticky_note&#x27;, }); await miro.board.collaboration.zoomTo(user, stickyNotes); on(...) (name: &#x27;sessions:started&#x27; | &#x27;sessions:ended&#x27;, handler: (event: SessionsLifecycleEvent) =&gt; void) =&gt; Promise&lt;void&gt; Subscribes to collaboration events in your app sessions:started : Triggered when any session in your app has started. sessions:ended : Triggered when any session in your app has ended. Both sessions:Started and sessions:Ended will receive a SessionsLifecycleEvent object as a parameter. SessionsLifecycleEvent Property Type session { color : readonly string description : readonly string title =&quot;id&quot;&gt;id: readonly string title =&quot;name&quot;&gt;name: readonly string starterId: readonly string starterName: readonly string end: () =&gt; Promise&lt;void&gt; getUsers: () =&gt; Promise&lt;Array&lt;string&gt;&gt; hasJoined: (user: string) =&gt; Promise&lt;boolean&gt; invite: (users: Array&lt; OnlineUserInfo &gt; | Array&lt;Array&lt; OnlineUserInfo &gt;&gt;) =&gt; Promise&lt;void&gt; join: () =&gt; Promise&lt;void&gt; leave: () =&gt; Promise&lt;void&gt; title =&quot;off&quot;&gt;off: ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; title =&quot;on&quot;&gt;on: ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; } Example: TypeScript // Registers to the &#x27;sessions:started&#x27; event emitted by the same app when a session has started miro.board.collaboration.on(&#x27;sessions:started&#x27;, async (event: SessionsLifecycleEvent) =&gt; { const { session } = event }); const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }) off(...) (name: &#x27;sessions:started&#x27; | &#x27;sessions:ended&#x27;, handler: (event: SessionsLifecycleEvent) =&gt; void) =&gt; Promise&lt;void&gt; Unsubscribes from previously subscribed collaboration events in your app sessions:started : Triggered when any session in your app has started. sessions:ended : Triggered when any session in your app has ended. Example: TypeScript const handler = async (event: SessionsLifecycleEvent)) =&gt; { const { session } = event } // Registers to the &#x27;sessions:started&#x27; event emitted by the same app when a session has started miro.board.collaboration.on(&#x27;sessions:started&#x27;, handler); // Unsubscribe from the &#x27;sessions:started&#x27; event handler. miro.board.collaboration.off(&#x27;sessions:started&#x27;, handler); const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }) All properties Property Type attention readonly { follow : (followee: OnlineUserInfo , options?: FollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; getFollowedUser : () =&gt; Promise&lt; OnlineUserInfo &gt; isFollowing : () =&gt; Promise&lt;boolean&gt; unfollow : (options?: UnfollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; } getSessions(...) () =&gt; Promise&lt;Array&lt; Session &gt;&gt; off(...) ( title =&quot;name&quot;&gt;name: &#x27;sessions:started&#x27; | &#x27;sessions:ended&#x27;, handler: (event: SessionsLifecycleEvent) =&gt; void) =&gt; Promise&lt;void&gt; on(...) ( title =&quot;name&quot;&gt;name: &#x27;sessions:started&#x27; | &#x27;sessions:ended&#x27;, handler: (event: SessionsLifecycleEvent) =&gt; void) =&gt; Promise&lt;void&gt; startSession(...) (props: SessionStartProps) =&gt; Promise&lt; Session &gt; zoomTo(...) ( user: OnlineUserInfo , items: OneOrMany&lt;{ connectorIds ?: readonly Array&lt;string&gt; createdAt : readonly string createdBy : readonly string groupId ?: readonly string title =&quot;id&quot;&gt;id: readonly string linkedTo ?: string modifiedAt : readonly string modifiedBy : readonly string origin : Origin parentId : readonly string | &#x27;null&#x27; relativeTo : RelativeTo title =&quot;type&quot;&gt;type: string title =&quot;x&quot;&gt;x: number title =&quot;y&quot;&gt;y: number bringInFrontOf : (target: BaseItem) =&gt; Promise&lt;void&gt; bringToFront : () =&gt; Promise&lt;void&gt; getConnectors : () =&gt; Promise&lt;Array&lt; Connector &gt;&gt; getLayerIndex : () =&gt; Promise&lt;number&gt; getMetadata : (key: string) =&gt; Promise&lt;T&gt; goToLink : () =&gt; Promise&lt;boolean&gt; sendBehindOf : (target: BaseItem) =&gt; Promise&lt;void&gt; sendToBack : () =&gt; Promise&lt;void&gt; setMetadata : (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;T&gt; title =&quot;sync&quot;&gt;sync: () =&gt; Promise&lt;void&gt; }&gt; ) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods startSession(...) getSessions(...) zoomTo(...) on(...) off(...) All properties