REST API reference guide Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation REST API reference guide REST API reference guide Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy REST API reference guide This pages serves as a reference, mapping each v1 endpoint to its v2 counterpart. For a higher-level explanation of these changes, check out the comparison guide . Boards The following table provides a direct comparison of each v1 REST API endpoint for Boards and Board User Connections, including: Create Board, Get Board, Get Board Members, Share Board, Update Board, Get Current User Boards Get Board User Connection, Update Board User Connection, Delete Board User Connection In addition, there are a few endpoints in the v2 REST API for which a v1 equivalent did not exist, which you may find interesting. Copy Board Delete Board Get All Board Members v1 endpoint v2 endpoint Create Board Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;name&quot;: &quot;BOARD_NAME&quot;, &quot;sharingPolicy&quot;: { &quot;access&quot;: &quot;private&quot;, &quot;teamAccess&quot;: &quot;private&quot; }, &quot;description&quot;: &quot;BOARD_DESCRIPTION&quot; Create Board Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;name&quot;: &quot;BOARD_NAME&quot;, &quot;policy&quot;: { &quot;permissionsPolicy&quot;: { &quot;collaborationToolsStartAccess&quot;: &quot;all_editors&quot;, &quot;copyAccess&quot;: &quot;anyone&quot;, &quot;sharingAccess&quot;: &quot;team_members_with_editing_rights&quot; }, &quot;sharingPolicy&quot;: { &quot;access&quot;: &quot;private&quot;, &quot;inviteToAccountAndBoardLinkAccess&quot;: &quot;no_access&quot;, &quot;organizationAccess&quot;: &quot;private&quot;, &quot;teamAccess&quot;: &quot;private&quot; } }, &quot;description&quot;: &quot;BOARD_DESCRIPTION&quot;, &quot;teamId&quot;: &quot;TEAM_ID&quot; Get Board Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Specific Board Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Board Members Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/user-connections &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Payload: No payload required, unless specifying for pagination. Get All Board Members Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/members &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Payload: No payload required, unless specifying for pagination. Share Board Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/share &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;emails&quot;: [ &quot;EMAIL_ADDRESS_1&quot;, &quot;EMAIL_ADDRESS_2&quot;, &quot;ETC&quot; ], &quot;teamInvitationStrategy&quot;: &quot;invite_when_required&quot;, &quot;role&quot;: &quot;viewer&quot;, &quot;message&quot;: &quot;OPTIONAL_MESSAGE_FOR_RECIPIENTS&quot; Share Board Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/members &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;emails&quot;: [ &quot;EMAIL_ADDRESS_1&quot;, &quot;EMAIL_ADDRESS_2&quot;, &quot;ETC&quot; ], &quot;role&quot;: &quot;viewer&quot;, &quot;message&quot;: &quot;OPTIONAL_MESSAGE_FOR_RECIPIENTS&quot; Update Board Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;sharingPolicy&quot;: { &quot;access&quot;: &quot;private&quot;, &quot;teamAccess&quot;: &quot;private&quot; }, &quot;name&quot;: &quot;NEW_BOARD_NAME&quot;, &quot;description&quot;: &quot;NEW_BOARD_DESCRIPTION&quot; Update Board Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;name&quot;: &quot;NEW_BOARD_NAME&quot;, &quot;policy&quot;: { &quot;permissionsPolicy&quot;: { &quot;collaborationToolsStartAccess&quot;: &quot;all_editors&quot;, &quot;copyAccess&quot;: &quot;anyone&quot;, &quot;sharingAccess&quot;: &quot;team_members_with_editing_rights&quot; }, &quot;sharingPolicy&quot;: { &quot;access&quot;: &quot;private&quot;, &quot;inviteToAccountAndBoardLinkAccess&quot;: &quot;no_access&quot;, &quot;organizationAccess&quot;: &quot;private&quot;, &quot;teamAccess&quot;: &quot;private&quot; } }, &quot;description&quot;: &quot;NEW_BOARD_DESCRIPTION&quot;, &quot;teamId&quot;: &quot;NEW_TEAM_ID&quot; Get Current User Boards Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/teams/{BOARD_ID}/boards &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Payload: No payload required, unless specifying for pagination. Get Boards Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Required query parameter: ?team_id=TEAM_ID Payload: No payload required, unless specifying for pagination. Note: This is not an exact equivalent for the Get Current User Boards function, but it can achieve the same result. This function returns a list of boards that meet the provided search criteria. When specifying the team_id , the response will include all of the boards in the team that are visible to the user with whom the authorization token is associated. Get Board User Connection Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/board-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Specific Board Member Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/members/{BOARD_MEMBER_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: Connections are no longer treated as entities in the v2 REST API. Update Board User Connection Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/board-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: {&quot;role&quot;:&quot;viewer&quot;} Update Board Member Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/members/{BOARD_MEMBER_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: {&quot;role&quot;: &quot;viewer&quot;} Note: Connections are no longer treated as entities in the v2 REST API. Delete Board User Connection Request type: DELETE API endpoint URL: &lt;https://api.miro.com/v1/board-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Remove Board Member Request type: DELETE API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/members/{BOARD_MEMBER_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: Connections are no longer treated as entities in the v2 REST API. Widgets / Items The Miro v2 REST API has replaced the polymorphic Widget API endpoints with specific, independent API endpoints for each type of widget (&quot;item&quot;) on a Miro board. The following table provides a direct comparison of each v1 REST API endpoint for Board Content, including: List All Widgets, Get Widget, Delete Widgets Create Widget, Update Widget for the following widget types: Card, Sticker/Sticky Note, Text, Shape In addition, there are several endpoints for board content in the v2 REST API for which a v1 equivalent did not exist, including: Tags Additional widget/item types: App Card , Document , Embed , Frame , Image Each item type also offers additional endpoints, such as Get Card Item and Delete Card Item, as well as type-specific endpoints that offer additional options for interacting with that item type. v1 endpoint v2 endpoint List All Widgets Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/ &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Optional Query Parameter: (to filter by widget type) ?widgetType=WIDGET_TYPE Get Items on Board Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/items &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Optional Query Parameter: (to filter by item type) ?type=ITEM_TYPE Payload: No payload required, unless specifying for pagination. Get Widget Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Specific Item on Board Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/items/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Create Widget - Card Request type: POST &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;type&quot;: &quot;card&quot;, &quot;title&quot;: &quot;CARD_TITLE&quot;, &quot;Description&quot;: &quot;CARD_DESCRIPTION&quot; } Create Card Item Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/cards &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;title&quot;: &quot;CARD_TITLE&quot;, &quot;description&quot;: &quot;CARD_DESCRIPTION&quot; } Update Widget - Card Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;title&quot;: &quot;NEW_CARD_TITLE&quot;, &quot;description&quot;: &quot;NEW_CARD_DESCRIPTION&quot; } Update Card Item Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/cards/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;title&quot;: &quot;NEW_CARD_TITLE&quot;, &quot;description&quot;: &quot;NEW_CARD_DESCRIPTION&quot; } Create Widget - Sticker Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;type&quot;: &quot;sticker&quot;, &quot;text&quot;: &quot;STICKER_TEXT&quot; } Create Sticky Note Item Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/sticky_notes &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;STICKY_NOTE_TEXT&quot;, &quot;shape&quot;: &quot;square&quot; } Note: The name for this widget/item type has been updated from Sticker to Sticky Note in v2 for improved clarity. Update Widget - Sticker Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;text&quot;: &quot;NEW_STICKER_TEXT&quot; } Update Sticky Note Item Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/sticky_notes/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;NEW_STICKY_NOTE_TEXT&quot;, &quot;shape&quot;: &quot;rectangle&quot; } Create Widget - Text Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;type&quot;: &quot;text&quot;, &quot;text&quot;: &quot;MESSAGE&quot; } Create Text Item Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/texts &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;MESSAGE&quot; } Note: The text field in the data object payload has been renamed from text to content . Update Widget - Text Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;text&quot;: &quot;NEW_MESSAGE&quot; } Update Text Item Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/texts/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;NEW_MESSAGE&quot; } Note: The text field in the data object payload has been renamed from text to content . Create Widget - Shape Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;type&quot;: &quot;shape&quot;, &quot;text&quot;: &quot;SHAPE_TEXT&quot;, &quot;style&quot;: { &quot;shapeType&quot;: &quot;rectangle&quot; } } Create Shape Item Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/shapes &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;SHAPE_TEXT&quot;, &quot;shape&quot;: &quot;rectangle&quot; } Note: The shape field in the data object payload has been renamed from shapeType to shape . Update Widget - Shape Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;text&quot;: &quot;NEW_SHAPE_TEXT&quot;, &quot;style&quot;: { &quot;shapeType&quot;: &quot;callout&quot; } } Update Shape Item Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/shapes/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;content&quot;: &quot;NEW_SHAPE_TEXT&quot;, &quot;shape&quot;: &quot;wedge_round_rectangle_callout&quot; } Note: The shape field in the data object payload has been renamed from shapeType to shape . Create Widget - Line Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;type&quot;: &quot;line&quot;, &quot;style&quot;: { &quot;lineType&quot;: &quot;straight&quot; } } Create Connector Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/connectors &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;startItem&quot;: { &quot;id&quot;: &quot;{{ITEM_ID}}&quot;, &quot;snapTo&quot;: &quot;auto&quot; }, &quot;endItem&quot;: { &quot;id&quot;: &quot;{{ITEM_ID}}&quot;, &quot;snapTo&quot;: &quot;auto&quot; }, &quot;shape&quot;: &quot;straight&quot; } Note: style.lineType in v1 has been replaced with shape in v2. Furthermore, free-form lines are not currently supported. The startItem and endItem fields are required for connectors. Update Widget - Line Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;style&quot;: { &quot;lineType&quot;: &quot;orthogonal&quot; } } Update Connector Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/boards/{board_id}/connectors/{connector_id} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: { &quot;startItem&quot;: { &quot;id&quot;: &quot;{{ITEM_ID}}&quot;, &quot;snapTo&quot;: &quot;auto&quot; }, &quot;endItem&quot;: { &quot;id&quot;: &quot;{{ITEM_ID}}&quot;, &quot;snapTo&quot;: &quot;auto&quot; }, &quot;shape&quot;: &quot;elbowed&quot; } Note: style.lineType in v1 has been replaced with shape in v2. Also, the supported line types / shapes have changed in v2. shape can be straight , elbowed , or curved . For more details on the differences in styles for connectors, please see the comparison guide . Delete Widgets Request type: DELETE API endpoint URL: &lt;https://api.miro.com/v1/boards/{BOARD_ID}/widgets/{WIDGET_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Delete Item Request type: DELETE API endpoint URL: &lt;https://api.miro.com/v2/boards/{BOARD_ID}/items/{ITEM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Teams The following table provides a direct comparison of each v1 REST API endpoint for Teams and Team User Connections, including: Get Team, Update Team, List All Team Members, Get Team Current User Connection, Invite to Team Get Team User Connection, Update Team User Connection, Delete Team User Connection In addition, there are a few endpoints in the v2 REST API for which a v1 equivalent did not exist, which you may find interesting. Create Team Delete Team List Teams v1 endpoint v2 endpoint Get Team Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/teams/{TEAM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Team Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/orgs/{ORG_ID}/teams/{TEAM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. Update Team Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/teams/{TEAM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;name&quot;: &quot;NEW_TEAM_NAME&quot; Update Team Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v2/orgs/{ORG_ID}/teams/{TEAM_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;name&quot;: &quot;NEW_TEAM_NAME&quot; Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. List All Team Members Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/teams/{TEAM_ID}/user-connections &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Payload: No payload required, unless specifying for pagination. List Team Members Request type: GET API endpoint URL: &lt;https://api.miro.com/v2/orgs/{ORG_ID}/teams/{TEAM_ID}/members &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Payload: No payload required, unless specifying for pagination. Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. Get Team Current User Connection Request type: GET API endpoint URL: &lt;https://developers.miro.com/reference/get-team-current-user-connection &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: There is no exact equivalent of this endpoint in the v2 REST API. However, you can use Get Access Token Context to retrieve the user object for the current authorized user. Invite to Team Request type: POST API endpoint URL: &lt;https://api.miro.com/v1/teams/{TEAM_ID}/invite &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: &quot;emails&quot;: [ &quot;EMAIL_ADDRESS_1&quot;, &quot;EMAIL_ADDRESS_2&quot;, &quot;ETC&quot; ] Invite Team Members Request type: POST API endpoint URL: &lt;https://api.miro.com/v2/orgs/{ORG_ID}/teams/{TEAM_ID}/members &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: {&quot;userEmail&quot;: &quot;EMAIL_ADDRESS&quot;} Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. Also, note that unlike the v1 Invite to Team endpoint, this endpoint can only invite one new email address at a time. Get Team User Connection Request type: GET API endpoint URL: &lt;https://api.miro.com/v1/team-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Get Team Member Request type: GET API endpoint URL: https://api.miro.com/v2/orgs/{ORG_ID} \ /teams/{TEAM_ID}/members/{MEMBER_ID} Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. In addition, connections are no longer treated as entities in v2. Update Team User Connection Request type: PATCH API endpoint URL: &lt;https://api.miro.com/v1/team-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: {&quot;role&quot;:&quot;viewer&quot;} Update Team Member Request type: PATCH API endpoint URL: https://api.miro.com/v2/orgs/{ORG_ID} \ /teams/{TEAM_ID}/members/{MEMBER_ID} Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; &#x27;Content-Type: application/json&#x27; Payload: {&quot;role&quot;:&quot;member&quot;} Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. In addition, connections are no longer treated as entities in v2. Delete Team User Connection Request type: DELETE API endpoint URL: &lt;https://api.miro.com/v1/team-user-connections/{CONNECTION_ID} &gt; Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Delete Team Member from Team Request type: DELETE API endpoint URL: https://api.miro.com/v2/orgs/{ORG_ID} \ /teams/{TEAM_ID}/members/{MEMBER_ID} Headers: &#x27;Accept: application/json&#x27; &#x27;Authorization: Bearer {{ACCESS_TOKEN}}&#x27; Note: In the v2 REST API, Teams endpoints are available only to Enterprise plans. In addition, connections are no longer treated as entities in v2. Users While User objects remain unchanged between the v1 REST API and v2, there are no longer specific endpoints for retrieving those User objects. Instead, user objects can be found nested in the relevant API responses (such as in the createdBy and modifiedBy fields). The following v1 endpoints will not be available in v2: Get User Get Current User Update Current User As an alternative, you can use Get Access Token Context to retrieve the user object for the current authorized user. Pictures Picture Objects have been removed, and the ability to programmatically set or change an App picture, a Board picture, or a Team picture is no longer available. However, Board pictures can be retrieved via the GET Specific Board endpoint in v2. The following v1 endpoints are not available in v2: Get Picture Create or Update Picture Delete Picture Audit Logs The Audit Logs API has some minor changes in V2, as described in the following sections. Request parameters Instead of offset-based pagination, this endpoint now supports cursor-based pagination. Therefore the offset parameter is removed and replaced with the cursor parameter. A new sorting parameter has been introduced, which allows you to sort the audit logs in ascending ( ASC ) or descending ( DESC ) order. Response body The type parameter value is now cursor-list instead of list . The offset parameter is updated to cursor . To retrieve the next set of results of the collection, set the cursor parameter in your next request to the appropriate cursor value returned in the response. The nextLink and prevLink parameters have been removed. New capabilities in v2 REST API There are several new capabilities in the v2 REST API, including: Webhooks Bulk Operations Mindmaps Flowchart shapes Resource URLs The V2 REST API supports a new parameter that provides the url to download certain resources on a Miro board: Document documentUrl Image imageUrl Embed previewUrl For more details, see the Changelog entry . We will continue to expand support for these capabilities. Stay up to date with our changelog for the latest developments. Authorization Info The Authorization object and endpoints remain unchanged between v1 and v2. The following authorization endpoints are available in v2: Get Access Token Context Revoke Token For more information on using the OAuth 2.0 authorization code flow, check out the Getting Started guide. Updated about 1 year ago Table of Contents Boards Widgets / Items Teams Users Pictures Audit Logs Request parameters Response body New capabilities in v2 REST API Authorization Info