Realtime Events Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Realtime Events Realtime Events Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Realtime Events Methods broadcast(...) (event: string, payload?: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 Send real-time broadcasted collaborative event to all other users and browser instances (tabs) except the current. Example: TypeScript // Send broadcasted event to all users on the board and also to all opened browsers/tabs of current user and the same board. await miro.board.events.broadcast(&#x27;message&#x27;, &#x27;hello&#x27;); // For other users this event handler will show notification with text &#x27;hello&#x27; miro.board.events.on(&#x27;message&#x27;, async (message) =&gt; { await miro.board.notifications.showInfo(message); }); on(...) (event: string, handler: (payload: T) =&gt; void) =&gt; Promise&lt;void&gt; If you want your app to react to an event by executing a function, you can use the on property to subscribe to events. The on property subscribes the app to listen to an event. When the event fires, the event handler executes a function to perform an action. To subscribe to an event and its handler, pass to the on property: The event that your app should listen to. The event handler that the app needs to call when the event fires. Dispatching events In general, when an app subscribes to an event, the event is dispatched to all iframes : Headless (main iframe) Panel Modal This behavior makes it easy to subscribe to an event from any of these iframes, without worrying about which iframe the event is dispatched to. Note: You can subscribe to any event, but it should be sent by your app somewhere, for example by using miro.board.events.broadcast(event, data) method. Example: TypeScript // Listen to the &#x27;message&#x27; event emitted by the same app and show notification message. miro.board.events.on(&#x27;message&#x27;, async (message) =&gt; { await miro.board.notifications.showInfo(message); }); off(...) (event: string, handler: (payload: T) =&gt; void) =&gt; Promise&lt;void&gt; When an app no longer needs to listen to an event to trigger an event handler, it can use the off property to unsubscribe from it. To unsubscribe from an event and its handler, pass to the off property: The event whose handler you want your app to unsubscribe from. The event handler that you previously registered with the on property, and that your app no longer needs to listen to. Example: TypeScript // Create an &#x27;onEvent&#x27; event handler to show broadcasted message. const onEvent = async (message: string) =&gt; { await miro.board.notifications.showInfo(message); }; // Register the &#x27;message&#x27; event so that the app listens to it. miro.board.events.on(&#x27;message&#x27;, handler); // Unsubscribe from the &#x27;message&#x27; event handler. // The app no longer shows notification to user. miro.board.events.off(&#x27;message&#x27;, handler); All properties Property Type broadcast(...) (event: string, payload?: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;void&gt; off(...) (event: string, handler: (payload: T) =&gt; void) =&gt; Promise&lt;void&gt; on(...) (event: string, handler: (payload: T) =&gt; void) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods broadcast(...) on(...) off(...) All properties