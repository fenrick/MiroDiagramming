Mind map (Experimental) Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Mind map (Experimental) Mind map (Experimental) Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Mind map (Experimental) Create, read, update, or delete mind maps to programmatically represent and interact with complex structures of information into Miro boards. With minimal development effort, you can also seamlessly import and export from third-party tools, or transform mind map information into other item types in Miro. A mind map is a visual diagram that can be used to organize, connect, and represent information in a hierarchical, interconnected, and graphical format. It is often used as a brainstorming tool or to aid in the generation, organization, and presentation of ideas, concepts, or information. Mind maps are often used in a variety of contexts, including education, business, and personal development, as they help individuals to explore ideas, solve problems, and make connections between different pieces of information. Figure 1. Mind map example. Mind map experimental release features The experimental release of the mind map item supports the following: Item types: only text items (we do not support other item types in the experimental release) Web SDK : CRUD operations REST API : Create, read, delete operations Mind map theme orientation: Horizontal orientation, from left to right Positioning: Auto-layout positioning We are evaluating and developing the following points for future iterations of the mind map widget: Mind map styles: For example, connector shape (elbowed/curved), node color, font size, font color, font style Mind map theme orientation: Addition of the vertical orientation Children positioning: Free positioning of nodes Batch operations: Batch helper method to create nodes in a mind map REST API : Update operation Mind map structure The structure of a mind map typically consists of a central idea or theme, called as a root node, which is surrounded by related subtopics and ideas. For example, the Miro Mind Map item is the root node of the mind map illustrated in Figure 1. The main idea, or the root node, has branches extending outward to the right or the left side of the root node to show the subtopics and their relationships. Each subtopic is a child node and can have further branches or subcategories (further child nodes), creating a web of interconnected ideas. This structure allows the user to see the relationships between different concepts, which can aid in understanding and recall. üìò The experimental release of mind maps supports only text item types on a Miro board. Figure 2. Mind map with parent and child node examples. Mind map use cases Use case Action Create and transform mind maps in Miro Create a new mind map. Convert existing items, such as sticky notes, shapes, or text items to a mind map. Convert a mind map to another item type, such as sticky notes, shapes, or text items. Import data from third-party tools or external data sources Create a mind map in Miro by importing data from a third-party tool or an external data source. You can import data from: - MindMapping tools, such as MindNode. - External data sources or databases, such as CSVs, AirTable, and so on. - Tools that have structured content, such as Notion, Confluence, HubSpot, and so on. We&#x27;ve added an example app for you to learn and try out how to import data from a CSV file and automatically create a mind map on a Miro board. Export mind maps from Miro to third-party tools or external data sources Export a mind map to a third-party tool or another data format, such as a CSV file. Mind maps vs. connectors usage The following table lists various use cases for mind maps and connectors with their pros and cons. This information provides guidance on whether you should use connectors or mind map items based on your use cases and requirements. Mind maps Connectors Use case - Data visualization of structured content - Organize, connect, and represent information in a hierarchical, interconnected, and graphical format. - Brainstorming tool - Diagrams - Flow charts Pros - Connectors are automatically created - Use auto-layout to avoid dealing with positioning - Control on connector style (including text) - Control on connector type (arrows and ERD shapes included) - Works with any type of Miro board item Cons - Experimental release supports only Text item type on the Miro board. - Need to deal with connector creation and positioning Resources Mind map example app We&#x27;ve added an example app for you to learn and try out how to import data from a CSV file and automatically create a mind map on a Miro board. Mind map reference guide Read more about the mind map Web SDK in our reference guide . Read more about the mind map REST API in our reference guide . Updated almost 2 years ago Table of Contents Mind map experimental release features Mind map structure Mind map use cases Mind maps vs. connectors usage Resources Mind map example app Mind map reference guide