Viewport Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Viewport Viewport Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Viewport Methods get(...) () =&gt; Promise&lt;Rect&gt; üîí Requires scope: boards:read or boards:write Fetches the dimensions of the current viewport and its position, relative to the center of board with x: 0 and y: 0 . The viewport x and y coordinates define the horizontal and vertical position of the top-left corner of the viewport, relative to the center point of the board with x: 0 and y: 0 . Values are in dp . The method takes no arguments. Example: TypeScript // Get the current viewport. const viewport = await miro.board.viewport.get(); // Print coordinates and dimensions of the current viewport. console.log(viewport); // { // x: -29570.817261000782, // y: -18247.315051361205, // width: 64157.213365973126, // height: 32763.49326537 // } set(...) (options: { animationDurationInMs?: number; padding?: Offset; viewport : Rect }) =&gt; Promise&lt;Rect&gt; üîí Requires scope: boards:read or boards:write Updates the dimensions of the viewport and its position, relative to the center of board with x: 0 and y: 0 . There can be a discrepancy between the input that you pass to viewport.set() , and the corresponding output. The output depends on specific factors such as the actual screen size, any vertical or horizontal navigation bars, and so on. viewport The method takes viewport as a required argument: Property Type Description x Number Horizontal position of the top-left corner of the viewport, relative to the center point of the board, in dp . y Number Vertical position of the top-left corner of the viewport, relative to the center point of the board, in dp. width Number Width of the viewport, in dp. height Number Height of the viewport, in dp. The method takes padding and animationDurationInMs as optional arguments. padding padding is an object with the following optional properties: Property Type Description top Number Padding area above the target viewport, in dp. Default: 0 (no padding) bottom Number Padding area below the target viewport, in dp. Default: 0 (no padding) right Number Padding area right of the target viewport, in dp. Default: 0 (no padding) left Number Padding area left of the target viewport, in dp. Default: 0 (no padding) animationDurationInMs animationDurationInMs defines the duration in milliseconds of a zoom animation effect that plays when setting the viewport. Default: 0 (no animation) Example: TypeScript const myViewport = await miro.board.viewport.set({ viewport: { x: 200, // top-left corner of the viewport, relative to the center of the board y: 100, // top-left corner of the viewport, relative to the center of the board width: 1280, height: 720, }, padding: { top: 100, left: 200, bottom: 50, right: 20, }, animationDurationInMs: 1000, }); console.log(myViewport); // =&gt; {x: 224.2903225806451, y: 119.00000000000003, width: 1328.5806451612902, height: 718.7872340425532} zoomTo(...) (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:read or boards:write Zooms to one or more items on the board. If you zoom to items that are scattered across the board, the method can zoom out to include in the viewport all the items that you pass as arguments. If you don&#x27;t pass any items as arguments, the method throws an error. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, x: 400, y: 400, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, x: -400, y: -400, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Zoom to a sticky note on the board await miro.board.viewport.zoomTo(first); // Or: zoom to multiple sticky notes on the board await miro.board.viewport.zoomTo([second, third]); // Or: zoom to all sticky notes on the board const stickyNotes = await miro.board.get({ type: &#x27;sticky_note&#x27;, }); await miro.board.viewport.zoomTo(stickyNotes); getZoom(...) () =&gt; Promise&lt;number&gt; üîí Requires scope: boards:read or boards:write Returns the current zoom level on the board. The method takes no arguments. Example: TypeScript // Get the current zoom level. const zoomLevel = await miro.board.viewport.getZoom(); // Print the current zoom level. console.log(zoomLevel); setZoom(...) (zoomLevel: number) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:read or boards:write Updates the zoom level on the board. The method takes zoomLevel as a required argument. The zoomLevel accepts a value between 0.01 (1% zoom on the board UI) and 4 (400% zoom on the board UI). Example: TypeScript // Set the zoom level to 400%. await miro.board.viewport.setZoom(4); // The board will be zoomed at 400%. All properties Property Type get(...) () =&gt; Promise&lt;Rect&gt; getZoom(...) () =&gt; Promise&lt;number&gt; set(...) (options: { animationDurationInMs?: number; padding?: Offset; viewport : Rect }) =&gt; Promise&lt;Rect&gt; setZoom(...) (zoomLevel: number) =&gt; Promise&lt;void&gt; zoomTo(...) (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods get(...) set(...) zoomTo(...) getZoom(...) setZoom(...) All properties