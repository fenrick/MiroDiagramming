Board Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Board Board Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Board board is a property of window.miro that enables: Setting up your app . Making board and its properties available, as well as the Miro Web SDK methods. Properties ui BoardUI ui is the namespace that groups methods that apps can use to interact with users through the board UI . Through miro.board.ui , apps can access methods to display specific UI elements, and to populate them with the desired content. Typically, Miro apps can prompt for user interaction on the board UI through panels and modals . miro.board.ui also enables apps to subscribe to and unsubscribe from Miro Web SDK events . notifications Notifications notifications is the namespace that groups methods to handle and control notifications displayed on the board UI. Through miro.board.notifications , apps can access methods to display specific notification types, and to populate them with the desired messages. showInfo : a convenience method to trigger a notification to display an informative message on the board UI. Informs users about the successful outcome of an action or event. showError : a convenience method to trigger a notification to display an error message on the board UI. Warns users about an unexpected error that caused the action or event to partially or completely fail. show : a method that triggers a notification to display either an informative, or an error message on the board UI. viewport Viewport viewport is the namespace that groups methods that apps can use to interact with the viewport : get the current viewport. set a new viewport. zoomTo an item on the board, and focus the viewport on the specified object. storage Storage The storage namespace provides methods and components for storing, retrieving, and working with app data. Through miro.board.storage , apps can access methods to manage collections - saving, reading, and removing data. collection() : Gets a collection object for a specific collection name. Collections allow you to store key/value data, similar to tables in a database. To get a collection, call collection() with the collection name: const collection = miro.board.storage.collection(&#x27;my-collection&#x27;) . Collection.set() : Saves a value to the collection for a given key. This lets you store data mapped to a key: await collection.set(&#x27;key&#x27;, &#x27;you-value&#x27;) . Collection.get() : Retrieves the value for a given key in the collection. This lets you fetch stored data: await collection.get(&#x27;key&#x27;) . Collection.remove() : Deletes the value for a given key in the collection. This lets you remove stored data: await collection.remove(&#x27;key&#x27;) . events RealtimeEvents events is the namespace that enables apps to subscribe to and unsubscribe from real-time events. This is currently an experimental feature available only in the experimental namespace. miro.board.experimental.events provides methods for apps to: Subscribe to real-time broadcasted events for this app. When subscribing, the app specifies a callback function to be invoked when an event is broadcast. Unsubscribe from real-time broadcasted events. This stops the app from receiving further events. Broadcast custom events to other clients and users that are using the same app. The app can broadcast events with a event name and data payload. Other subscribed clients will receive these event notifications through their callback functions. timer Timer The timer namespace provides control over the built-in Miro timer feature. This is available under miro.board.timer . start : starts the timer for a specified amount of milliseconds. get : gets the current state of the timer. stop : stops the timer. pause : pauses the timer. resume : resumes the timer. prolong : prolongs the timer by a specified amount of milliseconds. isStarted : checks if the timer has started or not. on : subscribes to different timer events. off : unsubscribes from previously subscribed timer events. Note: Timer is only available on paid plans, Starter and above. It can be checked via await miro.board.canUse(&#x27;timer&#x27;) . collaboration Collaboration Experimental The collaboration namespace provides methods and components to handle collaborative features on Miro boards, including: sessions , attention management , and remote viewport control . Sessions are the foundational component necessary for leveraging collaborative features. It is necessary to start a collaborative session (sessionStart) in order to manage features like attention management and remote viewport control. miro.board.collaboration provides methods and components that allow apps to create collaborative experiences across multiple users on the same board. This includes controlling the viewport, attention management capabilities such as zooming into user content, and more. startSession : starts a collaborative session. getSessions : retrieves existing sessions for the current app. zoomTo : zooms the specified user to one or more items on the board. on : subscribes to different collaborative events. off : unsubscribes from previously subscribed collaborative events. attention : provides access to methods related to managing attention. follow : initiates the process of following a specified online user(s), referred to as the followed user. unfollow : is used to stop a user(s) from following another user. isFollowing : checks whether the current user is already following another user on the board. getFollowedUser : if a user is following another user, the method returns the followed user details. experimental Experimental Experimental experimental is the namespace that groups and exposes experimental features . Through miro.board.experimental , apps can access functionality, properties, and methods that are in active development, and therefore subject to change without notice. ‚ö†Ô∏è Warning: The features exposed through miro.board.experimental are suitable for testing purposes. Don&#x27;t deploy these features to a production environment . Methods bringInFrontOf (items: OneOrMany&lt;BaseItem&gt;, target: BaseItem) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 In a stack of items, this method sends an item or array of items in front of another item (target). When the items are moved to the front, the items can partially or completely hide underlying items in the same stack. ‚ÑπÔ∏è Note: As this method implements relative positioning, you can use this method to place items in front or behind other items. If you want to send an item all the way to the front, you can use the method bringToFront() , which places the item at the top of the stack. Frame items don&#x27;t support the bringInFrontOf() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Bring the first sticky note in front of second. await miro.board.bringInFrontOf(first, second); // OR bring the list of several items in front of third. await miro.board.bringInFrontOf([first, second], third); bringToFront (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 In a stack of items, it brings an item or an array of items to the front so that they are at the top of the stack. When they are at the front, items are fully visible; they can partially or completely hide underlying items in the same stack. ‚ÑπÔ∏è Note: Frame items don&#x27;t support the bringToFront() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Bring the first sticky note to the front of the board. await miro.board.bringToFront(first); // Or: bring the second and third sticky notes to the front of the board. await miro.board.bringToFront([second, third]); canUse (feature: BoardFeature) =&gt; Promise&lt;boolean&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 The method canUse() checks whether the current user in Miro board is entitled to use some of the restricted Miro features. You need to pass the feature name as argument to check, the currently supported features are: timer voting Returns: Promise&lt;boolean&gt; - whether the current user running the app is entitled to use the enquired Miro feature. Example: TypeScript const canUseVoting = await miro.board.canUse(&#x27;voting&#x27;); const canUseTimer = await miro.board.canUse(&#x27;timer&#x27;); if (canUseVoting) { console.log(&#x27;User has access to voting&#x27;); } if (canUseTimer) { console.log(&#x27;User has access to timer&#x27;); } createAppCard (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string description ?: string fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; owned ?: readonly DeepPartial&lt;boolean&gt; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number status ?: DeepPartial&lt;AppCardStatus&gt; style ?: DeepPartial&lt;CardStyle&gt; tagIds ?: Array&lt;string&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;app_card&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; AppCard &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates an app card on a board. There are no required properties that you need to pass upon creation. If you create a card without passing any properties, the card is empty. You can update the default values at a later time. ‚ÑπÔ∏è Note: To open the detail view of an app card from its compact view, the app must listen to the app_card:open event. A typical use case for app_card:open is to open a modal displaying content fetched from a specified URL. For more information, see app_card:open . Example: TypeScript const appCard = await miro.board.createAppCard({ title: &#x27;This is the title of the app card&#x27;, description: &#x27;The custom preview fields are highlighted in different colors; the app card icon is displayed on the bottom-right.&#x27;, style: { cardTheme: &#x27;#2d9bf0&#x27;, }, fields: [ { value: &#x27;Owner&#x27;, iconUrl: &#x27;https://cdn-icons-png.flaticon.com/512/921/921124.png&#x27;, iconShape: &#x27;round&#x27;, fillColor: &#x27;#FBE983&#x27;, textColor: &#x27;#F83A22&#x27;, tooltip: &#x27;Caption text displayed in a tooltip when clicking or hovering over the preview field&#x27;, }, { value: &#x27;Timeline&#x27;, iconUrl: &#x27;https://cdn-icons-png.flaticon.com/512/3094/3094861.png&#x27;, iconShape: &#x27;square&#x27;, fillColor: &#x27;#F8D878&#x27;, textColor: &#x27;#503000&#x27;, tooltip: &#x27;Caption text displayed in a tooltip when clicking or hovering over the preview field&#x27;, }, { value: &#x27;Tasks&#x27;, iconUrl: &#x27;https://cdn-icons-png.flaticon.com/512/3176/3176366.png&#x27;, iconShape: &#x27;square&#x27;, fillColor: &#x27;#bef2f2&#x27;, textColor: &#x27;#0713FF&#x27;, tooltip: &#x27;Caption text displayed in a tooltip when clicking or hovering over the preview field&#x27;, }, { value: &#x27;Bug fix&#x27;, iconUrl: &#x27;https://cdn-icons-png.flaticon.com/512/3867/3867669.png&#x27;, iconShape: &#x27;square&#x27;, fillColor: &#x27;#E5E5E5&#x27;, textColor: &#x27;#000000&#x27;, tooltip: &#x27;Caption text displayed in a tooltip when clicking or hovering over the preview field&#x27;, }, ], x: 2000, y: 2000, width: 320, rotation: 0.0, status: &#x27;connected&#x27;, // Default status of new app cards: &#x27;disconnected&#x27; }); // Listen to the &#x27;app_card:open&#x27; event miro.board.ui.on(&#x27;app_card:open&#x27;, (event) =&gt; { console.log(&#x27;Subscribed to app card open event&#x27;, event); const {appCard} = event; // Fetch a specific app card by specifying its ID const url = `https://my.app.example.com/modal.html?appCardId=${appCard.id}`; // Open the modal to display the content of the fetched app card miro.board.ui.openModal({ url, }); }); // Output the created item to the developer console console.log(appCard); App card item, compact view: Figure 1. Compact view of an app card. The custom preview fields are highlighted in different colors. The default app card icon is on the bottom right. The status icon is displayed when hovering the mouse over the top-right corner of the app card. AppCardProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string description : undefined | string fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : readonly undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; owned : readonly undefined | DeepPartial&lt;boolean&gt; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; rotation : undefined | number status : undefined | DeepPartial&lt;AppCardStatus&gt; style : undefined | DeepPartial&lt;CardStyle&gt; tagIds : undefined | Array&lt;string&gt; title : undefined | string title =&quot;type&quot;&gt;type: readonly undefined | &#x27;app_card&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createCard (props?: { assignee?: DeepPartial&lt;undefined | CardAssignee&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string description ?: string dueDate?: DeepPartial&lt;undefined | string&gt; fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number startDate?: DeepPartial&lt;undefined | string&gt; style ?: DeepPartial&lt;CardStyle&gt; tagIds ?: Array&lt;string&gt; taskStatus?: DeepPartial&lt;CardTaskStatus&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;card&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Card &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a card on a board. There are no required properties that you need to pass upon creation. If you create a card without passing any properties, the card is empty. You can update the default values at a later time. Example: TypeScript const card = await miro.board.createCard({ title: &#x27;Easy peasy lemon squeezy&#x27;, description: &#x27;&lt;p&gt;Go back in time and DO NOT clone a whole pack of T-Rexes.&lt;br&gt;They make for rather rowdy pets.&lt;br&gt;ü¶ñüëé&lt;/p&gt;&#x27;, dueDate: &#x27;2006-08-18&#x27;, assignee: { userId: &#x27;3074457362577955221&#x27;, }, taskStatus: &#x27;to-do&#x27;, style: { cardTheme: &#x27;#2d9bf0&#x27;, // Default color: light blue }, fields: [ { value: &#x27;Bug fix&#x27;, iconUrl: &#x27;https://cdn-icons-png.flaticon.com/512/3867/3867669.png&#x27;, iconShape: &#x27;round&#x27;, fillColor: &#x27;#E5E5E5&#x27;, textColor: &#x27;#000000&#x27;, tooltip: &#x27;Caption text displayed in a tooltip when clicking or hovering over the preview field&#x27;, }, ], x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board width: 320, rotation: 0.0, }); // Output the created item to the developer console console.log(card); Card item, compact view: Figure 1. Compact view of a card. You can view basic information. CardProps { assignee?: DeepPartial&lt;undefined | CardAssignee&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string description : undefined | string dueDate?: DeepPartial&lt;undefined | string&gt; fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : readonly undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; rotation : undefined | number startDate?: DeepPartial&lt;undefined | string&gt; style : undefined | DeepPartial&lt;CardStyle&gt; tagIds : undefined | Array&lt;string&gt; taskStatus: undefined | DeepPartial&lt;CardTaskStatus&gt; title : undefined | string title =&quot;type&quot;&gt;type: readonly undefined | &#x27;card&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createConnector (props: { captions?: DeepPartial&lt;undefined | Array&lt;ConnectorCaption&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string end?: DeepPartial&lt;undefined | Endpoint&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; shape?: DeepPartial&lt;ConnectorShape&gt; start?: DeepPartial&lt;undefined | Endpoint&gt; style ?: DeepPartial&lt;ConnectorStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;connector&#x27; width ?: readonly number }) =&gt; Promise&lt; Connector &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a connector item on a board. When creating connector lines programmatically, either with the Web SDK or the REST API, it&#x27;s not possible to create loose (both ends disconnected) or dangling (one end disconnected) connectors. To create a connector, you must specify at least: start and end points of the connector. The item IDs of the board items that the connector links. The location of the two terminal points that attach the connector to its start and end items. You can set the location of the terminal points in one of the following ways: Either specify the position.x and position.y coordinates of each point. Or specify the snapTo property for each point. You cannot specify both position coordinates and snapTo properties for the start and end points. Example: TypeScript // Create a shape to use as a start point for the connector. const start = await miro.board.createShape({ content: &#x27;start&#x27;, x: 4500, }); // Create a shape to use as an end point for the connector. const end = await miro.board.createShape({ content: &#x27;end&#x27;, x: 4800, }); // Create a connector. const connector = await miro.board.createConnector({ shape: &#x27;elbowed&#x27;, style: { startStrokeCap: &#x27;diamond&#x27;, endStrokeCap: &#x27;stealth&#x27;, strokeStyle: &#x27;dashed&#x27;, strokeColor: &#x27;#ff00ff&#x27;, // Magenta strokeWidth: 2, }, // Set the start point of the connector. start: { // Define the start board item for the connector by specifying the &#x27;start&#x27; item ID. item: start.id, // Set a point on the border of the &#x27;start&#x27; shape to mark the start point of the connector. position: { // Horizontal: right x: 1.0, // Vertical: middle y: 0.5, }, }, // Set the end point of the connector. end: { // Define the end board item for the connector by specifying the &#x27;end&#x27; item ID. item: end.id, // Set a snapTo of &#x27;end&#x27; shape to mark the end point of the connector. snapTo: &#x27;right&#x27;, }, captions: [ { content: &#x27;This connector links a start and an end shape.&#x27;, position: 0.5, textAlignVertical: &#x27;bottom&#x27;, }, ], }); console.log(connector); Connector example: Figure 1. The connector joins the start and end shapes. It starts from the point defined in start.position , and it ends at the point defined in end.snapTo . ConnectorProps { captions?: DeepPartial&lt;undefined | Array&lt;ConnectorCaption&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string end?: DeepPartial&lt;undefined | Endpoint&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : readonly undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; shape: undefined | DeepPartial&lt;ConnectorShape&gt; start?: DeepPartial&lt;undefined | Endpoint&gt; style : undefined | DeepPartial&lt;ConnectorStyle&gt; title =&quot;type&quot;&gt;type: readonly undefined | &#x27;connector&#x27; width : readonly undefined | number } createEmbed (props: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; mode?: DeepPartial&lt;EmbedMode&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; previewUrl?: string relativeTo ?: DeepPartial&lt;RelativeTo&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;embed&#x27; url?: readonly string width ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Embed &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 3 Creates an embed item on a board. To embed content from a supported provider in a board, specify: The URL pointing to the resource that you want to embed in a board. ( Optional ): x and y board coordinates where you want the content to be embedded. width and height of the embed area. A URL pointing to an image to use as a preview for the embed item. ‚ÑπÔ∏è Note: If you don&#x27;t explicitly set any dimensions, width and height are set based on the corresponding retrieved values for the resource. If width and height values aren&#x27;t available, the embed item is displayed on the board as a 500x500 dp gray square. Example: TypeScript const embed = await miro.board.createEmbed({ url: &#x27;https://youtu.be/HlVSNEiFCBk&#x27;, previewUrl: &#x27;https://miro.com/blog/wp-content/uploads/2020/10/organize-their-Miro-boards-for-trainings-and-workshops-FB.png&#x27;, mode: &#x27;modal&#x27;, width: 1280, height: 720, x: 1600, y: 1600, }); console.log(embed); Embed item example: Figure 1. Example of an embed item with a playable YouTube video and an assigned preview image. EmbedProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; mode: undefined | DeepPartial&lt;EmbedMode&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; previewUrl: undefined | string relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; title =&quot;type&quot;&gt;type: readonly undefined | &#x27;embed&#x27; url: readonly undefined | string width ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createFrame (props?: { childrenIds?: Array&lt;string&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; showContent?: DeepPartial&lt;boolean&gt; style ?: DeepPartial&lt;{ fillColor: string }&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;frame&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Frame &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a frame on a board. There are no required properties to pass upon creation. You can update the default values at a later time. Example: TypeScript const frame = await miro.board.createFrame({ title: &#x27;This frame ratio is 16:9&#x27;, style: { fillColor: &#x27;#ffffff&#x27;, // Default value: &#x27;transparent&#x27; (no fill color) }, x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board width: 800, height: 450, }); console.log(frame); Frame item: Figure 1. A frame parent item containing a sticky note as a child item. FrameProps { childrenIds: undefined | Array&lt;string&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; showContent: undefined | DeepPartial&lt;boolean&gt; style : undefined | DeepPartial&lt;{ fillColor: string }&gt; title : undefined | string title =&quot;type&quot;&gt;type: readonly undefined | &#x27;frame&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createImage (props: ImageProps ) =&gt; Promise&lt; Image &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 3 Inserts an image on a board. The only required property to pass upon creation is a valid url pointing to the image. Example: TypeScript const image = await miro.board.createImage({ title: &#x27;This is an image&#x27;, url: &#x27;https://miro.com/blog/wp-content/uploads/2023/10/Frame-12772209-1536x806.png&#x27;, x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board width: 800, // Set either &#x27;width&#x27;, or &#x27;height&#x27; rotation: 0.0, }); console.log(image); Image item: Figure 1. Image item. ImageProps { alt: DeepPartial&lt;undefined | string&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; rotation : undefined | number title : undefined | string title =&quot;type&quot;&gt;type: undefined | &#x27;image&#x27; url: string width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createPreview (props: PreviewProps ) =&gt; Promise&lt; Preview &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a preview on a board. The only required property to pass upon creation is a valid url . Example: TypeScript const preview = await miro.board.createPreview({ url: &#x27;https://miro.com/&#x27;, x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board width: 400, rotation: 0.0, }); console.log(preview); Preview item: Figure 1. Preview item. PreviewProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; title =&quot;type&quot;&gt;type: undefined | &#x27;preview&#x27; url: string width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createShape (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number shape?: DeepPartial&lt;ShapeType | &#x27;rectangle&#x27; | &#x27;circle&#x27; | &#x27;triangle&#x27; | &#x27;wedge_round_rectangle_callout&#x27; | &#x27;...&#x27;&gt; style ?: DeepPartial&lt;ShapeStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;shape&#x27; width ?: readonly number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Shape &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a geometric shape on a board. The only required property to pass upon creation is a valid shape . Example: TypeScript const shape = await miro.board.createShape({ content: &#x27;&lt;p&gt;This is a star shape.&lt;/p&gt;&#x27;, shape: &#x27;star&#x27;, style: { color: &#x27;#ff0000&#x27;, // Default text color: &#x27;#1a1a1a&#x27; (black) fillColor: &#x27;#ffff00&#x27;, // Default shape fill color: transparent (no fill) fontFamily: &#x27;arial&#x27;, // Default font type for the text fontSize: 14, // Default font size for the text, in dp textAlign: &#x27;center&#x27;, // Default horizontal alignment for the text textAlignVertical: &#x27;middle&#x27;, // Default vertical alignment for the text borderStyle: &#x27;normal&#x27;, // Default border line style borderOpacity: 1.0, // Default border color opacity: no opacity borderColor: &#x27;#ff7400&#x27;, // Default border color: &#x27;#ffffff` (white) borderWidth: 2, // Default border width fillOpacity: 1.0, // Default fill color opacity: no opacity }, x: 0, // Default value: center of the board y: 0, // Default value: center of the board width: 200, height: 200, }); console.log(shape); Shape item (star shape): Figure 1. Shape item example: a star shape. ShapeProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content: undefined | string createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; rotation : undefined | number shape: | undefined | DeepPartial&lt;ShapeType | &#x27;rectangle&#x27; | &#x27;circle&#x27; | &#x27;triangle&#x27; | &#x27;wedge_round_rectangle_callout&#x27; | &#x27;...&#x27;&gt; style : undefined | DeepPartial&lt;ShapeStyle&gt; title =&quot;type&quot;&gt;type: undefined | &#x27;shape&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createStickyNote (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; shape?: DeepPartial&lt;StickyNoteShape&gt; style ?: DeepPartial&lt;StickyNoteStyle&gt; tagIds ?: Array&lt;string&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;sticky_note&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; StickyNote &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a sticky note on a board. Sticky notes look like physical paper sticky notes . There are no required properties that you need to pass upon creation. If you create a sticky note without passing any properties, the sticky note content is empty. You can update the default values at a later time. Example: TypeScript const stickyNote = await miro.board.createStickyNote({ content: &#x27;&lt;p&gt;This is a sticky note. It looks just like the actual paper one.&lt;/p&gt;&#x27;, style: { fillColor: &#x27;light_yellow&#x27;, // Default value: light yellow textAlign: &#x27;center&#x27;, // Default alignment: center textAlignVertical: &#x27;middle&#x27;, // Default alignment: middle }, x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board shape: &#x27;square&#x27;, width: 200, // Set either &#x27;width&#x27;, or &#x27;height&#x27; }); console.log(stickyNote); Sticky note item: Figure 1. Sticky note item. StickyNoteProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content: undefined | string createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; shape: undefined | DeepPartial&lt;StickyNoteShape&gt; style : undefined | DeepPartial&lt;StickyNoteStyle&gt; tagIds : undefined | Array&lt;string&gt; title =&quot;type&quot;&gt;type: undefined | &#x27;sticky_note&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } createTag (props?: { color?: DeepPartial&lt;&#x27;red&#x27; | &#x27;magenta&#x27; | &#x27;violet&#x27; | &#x27;light_green&#x27; | &#x27;green&#x27; | &#x27;...&#x27;&gt; title =&quot;id&quot;&gt;id?: readonly string title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;tag&#x27; }) =&gt; Promise&lt; Tag &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a tag on a board . After creating a tag, you can attach it to the following items: Cards Sticky notes ‚ÑπÔ∏è Note: title is required. If no color is specified, it defaults to red . Card and sticky note items can have up to 8 tags . Boards can have up to 100 tags in total. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo or not todo, that is the question&#x27;, color: &#x27;yellow&#x27;, }); // Create a sticky note and attach the tag to it const stickyNote = await miro.board.createStickyNote({ content: &quot;sticky note with tag: &#x27;todo&#x27;&quot;, tagIds: [todo.id], }); console.log(stickyNote.tagIds); // =&gt; [&#x27;3074457345627244742&#x27;] Tag attached to a sticky note: Figure 1. A tag attached to a sticky note. TagProps { color: undefined | DeepPartial&lt;&#x27;red&#x27; | &#x27;magenta&#x27; | &#x27;violet&#x27; | &#x27;light_green&#x27; | &#x27;green&#x27; | &#x27;...&#x27;&gt; title =&quot;id&quot;&gt;id: undefined | string title : undefined | string title =&quot;type&quot;&gt;type: undefined | &#x27;tag&#x27; } createText (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number style ?: DeepPartial&lt;TextStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;text&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Text &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Creates a text item on a board. There are no required properties to pass upon creation. If you create a text item without passing any properties, content is an empty string. You can update the values at a later time. Example: TypeScript const text = await miro.board.createText({ content: &#x27;&lt;p&gt;This is a piece of text to remind me that I always finish what I ...&lt;/p&gt;&#x27;, style: { color: &#x27;#1a1a1a&#x27;, // Default value: &#x27;#1a1a1a&#x27; (black) fillColor: &#x27;transparent&#x27;, // Default value: transparent (no fill) fillOpacity: 1, // Default value: 1 (solid color) fontFamily: &#x27;arial&#x27;, // Default font type for the text fontSize: 14, // Default font size for the text textAlign: &#x27;left&#x27;, // Default horizontal alignment for the text }, x: 0, // Default value: horizontal center of the board y: 0, // Default value: vertical center of the board width: 300, rotation: 0.0, }); console.log(text); Text item: Figure 1. Text item. TextProps { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content: undefined | string createdAt : readonly undefined | string createdBy : readonly undefined | string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height : readonly undefined | number title =&quot;id&quot;&gt;id: readonly undefined | string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt : readonly undefined | string modifiedBy : readonly undefined | string origin : undefined | &#x27;center&#x27; parentId : readonly undefined | DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo : undefined | DeepPartial&lt;RelativeTo&gt; rotation : undefined | number style : undefined | DeepPartial&lt;TextStyle&gt; title =&quot;type&quot;&gt;type: readonly undefined | &#x27;text&#x27; width : undefined | number title =&quot;x&quot;&gt;x: undefined | number title =&quot;y&quot;&gt;y: undefined | number } deselect (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:write Deselects one or more items from the board and returns the list of deselected items. If you don&#x27;t pass any arguments, the method deselects all items and returns them. Optionally, you can deselect items by id , type , and tags : Deselect by id : pass an item id to deselect the corresponding item. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to deselect items with one of the specified IDs. Deselect by type : pass an item type to deselect items matching the requested type. Pass an array of types to deselect items matching one of the specified types. If you pass type group , all the elements within the groups will be deselected. Deselect by tags : pass one or more tags to deselect items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to deselect items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Select all await miro.board.select(); // Deselect the sticky note by passing its ID await miro.board.deselect({ id: stickyNote.id, }); // Deselect all items with &#x27;card&#x27; OR &#x27;sticky_note&#x27; type await miro.board.deselect({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Deselect all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with &#x27;todo&#x27; OR &#x27;urgent&#x27; tags await miro.board.deselect({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); // Deselect all grouped items in the board await miro.board.deselect({ type: &#x27;group&#x27;, }); findEmptySpace (dimensions: Rect &amp; { offset?: number }) =&gt; Promise&lt;Rect&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Use the findEmptySpace method to identify an area on the board that doesn&#x27;t overlap with existing board items. Parameters x and y : define the starting central point to begin the search for an empty space. width and height : specify the desired size of the empty space. offset (optional): sets a distance between the empty space and nearby board items. If not provided, the method finds the closest available space. Default value: 100 Returns An object containing x and y coordinates for the center point of the identified empty space, along with the specified width and height . Example: TypeScript const position = await miro.board.findEmptySpace({ x: 0, y: 0, width: 200, height: 200, }); const sticky = await miro.board.createStickyNote({ content: &quot;No overlap&quot;, x: position.x, y: position.y, width: position.width, }); await miro.board.viewport.zoomTo(sticky) get (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 3 Fetches one or more items , tags or groups from the board. If you don&#x27;t pass any arguments, the method returns an array with all the items, groups and tags on the board. Optionally, you can filter items by id , type , and tags : Filter by id : pass an item or a tag id to fetch the corresponding item or tag. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to fetch an array with all the items or tags matching one of the specified IDs. Filter by type : pass an item type to fetch an array with the items matching the requested type. Pass an array of types to fetch an array with the items matching one of the specified types. Filter by tags : pass one or more tags to fetch all the items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to fetch an array with the items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Get the sticky note by passing its ID await miro.board.get({ id: stickyNote.id, }); // Get all items with type: &#x27;card&#x27; OR &#x27;sticky_note&#x27; await miro.board.get({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Get all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with tags: &#x27;todo&#x27; OR &#x27;urgent&#x27; await miro.board.get({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); GetFilter { title =&quot;id&quot;&gt;id: Array&lt;string&gt; | string } | { tags?: Array&lt;string&gt; | string; title =&quot;type&quot;&gt;type?: Array&lt;string&gt; | string } getAppData (key?: K_1) =&gt; Promise&lt;conditional&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Fetches app metadata, stored per board, for the specified metadata key. The response contains the metadata value assigned to the requested key. To fetch all the metadata for an app, invoke the method without passing any arguments. The response contains all the metadata associated with the app as key/value pairs. An app can access only the metadata that it sets. It cannot access metadata set by other apps. ‚ÑπÔ∏è Note: To access app metadata , apps require the boards:read permission. To store app metadata to the board, apps require the boards:write permission. getAppData returns a new object, not a reference to the object that was previously set with setAppData . If the specified key isn&#x27;t found, the method returns undefined . ‚ö†Ô∏è Warning: Total AppData storage limit: 30 KB per app. Example: TypeScript // Set app metadata to a board. await miro.board.setAppData(&#x27;activeTags&#x27;, [&#x27;v1&#x27;, &#x27;v2&#x27;, &#x27;v3&#x27;]); // Get the specific &#x27;activeTags&#x27; app metadata from the board. const activeTags = await miro.board.getAppData(&#x27;activeTags&#x27;); console.log(activeTags); // =&gt; [&#x27;v1&#x27;, &#x27;v2&#x27;, &#x27;v3&#x27;] getById ( title =&quot;id&quot;&gt;id: string) =&gt; Promise&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Fetches an item , if it exists on the board, based on the item ID that you pass with the method. If the requested item ID doesn&#x27;t exist‚Äîfor example, because the item has been deleted from the board‚Äîthe method throws an error: Shell Can not retrieve item with id 3458764518726781234 Example: TypeScript // Create a sticky note const stickyNote = await miro.board.createStickyNote({ content: &#x27;This is a sticky note&#x27;, }); // Get the sticky note by passing its ID await miro.board.getById(stickyNote.id); getIdToken () =&gt; Promise&lt;string&gt; üö¶ Rate limit: Level 1 Retrieves a JSON Web Token (JWT) , an encoded form of JSON data, signed with the app client secret. The JWT that the Web SDK method returns isn&#x27;t the same type of token as the app access token for the REST API. Pass the JWT that getIdToken returns as a bearer token to establish communication between the frontend and the backend of a Miro app built on top of the Miro Web SDK. The token authenticates the app frontend with the app backend. The frontend runs on the board; the backend runs on the server that hosts the app to make it available. Figure 1. The Web SDK token authenticates app instances running in the frontend with the app backend running on a server. Example of the decoded JWT structure: Shell # JWT header { &quot;typ&quot;: &quot;JWT&quot;, # Token type : JWT &quot;alg&quot;: &quot;HS256&quot; # Encoding algorithm: HS256 } # JWT payload { &quot;sub&quot;: &quot;3458764521234567890&quot;, # Subject: the Client ID of the app that the JWT is issued for &quot;iss&quot;: &quot;miro&quot;, # Issuer: the JWT issuer is Miro &quot;team&quot;: &quot;3074457350123456789&quot;, # ID of the Miro team that the JWT is assigned to &quot;exp&quot;: 1650619757, # Expiry date of the JWT in Unix epoch time: 1 hour after &#x27;iat&#x27; &quot;user&quot;: &quot;3074457359876543210&quot;, # ID of the Miro user that the JWT is assigned to &quot;iat&quot;: 1650616157 # Issue date of the JWT in Unix epoch time } # JWT signature Signature: RqwL4X4iopF2GH0erQ3cTY_9QWasd5zxUIOPzKLfghj To authenticate requests from the frontend to the backend of your Miro app: Pass a valid JWT with each request. In the request, include the JWT in the Authorization HTTP header as a Bearer token. Example: TypeScript // Get the JWT signed with your app client secret. const token = await miro.board.getIdToken(); // Pass the JWT with each request from your app to your backend services. const response = await fetch(&#x27;/your-app-server-endpoint&#x27;, { method: &#x27;POST&#x27;, headers: { &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Authorization&#x27;: `Bearer ${token}`, }; body: JSON.stringify(data); // Request body with data payload }); See also: RFC 7519, JSON Web Token (JWT) Unix epoch time converter Miro JWT authorisation app example getInfo () =&gt; Promise&lt;BoardInfo&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Fetches basic metadata about the current board: id : unique board ID. createdAt : the date and time when the board was created. updatedAt : the date and time when the board was last modified. locale : the current user&#x27;s locale. The method takes no arguments. Example: TypeScript const boardInfo = await miro.board.getInfo(); console.log(boardInfo); // =&gt; {id: &quot;o9J_g9mOJpo=&quot;,createdAt: &quot;2021-06-22T12:33:36.765Z&quot;,updatedAt: &quot;2021-08-04T12:57:19.083Z&quot;, locale: &quot;en&quot;} getLayerIndex (item: BaseItem) =&gt; Promise&lt;number&gt; üîí Requires scope: boards:read The getLayerIndex() method returns the position of an item in the item stack. Items in a stack are layered on top of each other based on their layer index value. An item with a higher layer index appears above items with lower layer index values. Each item on the board has a layer index position in the stack. The higher the layer index value, the &quot;closer&quot; to the user the item appears. For example, with three items on the board - first , second , and third - their initial layer index values might be: first[0] , second[1] , third[2] . The item with layerIndex === 2 ( third ) will be fully visible at the top of the stack. The item with layerIndex === 1 ( second ) may be partially hidden by the item above it. And the item with layerIndex === 0 ( first ) may be fully hidden by the items above it. Returns: Promise&lt;number&gt; - calling getLayerIndex() allows you get the position of a specific item in this stack. ‚ÑπÔ∏è Note: Stack is zero indexed. Frame items don&#x27;t support the getLayerIndex() method. Since they act as parents that can contain other items, they are always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes, // sticky notes will be created on top of each other in creation order, layer index will be equal to creation index const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); await miro.board.getLayerIndex(third); // returns 2 getMetadata (item: BaseItem, key?: K) =&gt; Promise&lt;conditional&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Fetches board item metadata, stored per app, for the specified metadata key. The response contains the metadata value assigned to the requested key. To fetch all the metadata for a board item, invoke the method without passing any arguments. The response contains all the metadata associated with the board item as key/value pairs. An app can access only the metadata that it sets. It cannot access metadata set by other apps. getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups ‚ÑπÔ∏è Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. getMetadata returns a new object, not a reference to the object that was previously set with setMetadata . If the specified key isn&#x27;t found, the method returns undefined . ‚ö†Ô∏è Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to retrieve metadata from. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;leaderboard&#x27;, [&#x27;Ziltoid&#x27;, &#x27;Howard&#x27;, &#x27;Paul&#x27;]); // Get the specific &#x27;leaderboard&#x27; metadata from the card item. const leaderboard = await geoCard.getMetadata(&#x27;leaderboard&#x27;); // Get all the metadata from the card item by passing no arguments. await geoCard.getMetadata(); getOnlineUsers () =&gt; Promise&lt;Array&lt; OnlineUserInfo &gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Fetches basic information about the board users that are currently online: id : unique user ID. name : the name of the user. The method takes no arguments. Example: TypeScript const onlineUsers = await miro.board.getOnlineUsers(); console.log(onlineUsers); // =&gt; [{&quot;id&quot;: &quot;3458714513325546974&quot;, &quot;name&quot;: &quot;John Smith&quot;}] OnlineUserInfo { title =&quot;id&quot;&gt;id: string; name: string } getSelection () =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; üö¶ Rate limit: Level 3 üîí Requires scope: boards:read Fetches the selected items from the board, and it returns them in an array. If no items are selected on the board, the method returns an empty array. If the grouped items are selected, the group entity for those items will also be returned. When individual items within a group are selected with a double-click, the group entity will not be returned as part of this method. Example: TypeScript // Get an array with the selected item(s) and their properties const selection = await miro.board.getSelection(); console.log(selection); getUserInfo () =&gt; Promise&lt; UserInfo &gt; üîí Requires scope: identity:read üö¶ Rate limit: Level 1 Fetches basic metadata about the currently active user: id : unique user ID. name : the name of the user. email : the email of the user. The method takes no arguments. Example: TypeScript const userInfo = await miro.board.getUserInfo(); console.log(userInfo); // =&gt; {&quot;id&quot;: &quot;3658432978520043388&quot;, &quot;name&quot;: &quot;John Smith&quot;, &quot;email&quot;: &quot; [email&#160;protected] &quot;} UserInfo { title =&quot;id&quot;&gt;id: string; name: string } goToLink (item: BaseItem) =&gt; Promise&lt;boolean&gt; üîí Requires scope: boards:read goToLink navigates to the provided link associated with the item on a board. For links that point to another item on the same board, the viewport will automatically move to that item when true is returned. For links that point to an item on a separate board or an external url, a new tab tab will be opened. Returns: Promise &lt; boolean &gt; true : Link is successfully associated with the item, navigation is triggered, and the linkedTo property contains a valid value. false : Link is not successfully associated to the item due to an invalid or missing linkedTo property, and no navigation is triggered. Example: TypeScript const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Link item to some url geoCard.linkedTo = &#x27;https://google.com&#x27;; // Update widget props and apply changes await geoCard.sync(); // Navigate to https://google.com (value of `linkedTo` property) await geoCard.goToLink(); group (props: CreateGroupProps) =&gt; Promise&lt; Group &gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Groups the given items in the board, including unsupported items. ‚ÑπÔ∏è Note: Previously grouped items cannot be grouped again, this will cause an error. You can use the groupId property in the item to check whether it&#x27;s already assigned to a group. Groups can only be created with at least two items. Locked elements cannot be grouped. Mindmaps and tags are not supported in groups. Groups do not support metadata as other board items. If a group is added to a frame, all the grouped items will also be attached to that frame. The group must fit within the frame dimensions to be added. Example of adding grouped items to a frame: TypeScript const shape = await miro.board.createShape() const card = await miro.board.createCard() const text = await miro.board.createText() const boardItems = [shape, card, text] const group = await miro.board.group({ items: boardItems }) const frame = await miro.board.createFrame(); // shape, card and text will also be added to the frame // you can check their parentId property after this operation await frame.add(group) remove (item: BaseItem) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Removes a board item or a tag from the board. When removing board items or tags, any associated metadata is removed as well. ‚ÑπÔ∏è Note: To use the remove() method, apps need the boards:write permission. board.remove() removes board items, groups, and tags from the board. It doesn&#x27;t remove parent-child relationships between items. To remove a parent-child relationship between items, use remove() at the parent item level. For example: frame.remove() . When removing groups , the group itself and all the items are removed from the board. remove is common to all board items. select (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Selects one or more items from the board and returns the list of selected items. If you don&#x27;t pass any arguments, the method selects all items and returns them. Optionally, you can select items by id , type , and tags : Select by id : pass an item id to select the corresponding item. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to select items with one of the specified IDs. Select by type : pass an item type to select items matching the requested type. Pass an array of types to select items matching one of the specified types. If you pass type group , all the elements within the groups will be deselected. Select by tags : pass one or more tags to select items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to select items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Select the sticky note by passing its ID await miro.board.select({ id: stickyNote.id, }); // Select all items with &#x27;card&#x27; OR &#x27;sticky_note&#x27; type await miro.board.select({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Select all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with &#x27;todo&#x27; OR &#x27;urgent&#x27; tags await miro.board.select({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); // Select all grouped items in the board await miro.board.select({ type: &#x27;group&#x27;, }); sendBehindOf (items: OneOrMany&lt;BaseItem&gt;, target: BaseItem) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 In a stack of items, this method sends an item or array of items behind another item (target). When the items are moved to the back, the items can be partially or completely hidden by the overlying items in the top of the same stack. ‚ÑπÔ∏è Note: As this method implements relative positioning, you can use this method to place items in front or behind other items. If you want to send an item all the way to the back, you can use the method sendToBack() , which places the item at the bottom of the stack. Frame items don&#x27;t support the sendBehindOf() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Send the third sticky note behind the second one await miro.board.sendBehindOf(third, second); // OR send the list of items behind the first one await miro.board.sendBehindOf([third, second], first); sendToBack (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 In a stack of items, it sends an item or an array of items to the back so that they are at the bottom of the stack. When they are at the back, items are partially or completely hidden by overlying items in the same stack. ‚ÑπÔ∏è Note: Frame items don&#x27;t support the sendToBack() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Send the first sticky note to the back of the board await miro.board.sendToBack(first); // Or: send the second and third sticky notes to the back of the board await miro.board.sendToBack([second, third]); setAppData (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;D_1&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Adds app metadata to make it available on the board that the app runs on. An app can access only the metadata that it sets. It cannot access metadata set by other apps. For each board, app metadata is stored per app, and it&#x27;s available to all the users who can: Access and view the board that the app is running on, AND Run the app on the board. AppData is a key/value pair object. It can contain values with the following data types: string number boolean Object Array null undefined To overwrite an existing key inside AppData : Pass the same key multiple times with different values. Only the last/most recent value is stored with the key. To remove a key from AppData : Set the value of the existing key to either null , or undefined . This clears the key. If you call getAppData(key) to retrieve a key that has been set to null or undefined , the method returns undefined . ‚ÑπÔ∏è Note: To access app metadata , apps require the boards:read permission. To store app metadata to the board, apps require the boards:write permission. App metadata doesn&#x27;t expire. You can assign an empty array ( [] ) to a key. It&#x27;s returned as an empty array. You can assign an empty string ( &#x27;&#x27; ) to a key. It&#x27;s returned as an empty string. ‚ö†Ô∏è Warning: Total AppData storage limit: 30 KB per app. Example: TypeScript // Set app metadata for an imaginary character, and store it for the app at board level. await miro.board.setAppData(&#x27;characterCard&#x27;, { name: &#x27;null&#x27;, age: 1, good: false, alias: [&#x27;xenomorph&#x27;, &#x27;bug&#x27;, &#x27;crab&#x27;, &#x27;facehugger&#x27;, &#x27;alien&#x27;], abilities: [ { name: &#x27;Acid blood&#x27;, description: &#x27;Can melt through metal.&#x27;, }, { name: &#x27;Regeneration&#x27;, description: &#x27;Can regenerate from a single cell.&#x27;, }, { name: &#x27;Strength&#x27;, description: &#x27;Can lift 20 times its own weight.&#x27;, }, ], }); // Get the app metadata about the imaginary character from the board const characterCard = await miro.board.getAppData(&#x27;characterCard&#x27;); // Get all the app metadata from the board. const allMetaData = await await miro.board.getAppData(); // Clear the metadata about the imaginary character in one of the following ways: // 1. Assign &#x27;characterCard&#x27; an empty object. await miro.board.setAppData(&#x27;characterCard&#x27;, {}); // 2. Set &#x27;characterCard&#x27; to &#x27;undefined&#x27;. await miro.board.setAppData(&#x27;characterCard&#x27;, undefined); // 3. Set &#x27;characterCard&#x27; to &#x27;null&#x27;. await miro.board.setAppData(&#x27;characterCard&#x27;, null); setMetadata (item: BaseItem, key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;D&gt; üîí Requires scope: boards:write Adds board item metadata to make it available on the board that the app runs on. An app can access only the board item metadata that it sets. It cannot access metadata set by other apps. Board item metadata is stored in the item it refers to. Therefore: When duplicating an item, the metadata is copied to the new item. When deleting an item, the corresponding metadata is removed with the deleted item. Board item metadata is synced across, and available to, all the users who can: Access and view the board that the app is running on, AND Run the app on the board. ItemMetadata is a key/value-pair object. It can contain values with the following data types: string number boolean Object Array null undefined getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups To overwrite an existing key inside ItemMetadata : Pass the same key multiple times with different values. Only the last/most recent value is stored with the key. To remove a key from ItemMetadata : Set the value of the existing key to either null , or undefined . This clears the key. If you call getMetadata(key) to retrieve a key that has been set to null or undefined , the method returns undefined . ‚ÑπÔ∏è Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. You can assign an empty array ( [] ) to a key. It&#x27;s returned as an empty array. You can assign an empty string ( &#x27;&#x27; ) to a key. It&#x27;s returned as an empty string. ‚ö†Ô∏è Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to set metadata to. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;geoData&#x27;, { name: &#x27;null&#x27;, coordinates: { latitude: &#x27;33.950278&#x27;, longitude: &#x27;-105.314167&#x27;, }, lastFound: &#x27;1947-07-08&#x27;, content: true, difficulty: 5, keywords: [&#x27;x-files&#x27;, &#x27;truth-is-out-there&#x27;, &#x27;area-51&#x27;, &#x27;roswell&#x27;, &#x27;aliens&#x27;], geoCache: [ { name: &#x27;UFO&#x27;, description: &#x27;Severely damaged unidentified flying object. &#x27;, }, { name: &#x27;Alien&#x27;, description: &#x27;Remains of an alien life form.&#x27;, }, { name: &#x27;Artifacts&#x27;, description: &#x27;Tools, equipment, and other items found at the crash site.&#x27;, }, { name: &#x27;Edibles&#x27;, description: &#x27;The alien was likely as high as a kite when they crashed. Typical.&#x27;, }, ], }); // Get the specific &#x27;geoData&#x27; metadata from the card item. // The response contains the metadata value assigned to the key. const geoCardGeoData = await geoCard.getMetadata(&#x27;geoData&#x27;); // Get all the metadata from the card item. // The response contains all the metadata assigned to the board item as key/value pairs. const geoCardAllMetaData = await geoCard.getMetadata(); // Clear the metadata about the imaginary geocaching game in one of the following ways: // 1. Assign &#x27;geoData&#x27; an empty object. await miro.board.setMetadata(&#x27;geoData&#x27;, {}); // 2. Set &#x27;geoData&#x27; to &#x27;undefined&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, undefined); // 3. Set &#x27;geoData&#x27; to &#x27;null&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, null); sync (item: BaseItem) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write sync propagates to the board any changes to item and tag properties. After updating the properties of an item or a tag, sync it with the board to: Propagate to the board the changes applied to the item or to the tag. Make the changes visible on the board. All board items and tags require sync to make any changes to their properties visible on the board. For more information and examples, see Update and sync item properties . Example: (The code example updates a text item using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create an item. // In this case, a text item. const text = await miro.board.createText({ content: &#x27;&lt;p&gt;This is a piece of text to remind me that I always finish what I ...&lt;/p&gt;&#x27;, style: { fillColor: &#x27;transparent&#x27;, textAlign: &#x27;left&#x27;, }, x: 0, y: 0, width: 450, rotation: 0.0, }); // Update the board item by modifying the values of its properties. // In the text item case, the updated properties modify content, background color, and rotation of the item. text.content = &#x27;A fourteneer is &quot;A line that rumbles on like this for being a bit too long.&quot;&#x27;; text.style.fillColor = &#x27;#a9fe65&#x27;; text.rotation = 180.0; // Call &#x27;sync&#x27; to make the changed board item properties visible on the board. await text.sync(); // Output the updated board item to the developer console. console.log(text); Example: (The code example updates a tag using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create a tag. const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create a sticky note and attach the tag to it. const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tag: &quot;todo&quot;&#x27;, tagIds: [todo.id], }); console.log(stickyNote.tagIds); // =&gt; [&#x27;3074457345627244742&#x27;] // Update the tag properties: title and color. todo.title = &quot;won&#x27;t fix&quot;; todo.color = &#x27;green&#x27;; // Call &#x27;sync&#x27; to make the changed tag properties visible on the board. await todo.sync(); // Output the updated tag to the developer console. console.log(todo); All properties Property Type bringInFrontOf (items: OneOrMany&lt;BaseItem&gt;, target: BaseItem) =&gt; Promise&lt;void&gt; bringToFront (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; canUse (feature: BoardFeature) =&gt; Promise&lt;boolean&gt; collaboration Collaboration createAppCard (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string description ?: string fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; owned ?: readonly DeepPartial&lt;boolean&gt; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number status ?: DeepPartial&lt;AppCardStatus&gt; style ?: DeepPartial&lt;CardStyle&gt; tagIds ?: Array&lt;string&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;app_card&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; AppCard &gt; createCard (props?: { assignee?: DeepPartial&lt;undefined | CardAssignee&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string description ?: string dueDate?: DeepPartial&lt;undefined | string&gt; fields ?: DeepPartial&lt;undefined | Array&lt;CardField&gt;&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number startDate?: DeepPartial&lt;undefined | string&gt; style ?: DeepPartial&lt;CardStyle&gt; tagIds ?: Array&lt;string&gt; taskStatus?: DeepPartial&lt;CardTaskStatus&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;card&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Card &gt; createConnector (props: { captions?: DeepPartial&lt;undefined | Array&lt;ConnectorCaption&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string end?: DeepPartial&lt;undefined | Endpoint&gt; groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; shape?: DeepPartial&lt;ConnectorShape&gt; start?: DeepPartial&lt;undefined | Endpoint&gt; style ?: DeepPartial&lt;ConnectorStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;connector&#x27; width ?: readonly number }) =&gt; Promise&lt; Connector &gt; createEmbed (props: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; mode?: DeepPartial&lt;EmbedMode&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; previewUrl?: string relativeTo ?: DeepPartial&lt;RelativeTo&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;embed&#x27; url?: readonly string width ?: readonly DeepPartial&lt;undefined | number&gt; title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Embed &gt; createFrame (props?: { childrenIds?: Array&lt;string&gt; connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; showContent?: DeepPartial&lt;boolean&gt; style ?: DeepPartial&lt;{ fillColor: string }&gt; title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;frame&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Frame &gt; createGroup (props: { title =&quot;id&quot;&gt;id?: readonly string itemsIds?: readonly Array&lt;string&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;group&#x27; }) =&gt; Promise&lt; Group &gt; createImage (props: ImageProps ) =&gt; Promise&lt; Image &gt; createPreview (props: PreviewProps ) =&gt; Promise&lt; Preview &gt; createShape (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number shape?: DeepPartial&lt;ShapeType | &#x27;rectangle&#x27; | &#x27;circle&#x27; | &#x27;triangle&#x27; | &#x27;wedge_round_rectangle_callout&#x27; | &#x27;...&#x27;&gt; style ?: DeepPartial&lt;ShapeStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;shape&#x27; width ?: readonly number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Shape &gt; createStickyNote (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; shape?: DeepPartial&lt;StickyNoteShape&gt; style ?: DeepPartial&lt;StickyNoteStyle&gt; tagIds ?: Array&lt;string&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;sticky_note&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; StickyNote &gt; createTag (props?: { color?: DeepPartial&lt;&#x27;red&#x27; | &#x27;magenta&#x27; | &#x27;violet&#x27; | &#x27;light_green&#x27; | &#x27;green&#x27; | &#x27;...&#x27;&gt; title =&quot;id&quot;&gt;id?: readonly string title ?: string title =&quot;type&quot;&gt;type?: readonly &#x27;tag&#x27; }) =&gt; Promise&lt; Tag &gt; createText (props?: { connectorIds ?: readonly DeepPartial&lt;undefined | Array&lt;string&gt;&gt; content?: string createdAt ?: readonly string createdBy ?: readonly string groupId ?: readonly DeepPartial&lt;undefined | string&gt; height ?: readonly number title =&quot;id&quot;&gt;id?: readonly string linkedTo ?: DeepPartial&lt;undefined | string&gt; modifiedAt ?: readonly string modifiedBy ?: readonly string origin ?: &#x27;center&#x27; parentId ?: readonly DeepPartial&lt;&#x27;null&#x27; | string&gt; relativeTo ?: DeepPartial&lt;RelativeTo&gt; rotation ?: number style ?: DeepPartial&lt;TextStyle&gt; title =&quot;type&quot;&gt;type?: readonly &#x27;text&#x27; width ?: number title =&quot;x&quot;&gt;x?: number title =&quot;y&quot;&gt;y?: number }) =&gt; Promise&lt; Text &gt; deselect (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; events RealtimeEvents findEmptySpace (dimensions: Rect &amp; { offset?: number }) =&gt; Promise&lt;Rect&gt; get (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; getAppData (key?: K_1) =&gt; Promise&lt;conditional&gt; getById ( title =&quot;id&quot;&gt;id: string) =&gt; Promise&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt; getIdToken () =&gt; Promise&lt;string&gt; getInfo () =&gt; Promise&lt;BoardInfo&gt; getLayerIndex (item: BaseItem) =&gt; Promise&lt;number&gt; getMetadata (item: BaseItem, key?: K) =&gt; Promise&lt;conditional&gt; getOnlineUsers () =&gt; Promise&lt;Array&lt; OnlineUserInfo &gt;&gt; getSelection () =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; getUserInfo () =&gt; Promise&lt; UserInfo &gt; goToLink (item: BaseItem) =&gt; Promise&lt;boolean&gt; group (props: CreateGroupProps) =&gt; Promise&lt; Group &gt; notifications Notifications remove (item: BaseItem) =&gt; Promise&lt;void&gt; select (filter?: F) =&gt; Promise&lt;QueryReturn&lt; Connector | AppCard | Card | Embed | Image | &#x27;...&#x27;, F&gt;&gt; sendBehindOf (items: OneOrMany&lt;BaseItem&gt;, target: BaseItem) =&gt; Promise&lt;void&gt; sendToBack (items: OneOrMany&lt;BaseItem&gt;) =&gt; Promise&lt;void&gt; setAppData (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;D_1&gt; setMetadata (item: BaseItem, key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;D&gt; storage Storage sync (item: BaseItem) =&gt; Promise&lt;void&gt; timer Timer ui BoardUI viewport Viewport Updated about 1 year ago Table of Contents Properties ui notifications viewport storage events timer collaboration experimental Methods bringInFrontOf bringToFront canUse createAppCard createCard createConnector createEmbed createFrame createImage createPreview createShape createStickyNote createTag createText deselect findEmptySpace get getAppData getById getIdToken getInfo getLayerIndex getMetadata getOnlineUsers getSelection getUserInfo goToLink group remove select sendBehindOf sendToBack setAppData setMetadata sync All properties