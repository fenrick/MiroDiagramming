Experimental Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Experimental Experimental Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Experimental Experimental experimental is the namespace that groups and exposes experimental features . Through miro.board.experimental , apps can access functionality, properties, and methods that are in active development, and therefore subject to change without notice. ‚ö†Ô∏è Warning: The features exposed through miro.board.experimental are suitable for testing purposes. Don&#x27;t deploy these features to a production environment . Properties action readonly CustomActionManagement Experimental The action namespace groups a set of methods that enable apps to use custom actions. The action namespace is currently under the experimental namespace, and it exposes a single method: register() : miro.board.experimental.action.register You use this method to register a custom action with an app. The method takes a single argument: an object that defines the custom action. Methods get(...) (filter?: GetFilter ) =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 3 Fetches one or more items , tags or groups from the board. If you don&#x27;t pass any arguments, the method returns an array with all the items, groups and tags on the board. Optionally, you can filter items by id , type , and tags : Filter by id : pass an item or a tag id to fetch the corresponding item or tag. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to fetch an array with all the items or tags matching one of the specified IDs. Filter by type : pass an item type to fetch an array with the items matching the requested type. Pass an array of types to fetch an array with the items matching one of the specified types. Filter by tags : pass one or more tags to fetch all the items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to fetch an array with the items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Get the sticky note by passing its ID await miro.board.get({ id: stickyNote.id, }); // Get all items with type: &#x27;card&#x27; OR &#x27;sticky_note&#x27; await miro.board.get({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Get all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with tags: &#x27;todo&#x27; OR &#x27;urgent&#x27; await miro.board.get({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); select(...) (filter?: GetFilter ) =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Selects one or more items from the board and returns the list of selected items. If you don&#x27;t pass any arguments, the method selects all items and returns them. Optionally, you can select items by id , type , and tags : Select by id : pass an item id to select the corresponding item. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to select items with one of the specified IDs. Select by type : pass an item type to select items matching the requested type. Pass an array of types to select items matching one of the specified types. If you pass type group , all the elements within the groups will be deselected. Select by tags : pass one or more tags to select items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to select items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Select the sticky note by passing its ID await miro.board.select({ id: stickyNote.id, }); // Select all items with &#x27;card&#x27; OR &#x27;sticky_note&#x27; type await miro.board.select({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Select all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with &#x27;todo&#x27; OR &#x27;urgent&#x27; tags await miro.board.select({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); // Select all grouped items in the board await miro.board.select({ type: &#x27;group&#x27;, }); deselect(...) (filter?: GetFilter ) =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Deselects one or more items from the board and returns the list of deselected items. If you don&#x27;t pass any arguments, the method deselects all items and returns them. Optionally, you can deselect items by id , type , and tags : Deselect by id : pass an item id to deselect the corresponding item. If the ID doesn&#x27;t exist on the board, the method throws an error. Pass an array of IDs to deselect items with one of the specified IDs. Deselect by type : pass an item type to deselect items matching the requested type. Pass an array of types to deselect items matching one of the specified types. If you pass type group , all the elements within the groups will be deselected. Deselect by tags : pass one or more tags to deselect items with the specified tags. If the tags don&#x27;t exist on the board, the method returns an empty array. Pass an array of tags to deselect items matching one of the specified tags. ‚ÑπÔ∏è Note: The method cannot return child items inside unsupported parent items, such as User Story Mapping (USM) and Kanban. If you filter by passing an array of item IDs, item types, or tags, the logical operator between the array members is OR . The method doesn&#x27;t have an upper limit as to the maximum amount of items that it can return. To avoid performance degradation on the board UI, we recommend to not exceed 10000 items per board. Example: TypeScript // Create a tag const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create another tag const urgent = await miro.board.createTag({ title: &#x27;urgent&#x27;, color: &#x27;magenta&#x27;, }); // Create a card and attach the tags to it const card = await miro.board.createCard({ title: &#x27;card with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Create a sticky note and attach the tags to it const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tags: &quot;todo&quot;, &quot;urgent&quot;&#x27;, tagIds: [todo.id, urgent.id], }); // Select all await miro.board.select(); // Deselect the sticky note by passing its ID await miro.board.deselect({ id: stickyNote.id, }); // Deselect all items with &#x27;card&#x27; OR &#x27;sticky_note&#x27; type await miro.board.deselect({ type: [&#x27;card&#x27;, &#x27;sticky_note&#x27;], }); // Deselect all &#x27;card&#x27; OR &#x27;sticky_note&#x27; items with &#x27;todo&#x27; OR &#x27;urgent&#x27; tags await miro.board.deselect({ type: [&#x27;sticky_note&#x27;, &#x27;card&#x27;], tags: [&#x27;todo&#x27;, &#x27;urgent&#x27;], }); // Deselect all grouped items in the board await miro.board.deselect({ type: &#x27;group&#x27;, }); getSelection(...) () =&gt; Promise&lt;Array&lt; Unsupported | Connector | AppCard | Card | Embed | &#x27;...&#x27;&gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 3 Fetches the selected items from the board, and it returns them in an array. If no items are selected on the board, the method returns an empty array. If the grouped items are selected, the group entity for those items will also be returned. When individual items within a group are selected with a double-click, the group entity will not be returned as part of this method. Example: TypeScript // Get an array with the selected item(s) and their properties const selection = await miro.board.getSelection(); console.log(selection); getVotingResults(...) () =&gt; Promise&lt;Array&lt;VotingResult&gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 This method retrieves the results of voting sessions conducted on a specific board. The method does not accept any arguments. The results of a voting session include: createdBy : The username and user ID of the user who initiated the voting session. createdAt : The start date and time of the voting session in UTC, formatted according to ISO 8601 with a trailing Z offset. For example, 2021-05-18T07:59:01Z . title : The title of the voting session. results : An array of objects containing: itemId : The ID of the item that was voted on. count : The total number of votes the item received. üìò Note All timestamps are in UTC , regardless of the app&#x27;s local machine or execution environment settings. This method is available only on paid plans with access to the voting feature . If the app is installed on a team without access to voting, the method will return an error. Ensure the app is installed for a team on a paid plan. Verify that the voting plugin is installed for the team. Example: TypeScript // Retrieve voting session results. const votingResults = await miro.board.experimental.getVotingResults(); console.log(votingResults); // Example output: // // [ // { // &quot;createdBy&quot;: { // &quot;userId&quot;: &quot;3458764112826546974&quot;, // &quot;userName&quot;: &quot;Ellen Ripley&quot; // }, // &quot;createdAt&quot;: &quot;2023-05-23T10:16:10.464Z&quot;, // &quot;title&quot;: &quot;Which option? Save the LV-426 site or nuke it from orbit?&quot;, // &quot;results&quot;: [ // { // &quot;itemId&quot;: &quot;3458764513811016840&quot;, // &quot;count&quot;: 2 // } // ] // } // ] sync(...) (item: BaseItem) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write sync propagates to the board any changes to item and tag properties. After updating the properties of an item or a tag, sync it with the board to: Propagate to the board the changes applied to the item or to the tag. Make the changes visible on the board. All board items and tags require sync to make any changes to their properties visible on the board. For more information and examples, see Update and sync item properties . createMindmapNode(...) (props?: MindmapCreateNodeProps) =&gt; Promise&lt; MindmapNode &gt; üîí Requires scope: boards:write üö¶ Rate limit: 50 * (1 + number_of_children) , where number_of_children is the number of mindmap children given as input. Experimental Creates a mind map item on a board. There are no required properties to pass while creating a mind map item. When you create a mind map item without passing any property, the content of the root item is an empty string of type text . You can update the values later. Example: TypeScript // Create mind map root node const root = await miro.board.experimental.createMindmapNode({ nodeView: { content: &#x27;&lt;p&gt;Mind map root node.&lt;/p&gt;&#x27;, } }); console.log(root) Mind map item: Figure 1. Mind map item. You can also create a mind map tree by passing the children property: ts const mindmap = await miro.board.experimental.createMindmapNode({ nodeView: { content: &#x27;Root&#x27;, }, children: [ { direction: &#x27;start&#x27;, nodeView: {content: &#x27;Child 1&#x27;}, }, { nodeView: {content: &#x27;Child 2&#x27;}, // You can nest as many children as you want children: [ { nodeView: {content: &#x27;Child 2 - 1&#x27;}, }, { nodeView: {content: &#x27;Child 2 - 2&#x27;}, children: [ { nodeView: {content: &#x27;Child 2 - 2 - 1&#x27;}, }, ], }, ], }, ], }); console.log(mindmap); Note on default values during creation: By default, the root node always has node view type of shape By default, the child nodes always have node view types of text Updated 10 months ago Table of Contents Properties action Methods get(...) select(...) deselect(...) getSelection(...) getVotingResults(...) sync(...) createMindmapNode(...)