Web SDK comparison guide Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Web SDK comparison guide Web SDK comparison guide Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Web SDK comparison guide This page outlines the changes in certain data objects and how those objects relate to others. For a complete map of each v1 endpoint to its v2 counterpart, check out the reference guide . Widgets/Items In the Miro Web SDK v1, the widget endpoint was polymorphic, meaning that one endpoint was used to represent all potential widget types. The structure of the call would differ depending on what type of widget you were creating or updating. In the v2 SDK, we have replaced this with an independent constructor for each widget (now called &quot;item&quot;) type. The new constructors should feel familiar to you, as they were designed to mostly follow the structure of the type-specific payloads of the previous board.widgets.create() call. There are two examples below, and for a full map of v1 endpoint calls to their v2 equivalents, please see the reference guide . v1 Create Widget call v2 Equivalent Create an Image miro.board.widgets.create({ type: &#x27;image&#x27;, url: imgUrl, x: xCoordinate, y: yCoordinate, }) Create an Image miro.board.createImage({ x: xCoordinate, y: yCoordinate, url: imgUrl }) Create a Shape miro.board.widgets.create({ type: &#x27;shape&#x27;, text: messageText, x: xCoordinate, y: yCoordinate, style: { textColor: &#x27;#fff&#x27;, backgroundColor: colorHexValue, borderColor: &#x27;transparent&#x27;, }, }) Create a Shape miro.board.createShape({ x: xCoordinate, y: yCoordinate, content: messageText, style: { fillColor: colorHexValue, }, }); The sync() function In the v2 Web SDK, we have introduced a new method for each object type – sync() . This method will refresh the content of an object without needing to refresh the entire Miro board. For example, if you are programmatically updating the description of a specific card, you would call card.sync() at the end of the update call so that the refreshed data is immediately available for a user. To learn more about the sync() function and see several examples of its usage, check out this guide . Modals The Miro UI has evolved significantly since the creation of the v1 Web SDK. When building the v2 SDK, we decided to rethink the way we expose extension points. The goal is to create consistency for the user experience so that all web applications feel like a natural extension of the Miro product, and all apps have an intuitive pattern. Unfortunately, this means that some options that were available to developers in v1 are no longer available in v2, such as the bottom panel and the left sidebar. As of today, we provide developers with two options: the app panel (also known as the left panel) and the pop-up modal. The app panel (&quot;Panel&quot;) should be used for the majority of your application&#x27;s interactions, and can be extended to provide multiple views for the user, depending on the context of your app. The pop-up modal (&quot;Modal&quot;) steals the focus of the browser window, and should be used for more visually-intensive user interactions (such as scrolling through their third-party data, or configuring settings and customizations, etc.). If you have a use case that relies on certain extension points, we&#x27;d like to hear about it. There are several feature requests already noted on our roadmap , and we encourage you to add your votes and subscribe to future updates. You’re also welcome to raise any questions or concerns in our developer Discord or on our community forum . Additional changes Several changes were made to improve the developer experience or to introduce consistency between the Web SDK and REST API. These changes include: With v2, authentication is now handled automatically when a user clicks on an app icon, meaning developers no longer need to explicitly invoke an authorization flow. App names and app icons will now be managed in App Settings . There is no longer a programmatic way to update either the App Name or the App Icon. Some endpoints in the v1 SDK were designed to support Enterprise accounts, such as account.get() . These have been removed from the v2 Web SDK, and any Enterprise-based changes should be managed through the REST API . Experimental features or methods can be previewed in the experimental miro.board.experimental namespace. An example - Converting Sticky Notes to Shapes As an example of the changes that may be required when migrating your own app from v1 to v2, we have included the following example, which shows a side-by-side comparison of the Sticky Note to Shape conversion sample app. The full JavaScript source from both the v1 sample app and the v2 sample app is displayed below, along with a description of each affected piece of the v1 sample code. v1 Code Sample v1 Change v2 Code Sample 1 miro.onReady(() =&gt; { 2 miro.initialize({ 3 extensionPoints: { 4 bottomBar: { 5 title: &#x27;Sticker to shapes&#x27;, 6 svgIcon: 7 &#x27;&lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;9&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot;/&gt;&#x27;, 8 positionPriority: 1, 9 onClick: async () =&gt; { bottomBar is no longer available title can no longer be set or changed programmatically svgIcon can no longer be set or changed programmatically 1 const { board } = window.miro; 2 3 async function init() { 4 board.ui.on(&quot;icon:click&quot;, async () =&gt; { 10 // Get selected widgets 11 let selectedWidgets = await miro.board.selection.get() 12 The endpoint name has changed 5 // Get selected items 6 let selectedItems = await miro.board.getSelection(); 7 13 // Filter stickers from selected widgets 14 let stickers = selectedWidgets.filter( (widget) =&gt; widget.type === &#x27;STICKER&#x27;) 15 widget is now item STICKER is now sticky_note 8 // Filter sticky notes from selected items 9 let stickyNotes = selectedItems.filter( 10 (item) =&gt; item.type === &quot;sticky_note&quot; 11 ); 12 16 // Delete selected stickers 17 await miro.board.widgets.deleteById( stickers.map((sticker) =&gt; sticker.id)) 18 Widgets are no longer deleted by ID. Rather, the item object is removed from the board object. 13 // Delete selected stickers 14 for (const stickyNote of stickyNotes) { 15 await board.remove(stickyNote); 16 } 17 19 // Create shapes from selected stickers 20 await miro.board.widgets.create( 21 stickers.map((sticker) =&gt; ({ 22 type: &#x27;shape&#x27;, 23 text: sticker.text, 24 x: sticker.x, 25 y: sticker.y, 26 width: sticker.bounds.width, 27 height: sticker.bounds.height, 28 })), 29 ) 30 Shapes now have an independent creation endpoint, as do all other widget types. text is now content 18 // Create shapes from selected sticky notes 19 for (const stickyNote of stickyNotes) { 20 await miro.board.createShape({ 21 content: stickyNote.content, 22 x: stickyNote.x, 23 y: stickyNote.y, 24 width: stickyNote.width, 25 height: stickyNote.height, 26 }); 27 } 31 // Show success message 32 miro.showNotification( &#x27;Stickers has been converted&#x27;) 33 }, 34 }, 35 }, 36 }) 37 }) Notifications in v2 are now handled via the showInfo() method. // Create a notification message to display on the board UI. const infoMessage = { code: 42, action: &#x27;The ultimate answer to life, the universe, and everything is:&#x27;, followUp: &#x27;42.&#x27;, }; // Compose the message. const infoNotification = `${infoMessage.action} ${infoMessage.followUp}`; // Display the notification on the board UI. await miro.board.notifications.showInfo(infoNotification); Updated about 1 year ago Table of Contents Widgets/Items The sync() function Modals Additional changes An example - Converting Sticky Notes to Shapes