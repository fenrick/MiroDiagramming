App panels and modals Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation App panels and modals App panels and modals Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy App panels and modals Apps run inside iframes on the board. App panels and modals help you structure the flow of user interaction in your app. Apps inside iframes Apps that leverage the Miro Web SDK run their code inside iframes. iframes can be inside a modal , a panel , and they can be headless . Headless iframes start after a user authorizes the app, and when the Web SDK is loaded on the board. Panel and modal iframes can start as a result of user interaction (for example, they click the app button on the app toolbar). App panels enable multiple users to collaborate at the same time on a board. App modals enable more complex workflows, such as selecting multiple items, and then uploading them to the board. Figure 1. Basic structure of an app built with the Miro Web SDK. Entry point If you design your app with user interaction in mind, you need to provide an entry point so that users can start interacting with the app. Typically, such an entry point is a clickable button on the app toolbar. To assign a custom icon to your button , go to the app settings through the Your apps tab. The app icon is available on the app toolbar and the Apps panel . Figure 2. Monochrome outline app icon on the app toolbar, and color app icon with app name on the Apps panel. iframes The building blocks of apps use HTML, CSS, and JavaScript. The app code loads on a board inside iframes. The Miro Web SDK can interact with apps using different iframes: Headless Panel Modal iframes and events When an app subscribes to an event, the event is dispatched to all iframes . The icon:click event is an exception to the default behavior: this event is dispatched only to the headless iframe. iframes and permissions iframes can request access to the following permissions : microphone:listen : access a user&#x27;s microphone to record audio in an iframe. screen:record : access a user&#x27;s screen to record it in an iframe. webcam:record : access a user&#x27;s camera to record video. Figure 3. The board loads, then it loads and initializes the app. If the app is authorized, the app headless iframe starts, and it runs as long as the board is open. Headless The headless iframe starts running: After the board has loaded and initialized the app. After users have authorized the app . Apps can run inside a headless iframe in the background, as long as: The board successfully loads and initializes the app. This is part of the board loading. Users have authorized the app by granting it the required permissions . The headless iframe runs as long as the board the app runs on is open. This is the main iframe where you store logic such as events, and methods to open a panel or a modal. The files that build the headless iframe are usually index.js (or .ts ) and index.html . Panel The panel iframe opens and closes using the openPanel and closePanel methods, respectively. The panel height corresponds to the current viewport height. Panel width, padding included: currently it&#x27;s set to 368 dp, fixed. Panel width, padding excluded: 320 dp, fixed. You should implement your apps to adapt to changes in the panel width, in order to be robust to future updates to the Miro UI. Left padding: 24 dp Right padding: 24 dp The files with the code that runs inside the panel iframe are usually panel.js (or .ts ) and panel.html ; or app.js (or .ts ) and app.html , if the app uses a panel and no modal. By default, the app name is displayed on the panel header. Typically, an app panel opens when users click the app icon on the app toolbar. To close the panel, users can click anywhere on the canvas outside the panel border. Additionally, users can click the pin icon on the app panel to prevent it from closing. When pinned, users can unpin the panel and close it by clicking the close icon. The panel code can include logic to carry out further actions in the context of the app. For example, the panel iframe can feature: A catalog of draggable items that users can drag and drop to the board. Shapes that users can select to draw diagrams or wireframes. UI elements to control starting, stopping, and pausing an audio or video recording. When users close the panel, the app code inside the panel iframe stops running, and any related actions stop executing. Apps can use panels to enable multiple users to collaborate at the same time on a board. In this scenario, a panel acts like a toolbox: from the panel users can select the tools and objects that they want to use on or add to the board. Figure 4. The highlighted area on the panel corresponds to its panel iframe. Modal The modal iframe opens and closes using the openModal and closeModal methods, respectively. If you don&#x27;t set a value for height or width , the default values for the modal iframe are: Height: 600 dp Width: 800 dp The modal iframe inside the modal container has the following padding: Top padding: 56 dp Right padding: 68 dp Bottom padding: 60 dp Left padding: 52 dp The files with the code that runs inside the modal iframe are usually modal.js (or .ts ) and modal.html ; or app.js (or .ts ) and app.html , if the app uses a modal and no panel. The content displayed inside modal iframes is fetched from a URL, and it&#x27;s completely customizable. Typically, an app modal can open when users click the app icon on the app toolbar, or a link or icon on the Apps panel. To close the modal, users click the close icon ‚úñ in the top-right corner. When users close the modal, the app code inside the modal iframe stops running, and any related actions stop executing. Apps can use modals to enable more complex workflows. For example: An app that integrates Miro boards with a project management tool can use the modal to display a list of cards retrieved from the external tool. Users can select the cards in the modal, and the selected cards are imported and synced to the board as card or app card items. Or an app can integrate Miro boards with external cloud storage solutions. The app can use the modal to enable selecting files from the cloud storage. The selected files are uploaded to the board as documents or images, depending on the file type. Figure 5. The highlighted area on the modal corresponds to its modal iframe with default dimensions. See also Board methods to open and close panels and modals Board events Pixels and dimensions Updated about 1 year ago What&#x27;s next Create your Developer team to start building your first Web SDK Hello. Create a Developer team Build your first Hello, World app Table of Contents Apps inside iframes Entry point iframes Headless Panel Modal See also