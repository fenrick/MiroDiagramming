Backend flow for app cards Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Backend flow for app cards Backend flow for app cards Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Backend flow for app cards Overview To ensure that app cards in a Miro board and their associated items in a third-party tool are synced, you must implement the integration logic required to take care of various aspects of an app card integration with a third-party tool. We’ve provided the bare minimum flow that we recommend for different use cases when using app cards. You can then implement customized integration logic on top of this to enhance your integration. Figure 1 illustrates the minimum infrastructure required for app card and third-party tool integration. The following sections in this document provide more information on different components of this infrastructure. Figure 1. The minimum infrastructure required for app card and third-party tool integration. Install app in Miro Send a request from the app installation screen to the backend at your end. You should have your backend configured in the App settings page. For more information, see Enable REST API authentication from Miro&#x27;s Web SDK authorization . Authenticate the user in the third-party tool. Create a connection or mapping between the Miro user and the third-party tool user. Store the Miro token and the third-party tool token in your backend. Figure 2 illustrates the sample database mapping for user IDs and items between Miro and a third-party tool. Figure 2. Sample database mapping for user IDs and items between Miro and a third-party tool. Here are some handy references for app installation and authorization: Mirotone UI flow for the app installation and authorization Enable REST API authentication from Miro&#x27;s Web SDK authorization Create an app card in Miro: Request sent from Miro Web SDK app to the integration backend. For more information, see the Miro Web SDK reference for app cards . Integration backend makes a request to the third-party tool to create a link between an app card and the corresponding item in the third-party tool. The connection is established between the app card and the third-party tool. Edit, update, and keep app cards synced Update an app card in Miro: Request sent from Web SDK to the integration backend. For more information, see the Miro Web SDK reference for app cards . Integration backend fetches third-party tool token for the Miro user who made the update operation. Integration backend makes a request to the third-party tool to update the item. Third-party tool item is updated using the third-party tool token of the user who made the update. Third-party tool sends the information about the updates to the integration backend via Webhooks, SDK, or API. Integration backend fetches all the app cards that are linked to this third-party tool item. Integration backend updates the app cards with the new information by making Miro REST API calls using the Miro token of the user who created the app card. For more information, see the Miro REST API reference for updating app cards . Update the item in the third-party tool: Third-party tool item is updated inside the third-party system. Third-party tool sends the information about the updates to the integration backend via Webhooks, SDK, or API. Integration backend fetches all the app cards that are linked to this third-party tool item. Integration backend updates the app cards with the new information using the app card creator token via the Miro REST API. For more information, see the Miro REST API reference for updating app cards . See also App card overview App card Web SDK reference App card REST API reference App card use cases Edit, update, and keep app cards synced Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Updated almost 2 years ago What&#x27;s next Learn how to use the REST API OAuth redirect URI to extend authorization to the Miro Web SDK Enable REST API authentication from Miro&#x27;s Web SDK authorization Table of Contents Overview Install app in Miro Create an app card in Miro: Edit, update, and keep app cards synced Update an app card in Miro: Update the item in the third-party tool: See also