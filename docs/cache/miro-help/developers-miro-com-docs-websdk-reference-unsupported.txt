Unsupported Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Unsupported Unsupported Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Unsupported Unsupported The Miro Web SDK doesn&#x27;t yet support all board items. Unsupported items are grouped under a generic category called unsupported items . We&#x27;re planning to gradually support them in future releases. At the moment it&#x27;s not possible to create or update these items programmatically. Currently, the Miro Web SDK supports: Reading and updating x and y coordinates of unsupported items. Reading width and height of unsupported items. Removing unsupported items. Unsupported item Description Document Embeds a document—for example, a PDF file, a presentation slide deck, or a Google doc—in a board so that it is possible to view it from within the board. Emoji Adds emojis to a board. Kanban Creates Kanban boards that can be populated with Cards to manage product delivery. Mockup Enables using wireframes to create mock-ups to prototype interaction interfaces quickly and efficiently. Stroke It simulates a pen stroke to draws lines on a board. Table text Enables adding, editing, and deleting text from tables on a board. Table Enables adding, editing, and deleting tables on a board. USM User Story Mapping (USM) helps structure, organize, and plan user tasks and product releases. Properties id readonly string Unique ID of the item, assigned automatically upon creation. Example: 3658432978520043388 x number The x-axis coordinate of an item is the horizontal distance in dp of the center point of the item from the center point of the board. The center point of the board has x: 0 and y: 0 coordinates. Default: 0 See also: Board coordinates x and y : -Infinity y number The y-axis coordinate of an item is the vertical distance in dp of the center point of the item from the center point of the board. The center point of the board has x: 0 and y: 0 coordinates. Default: 0 See also: Board coordinates x and y : -Infinity type readonly string Defines the type of item . Item type is useful to retrieve specific items from a board. For example, you can fetch all card and shape items from the board, and then carry out an action on them. Example: TypeScript // Get all items from the board const items = await miro.board.get(); // Count all card and shape items on the board let cards = 0; let shapes = 0; items.forEach((items) =&gt; { switch (items.type) { case &#x27;card&#x27;: cards++; case &#x27;shape&#x27;: shapes++; } }); // Output to the console the total amount of card and shape items console.log(`The current board has ${cards} cards and ${shapes} shapes.`); parentId readonly &#x27;null&#x27; | string If an item is a child of another item, the child&#x27;s parentId returns the unique identifier of the corresponding parent item. If an item has no parent, its parentId is null . You can use the value to retrieve a tree structure when items are nested inside containers. For example, sticky notes inside frames or text items inside mindmaps. origin &#x27;center&#x27; origin marks: The positioning reference point of a board item. This is the point used to calculate the x and y coordinates of an item when it&#x27;s positioned on the board , or when it&#x27;s a child inside a parent item . The rotation pivot point of a board item that supports rotation . origin accepts only one value: center . Any other value throws an error. relativeTo &#x27;canvas_center&#x27; | &#x27;parent_top_left&#x27; | &#x27;parent_center&#x27; The relativeTo property affects the x and y coordinate values of a board item. relativeTo defines the positioning reference of a board item, which can be: Relative to the board Relative to a parent item Depending on whether an item is a child of a parent item or not, relativeTo can have one of the following values: Value Description On the board UI canvas_center The item is positioned on the board, and it&#x27;s not a child of another item. The x and y coordinate values of the item are relative to the center of the board . Figure 1. The relativeTo property of the board item—a sticky note in the example image—is set to canvas_center . The same mechanism applies to and works in the same way for all supported board items. parent_top_left The item is positioned on the board, and it is a child of a parent item. For example, a parent frame. The x and y coordinate values of the child item are relative to the top-left corner of the parent item ). Figure 2. The relativeTo property of the board item—a sticky note in the example image—is set to parent_top_left . The same mechanism applies to and works in the same way for all supported board items. parent_center Experimental feature The item is positioned on the board, and it is a child of a parent mind map node. The x and y coordinate values of the item are relative to the center of the parent mind map node item. Figure 3. The relativeTo property of the child mind map nodes is set to parent_center . See also: Position and coordinates Children inside parent items linkedTo? string linkedTo is the namespace that enables links to be associated to items on the board. When this property is utilized, the associated item will display an arrow icon on its top right corner. On click, this icon will navigate to the associated link. For links that point to another item on the same board, the viewport will automatically move to that item when true is returned. For links that point to an item on a separate board or an external url, a new tab tab will be opened. Note: Items of type tag do not support the linkedTo property. To link an item to another item on the same board, a valid url with an item id must be specified: TypeScript const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); const widgetId = `00000000000000000`; const boardId = &#x27;xxxxxxxxxxx&#x27;; // Generate url based on boardId and widgetId geoCard.linkedTo = `https://miro.com/app/board/${xxxxxxxxxxx}/?moveToWidget=${widgetId}`; // OR you can use relative URL geoCard.linkedTo = `/app/board/${xxxxxxxxxxx}/?moveToWidget=${widgetId}`; // OR you can generate url based on current URL by simply change of query param const searchParams = new URLSearchParams(window.location.search); searchParams.set(&#x27;moveToWidget&#x27;, widgetId); const newRelativePathQuery = `${window.location.pathname}?${searchParams.toString()}`; geoCard.linkedTo = newRelativePathQuery; To unlink an item to the provided url, set the property to undefined or pass an empty string &quot;&quot; : TypeScript const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Unlink the widget geoCard.linkedTo = &#x27;&#x27;; // or geoCard.linkedTo = undefined; await geoCard.sync(); console.log(geoCard.linkedTo); // will return empty string: &#x27;&#x27; createdAt readonly string Timestamp Date and time when the item was created. Format: UTC, ISO 8601 . Includes a trailing Z offset . Example: 2021-05-18T07:59:01Z ℹ️ Note: Timestamps indicating creation and update times are always in UTC time , regardless of the time offset configured on the machine where the app runs or where the code is executed. createdBy readonly string Miro users are automatically assigned a unique ID. createdBy contains the ID of the user who created the item. Example: 3658432978520043388 modifiedAt readonly string Timestamp Date and time when the item was last modified. Format: UTC, ISO 8601 . Includes a trailing Z offset . Example: 2021-05-18T07:59:01Z ℹ️ Note: Timestamps indicating creation and update times are always in UTC time , regardless of the time offset configured on the machine where the app runs or where the code is executed. modifiedBy readonly string Miro users are automatically assigned a unique ID. modifiedBy contains the ID of the user who applied the most recent edit to the item. Example: 3658432978520043388 connectorIds? readonly Array&lt;string&gt; connectorIds is an array that contains the ids of the connectors attached to the current item. ℹ️ Note: Items of type tag and frame do not support the connectorIds property. width number Width of the item in dp . See also: Pixels and dimensions height number Height of the item in dp . See also: Pixels and dimensions Methods sync () =&gt; Promise&lt;void&gt; 🔒 Requires scope: boards:write sync propagates to the board any changes to item and tag properties. After updating the properties of an item or a tag, sync it with the board to: Propagate to the board the changes applied to the item or to the tag. Make the changes visible on the board. All board items and tags require sync to make any changes to their properties visible on the board. For more information and examples, see Update and sync item properties . Example: (The code example updates a text item using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create an item. // In this case, a text item. const text = await miro.board.createText({ content: &#x27;&lt;p&gt;This is a piece of text to remind me that I always finish what I ...&lt;/p&gt;&#x27;, style: { fillColor: &#x27;transparent&#x27;, textAlign: &#x27;left&#x27;, }, x: 0, y: 0, width: 450, rotation: 0.0, }); // Update the board item by modifying the values of its properties. // In the text item case, the updated properties modify content, background color, and rotation of the item. text.content = &#x27;A fourteneer is &quot;A line that rumbles on like this for being a bit too long.&quot;&#x27;; text.style.fillColor = &#x27;#a9fe65&#x27;; text.rotation = 180.0; // Call &#x27;sync&#x27; to make the changed board item properties visible on the board. await text.sync(); // Output the updated board item to the developer console. console.log(text); Example: (The code example updates a tag using sync . The same mechanism applies to and works in the same way for all supported board items.) TypeScript // Create a tag. const todo = await miro.board.createTag({ title: &#x27;todo&#x27;, color: &#x27;yellow&#x27;, }); // Create a sticky note and attach the tag to it. const stickyNote = await miro.board.createStickyNote({ content: &#x27;sticky note with tag: &quot;todo&quot;&#x27;, tagIds: [todo.id], }); console.log(stickyNote.tagIds); // =&gt; [&#x27;3074457345627244742&#x27;] // Update the tag properties: title and color. todo.title = &quot;won&#x27;t fix&quot;; todo.color = &#x27;green&#x27;; // Call &#x27;sync&#x27; to make the changed tag properties visible on the board. await todo.sync(); // Output the updated tag to the developer console. console.log(todo); getMetadata (key: string) =&gt; Promise&lt;T&gt; 🔒 Requires scope: boards:read 🚦 Rate limit: Level 1 Fetches board item metadata, stored per app, for the specified metadata key. The response contains the metadata value assigned to the requested key. To fetch all the metadata for a board item, invoke the method without passing any arguments. The response contains all the metadata associated with the board item as key/value pairs. An app can access only the metadata that it sets. It cannot access metadata set by other apps. getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups ℹ️ Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. getMetadata returns a new object, not a reference to the object that was previously set with setMetadata . If the specified key isn&#x27;t found, the method returns undefined . ⚠️ Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to retrieve metadata from. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;leaderboard&#x27;, [&#x27;Ziltoid&#x27;, &#x27;Howard&#x27;, &#x27;Paul&#x27;]); // Get the specific &#x27;leaderboard&#x27; metadata from the card item. const leaderboard = await geoCard.getMetadata(&#x27;leaderboard&#x27;); // Get all the metadata from the card item by passing no arguments. await geoCard.getMetadata(); setMetadata (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;T&gt; 🔒 Requires scope: boards:write Adds board item metadata to make it available on the board that the app runs on. An app can access only the board item metadata that it sets. It cannot access metadata set by other apps. Board item metadata is stored in the item it refers to. Therefore: When duplicating an item, the metadata is copied to the new item. When deleting an item, the corresponding metadata is removed with the deleted item. Board item metadata is synced across, and available to, all the users who can: Access and view the board that the app is running on, AND Run the app on the board. ItemMetadata is a key/value-pair object. It can contain values with the following data types: string number boolean Object Array null undefined getMetadata and setMetadata are available for the following board items: Card Connector Embed Image Preview Shape Sticky note Text The methods aren&#x27;t available for the following board items: Frames Unsupported board items groups To overwrite an existing key inside ItemMetadata : Pass the same key multiple times with different values. Only the last/most recent value is stored with the key. To remove a key from ItemMetadata : Set the value of the existing key to either null , or undefined . This clears the key. If you call getMetadata(key) to retrieve a key that has been set to null or undefined , the method returns undefined . ℹ️ Note: To access board item metadata , apps require the boards:read permission. To store board item metadata , apps require the boards:write permission. You can assign an empty array ( [] ) to a key. It&#x27;s returned as an empty array. You can assign an empty string ( &#x27;&#x27; ) to a key. It&#x27;s returned as an empty string. ⚠️ Warning: Total ItemMetadata storage limit: 6 KB per item. Example: TypeScript // Get the board item you want to set metadata to. const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Set item metadata for an imaginary geocaching game, and store it to the retrieved card item. await geoCard.setMetadata(&#x27;geoData&#x27;, { name: &#x27;null&#x27;, coordinates: { latitude: &#x27;33.950278&#x27;, longitude: &#x27;-105.314167&#x27;, }, lastFound: &#x27;1947-07-08&#x27;, content: true, difficulty: 5, keywords: [&#x27;x-files&#x27;, &#x27;truth-is-out-there&#x27;, &#x27;area-51&#x27;, &#x27;roswell&#x27;, &#x27;aliens&#x27;], geoCache: [ { name: &#x27;UFO&#x27;, description: &#x27;Severely damaged unidentified flying object. &#x27;, }, { name: &#x27;Alien&#x27;, description: &#x27;Remains of an alien life form.&#x27;, }, { name: &#x27;Artifacts&#x27;, description: &#x27;Tools, equipment, and other items found at the crash site.&#x27;, }, { name: &#x27;Edibles&#x27;, description: &#x27;The alien was likely as high as a kite when they crashed. Typical.&#x27;, }, ], }); // Get the specific &#x27;geoData&#x27; metadata from the card item. // The response contains the metadata value assigned to the key. const geoCardGeoData = await geoCard.getMetadata(&#x27;geoData&#x27;); // Get all the metadata from the card item. // The response contains all the metadata assigned to the board item as key/value pairs. const geoCardAllMetaData = await geoCard.getMetadata(); // Clear the metadata about the imaginary geocaching game in one of the following ways: // 1. Assign &#x27;geoData&#x27; an empty object. await miro.board.setMetadata(&#x27;geoData&#x27;, {}); // 2. Set &#x27;geoData&#x27; to &#x27;undefined&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, undefined); // 3. Set &#x27;geoData&#x27; to &#x27;null&#x27;. await miro.board.setMetadata(&#x27;geoData&#x27;, null); goToLink () =&gt; Promise&lt;boolean&gt; 🔒 Requires scope: boards:read goToLink navigates to the provided link associated with the item on a board. For links that point to another item on the same board, the viewport will automatically move to that item when true is returned. For links that point to an item on a separate board or an external url, a new tab tab will be opened. Returns: Promise &lt; boolean &gt; true : Link is successfully associated with the item, navigation is triggered, and the linkedTo property contains a valid value. false : Link is not successfully associated to the item due to an invalid or missing linkedTo property, and no navigation is triggered. Example: TypeScript const [geoCard] = await miro.board.get({type: &#x27;card&#x27;}); // Link item to some url geoCard.linkedTo = &#x27;https://google.com&#x27;; // Update widget props and apply changes await geoCard.sync(); // Navigate to https://google.com (value of `linkedTo` property) await geoCard.goToLink(); bringToFront () =&gt; Promise&lt;void&gt; 🔒 Requires scope: boards:write 🚦 Rate limit: Level 1 In a stack of items, this method brings an item to the front so that it is at the top of the stack. When the item is at the front, it is fully visible; The item can partially or completely hide underlying items in the same stack. ℹ️ Note: Frame items don&#x27;t support the bringToFront() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Bring the first sticky note to the front of the board. await first.bringToFront(); sendToBack () =&gt; Promise&lt;void&gt; 🔒 Requires scope: boards:write 🚦 Rate limit: Level 1 In a stack of items, it sends an item to the back so that it is at the bottom of the stack. When it is at the back, item is partially or completely hidden by overlying items in the same stack. ℹ️ Note: Frame items don&#x27;t support the sendToBack() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Send the third sticky note to the back of the board await third.sendToBack(); bringInFrontOf (target: BaseItem) =&gt; Promise&lt;void&gt; 🔒 Requires scope: boards:write 🚦 Rate limit: Level 1 In a stack of items, this method sends an item in front of another item (target). When an item is moved to the front, the item can partially or completely hide underlying items in the same stack. ℹ️ Note: As this method implements relative positioning, you can use this method to place items in front or behind other items. If you want to send an item all the way to the front, you can use the method bringToFront() , which places the item at the top of the stack. Frame items don&#x27;t support the bringInFrontOf() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Bring the first sticky note in front of second. await first.bringInFrontOf(second); sendBehindOf (target: BaseItem) =&gt; Promise&lt;void&gt; 🔒 Requires scope: boards:write 🚦 Rate limit: Level 1 In a stack of items, this method sends an item behind another item (target). When an item is moved to the back, the item can be partially or completely hidden by the overlying items in the top of the same stack. ℹ️ Note: As this method implements relative positioning, you can use this method to place items in front or behind other items. If you want to send an item all the way to the back, you can use the method sendToBack() , which places the item at the bottom of the stack. Frame items don&#x27;t support the sendBehindOf() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); // Send the third sticky note behind the second one await third.sendBehindOf(second); getLayerIndex () =&gt; Promise&lt;number&gt; 🔒 Requires scope: boards:read The getLayerIndex() method returns the position of an item in the item stack. Items in a stack are layered on top of each other based on their layer index value. An item with a higher layer index appears above items with lower layer index values. Each item on the board has a layer index position in the stack. The higher the layer index value, the &quot;closer&quot; to the user the item appears. For example, with three items on the board - first , second , and third - their initial layer index values might be: first[0] , second[1] , third[2] . The item with layerIndex === 2 ( third ) will be fully visible at the top of the stack. The item with layerIndex === 1 ( second ) may be partially hidden by the item above it. And the item with layerIndex === 0 ( first ) may be fully hidden by the items above it. Returns: Promise&lt;number&gt; - calling getLayerIndex() allows you get the position of a specific item in the stack. ℹ️ Note: The item stack is zero indexed. Frame items don&#x27;t support the getLayerIndex() method. As a frame item acts as a parent that can contain other items, a frame item is always at the back, relative to any other items on the board. The only object behind a frame is the board itself. Example: TypeScript // Create three sticky notes. // Sticky notes are created on top of each other in the creation order, with the layer index equal to the creation index. const first = await miro.board.createStickyNote({ content: &#x27;first&#x27;, }); const second = await miro.board.createStickyNote({ content: &#x27;second&#x27;, }); const third = await miro.board.createStickyNote({ content: &#x27;third&#x27;, }); await third.getLayerIndex(); // returns 2 getConnectors () =&gt; Promise&lt;Array&lt; Connector &gt;&gt; 🔒 Requires scope: boards:read 🚦 Rate limit: Level 3 The getConnectors() method returns an array of connector items attached to the current item. The connectors returned correspond to the ids in the connectorIds property of the item. Example: TypeScript // Create two sticky notes linked by a connector. const startItem = await miro.board.createStickyNote({ content: &#x27;start&#x27;, }); const endItem = await miro.board.createStickyNote({ content: &#x27;end&#x27;, x: 500, }); const connector = await miro.board.createConnector({ start: { item: startItem.id, }, end: { item: endItem.id, }, }); // sync() updates the connectorIds property in startItem await startItem.sync(); const connectors = await startItem.getConnectors(); // returns [connector] Property Type connectorIds? readonly Array&lt;string&gt; createdAt readonly string createdBy readonly string groupId? readonly string height readonly number id readonly string linkedTo? string modifiedAt readonly string modifiedBy readonly string origin &#x27;center&#x27; parentId readonly &#x27;null&#x27; | string relativeTo &#x27;canvas_center&#x27; | &#x27;parent_top_left&#x27; | &#x27;parent_center&#x27; type readonly string width readonly number x number y number bringInFrontOf(...) (target: BaseItem) =&gt; Promise&lt;void&gt; bringToFront(...) () =&gt; Promise&lt;void&gt; getConnectors(...) () =&gt; Promise&lt;Array&lt; Connector &gt;&gt; getLayerIndex(...) () =&gt; Promise&lt;number&gt; getMetadata(...) (key: string) =&gt; Promise&lt;T&gt; goToLink(...) () =&gt; Promise&lt;boolean&gt; sendBehindOf(...) (target: BaseItem) =&gt; Promise&lt;void&gt; sendToBack(...) () =&gt; Promise&lt;void&gt; setMetadata(...) (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;T&gt; sync(...) () =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Properties id x y type parentId origin relativeTo linkedTo? createdAt createdBy modifiedAt modifiedBy connectorIds? width height Methods sync getMetadata setMetadata goToLink bringToFront sendToBack bringInFrontOf sendBehindOf getLayerIndex getConnectors