Storage collection Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Storage collection Storage collection Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Storage collection Methods set(...) (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 The set() method saves the value for the specified key in the Collection . It accepts key and value parameters and returns a Promise . The key parameter specifies the key for the data element in the collection. It is used to retrieve, set, or remove data, and should always be a string . The value parameter specifies the data to assign to the specified key in the collection. It can be any JavaScript value that is serializable to JSON. Example: TypeScript const userId = &#x27;12345678&#x27;; // Select a &#x27;votes&#x27; collection const votes = miro.board.storage.collection(&#x27;votes&#x27;); // Set the vote result for the specified user await votes.set(userId, true); // Read user vote result console.log(await votes.get(userId)); // true get(...) (key: string) =&gt; Promise&lt;undefined | T&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 The get() method retrieves the value stored for a given key in the Collection . It accepts a single key argument and returns a Promise resolving to the value. If the key does not exist, undefined is returned. Note: get() is generic. You can specify the expected return type like collection.get&lt;string&gt;(&#x27;key&#x27;) . The key parameter specifies the key for the data element in the collection. It is used to retrieve, set, or remove data, and should always be a string . Example: TypeScript // Select a &#x27;configuration&#x27; collection const configuration = miro.board.storage.collection(&#x27;configuration&#x27;); // Read color-theme value from the collection const value = await configuration.get(&#x27;color-theme&#x27;); // dark remove(...) (key: string) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 The remove() method deletes the value stored for a given key in the Collection . It accepts a single key parameter and returns a Promise . The key parameter specifies the key for the data element in the collection. It is used to retrieve, set, or remove data, and should always be a string . Example: TypeScript const userId = &#x27;12345678&#x27;; // Select a &#x27;votes&#x27; collection const votes = miro.board.storage.collection(&#x27;votes&#x27;); // Set vote result for user await votes.set(userId, true); // Read user vote result console.log(await votes.get(userId)); // true // Remove user vote from collection await votes.remove(userId); console.log(await votes.get(userId)); // undefined onValue(...) (key: string, handler: (value: undefined | T, version: string) =&gt; void) =&gt; Promise&lt;void&gt; üîí Requires scope: boards:read The onValue() method subscribes to changes for a given key in the Collection . It accepts two parameters: key - The key to subscribe to changes for handler - The handler function to call on value changes The handler executes every time the value for the subscribed key changes in the Collection . When a new subscriber is added: The current value is emitted to the new subscriber immediately. If a value already exists for the key, the handler is called with that value right after subscribing. Note: onValue() is generic. You can specify the expected value type like: collection.onValue&lt;string&gt;(&#x27;key&#x27;, (value) =&gt; processString(value)) Note: The handler will be invoked for all clients and users collaborating on the board.. The handler parameter specifies the callback function to execute when the value changes. It should have the following function signature: TypeScript type Handler = (value: unknown | undefined) =&gt; void; The value parameter passed to the handler contains the new value for the subscribed key. Note: value will be the same type as specified in the call to onValue() . Example: TypeScript // User id for demo const userId = &quot;12345678&quot;; // Get the &#x27;votes&#x27; collection const votes = miro.board.storage.collection(&quot;votes&quot;); // Subscribe to change events for the user&#x27;s vote votes.onValue&lt;boolean&gt;(userId, (vote) =&gt; { console.log(&quot;Vote changed: &quot;, vote); }); // Update the user&#x27;s vote await votes.set(userId, true); // Prints: // Vote changed: true await votes.set(userId, true); await votes.set(userId, false); // Prints: // Vote changed: true // Vote changed: false offValue(...) (key: string, handler: (value: undefined | T, version: string) =&gt; void) =&gt; Promise&lt;void&gt; The offValue() method unsubscribes from changes for a given key in the Collection . It accepts two parameters: key - The key to unsubscribe from changes for handler - The handler function to remove as a subscriber This will stop the handler from executing when the value for the subscribed key changes in the Collection . Example: TypeScript // User id for demo const userId = &quot;12345678&quot;; // Get the &#x27;votes&#x27; collection const votes = miro.board.storage.collection(&quot;votes&quot;); // Subscribe handler1 to value changes const handler1 = (vote) =&gt; console.log(&quot;Handler 1: &quot;, vote); votes.onValue&lt;boolean&gt;(userId, handler1); // Subscribe handler2 to value changes const handler2 = (vote) =&gt; console.log(&quot;Handler 2: &quot;, vote); votes.onValue&lt;boolean&gt;(userId, handler2); // Update vote value await votes.set(userId, true); // Prints: // Handler 1: true // Handler 2: true // Unsubscribe handler1 votes.offValue(userId, handler1); // Update vote value await votes.set(userId, false); // Prints: // Handler 2: false // handler1 was removed, handler2 still receives updates All properties Property Type get(...) (key: string) =&gt; Promise&lt;undefined | T&gt; offValue(...) (key: string, handler: (value: undefined | T, version: string) =&gt; void) =&gt; Promise&lt;void&gt; onValue(...) (key: string, handler: (value: undefined | T, version: string) =&gt; void) =&gt; Promise&lt;void&gt; remove(...) (key: string) =&gt; Promise&lt;void&gt; set(...) (key: string, value: title =&quot;Json&quot;&gt;Json) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods set(...) get(...) remove(...) onValue(...) offValue(...) All properties