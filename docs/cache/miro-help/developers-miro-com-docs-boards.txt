Boards Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Boards Boards Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Boards Miro apps can position and move items on a board by specifying coordinates, which can be relative to the board or to a parent item. A board is a surface where users can work with tools‚Äîapps and integrations‚Äîand where they can exchange information with board items: Board items are visual representations of the information that users share on the board. A board item can be a piece of text, a card, a link, an image, a geometric shape, and so on. Apps and integrations enable board users to perform actions on the board or on board items. Developers can extend board functionality by creating custom apps and integrations: Miro apps make extra features available to end-users of a board. Integrations enable data exchange between a board and an external application. The board hierarchy tree mimics the DOM of a web page: Figure 1. The hierarchical tree structure of board, parent items, and child items. Figure 2. Child items (a sticky note and a text item) inside a parent frame, which in turn is a child of the board. Position and coordinates Miro boards are zoomable, and they are infinite: you can pan left and right, as well as scroll up and down as long as you want. The board engine applies some default values to use them as reference when calculating item size and position on the board. Position relative to the board üìò The x and y coordinates of an item mark the center point of the item, relative to the center of the board. To position and to locate items on a board, you set x and y coordinates. If you don&#x27;t set x and y coordinates when you create an item, it is automatically positioned on the board at x:0 and y:0 , which is the center of the board. When you create a new board, the center of the initial viewport that displays the new board on a screen becomes the reference center of the board. Figure 3. The board coordinate system. Figure 4. The initial board viewport sets the center of the board with x:0 and y:0 coordinates. This is the reference point for board object positioning. Figure 5. The coordinates of the board item define its center point, relative to the center of the board. When you position an item on the board, their x and y coordinates are relative to the x:0 , y:0 board center. Item x and y values change if the items are repositioned on the board, either manually, or programmatically. The x and y coordinates of an item mark the center point of the item, relative to the center of the board. Position relative to parent items üìò The x and y coordinates of a child item inside a parent item mark the center point of the child item, relative to the top-left corner of the parent item. Some items can act as parents for other items. For example: frames . When these parent items contain one or more child items, the x and y coordinates of the children are relative to the top-left corner of the parent item. In this way, it is possible to reposition a parent item along with its children, without affecting the visual layout of the children inside the parent. For example: A sticky note is on the board. Its x and y coordinates are relative to the x:0 , y:0 center of the board. You add the sticky note to the frame using frame.add() , and you update its position so that the sticky note is inside the frame: the frame becomes a parent item, and the sticky note its child item. As long as the sticky note is inside the frame, its x and y coordinates are relative to the top-left corner of the parent frame. You can move the frame to a different position on the board; the sticky note follows the frame, and it keeps its position relative to the frame. You remove the parent-child relationship between the frame and the sticky note using frame.remove() , and you update its position so that the sticky note is outside the frame. The sticky note x and y coordinates are relative to the x:0 , y:0 center of the board. As for the stacking order of items layered on top of each other, the back-to-front order on the board depends on the item retrieval sequence from the server. Frames are an exception: since they are usually parents with child items, frames are always the last item at the back: they are behind everything else on the board, but the board itself. Figure 6. The coordinates of the child item inside a parent frame item define the child item&#x27;s center point, relative to the top-left corner of the parent frame. Board viewport It is possible to get and set the viewport programmatically with the Web SDK. The REST API doesn&#x27;t carry out operations on the viewport. The board engine acquires the current viewport width and height from the current display device. When users pan left or right, or when they scroll up and down, the engine detects the changes, and it recalculates the location of the new viewport. Position of the viewport The viewport x and y coordinates define the horizontal and vertical position of the top-left corner of the viewport , relative to the center point of the board with x:0 and y:0 . Figure 7. The coordinates of the viewport define its top-left corner, relative to the center of the board. Pixels and dimensions Item dimensions on a board are measured in board units: 100 board units equal 100 device-independent pixels (dp) at a zoom level of 100% (scale 1:1). For example: Open a board at a zoom level of 100%. Insert an image item whose width is 250 dp and whose height is 150 dp. Insert a shape item with the same width and height measurements as the image. The image and the shape displayed on the board have the same size. Updated almost 2 years ago What&#x27;s next After the overview about boards, learn about board items. Board items Table of Contents Position and coordinates Position relative to the board Position relative to parent items Board viewport Position of the viewport Pixels and dimensions