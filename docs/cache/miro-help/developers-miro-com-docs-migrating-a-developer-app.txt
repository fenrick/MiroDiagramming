Migrating a developer app Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Migrating a developer app Migrating a developer app Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Migrating a developer app Developers may occasionally need to move an app from one Miro account or team to another during testing or staging. This guide covers best practices for migrating your app and its associated settings to another account or team. Miro developer apps (settings) Miro developer apps are associated with a particular developer team within a Miro account when they’re created. When an app is created, a unique set of credentials is created: Client ID and Client Secret. These credentials are unique and are what the OAuth2.0 flow for the application will ingest when authorizing the app externally. This means that external applications that make requests associated with this Client ID and Client Secret will be beholden to that particular Miro app’s settings (URL for Web SDK, Redirect URL for REST API) and permissions (OAuth scopes). Best practices for creating an app When creating a developer app, consider the team and account you’re creating the app under. If you’re a developer working on a team within an organization, you may want to consider who else should be part of your developer team and Miro account when creating the app, and you may want to associate it with a general/service account (e.g., [email&#160;protected] ). Staging app Some developers find it helpful to create two identical apps (same app url, redirect url, permissions) with separate Client IDs for “staging” and “production”. This can be helpful if you’re developing a more complex integration or application and would like to see how certain changes in your app interact with Miro in your testing. Creating two apps with the same settings and URLs will ensure the interaction with Miro’s APIs or SDK is identical, allowing you to treat one app (“staging”) as a testing ground before making any adjustments to the Miro settings in your final app (“production”). While this is not necessary, it can be helpful for developers who are conscious of testing out different permissions (scopes) or URLs with their external application, and only having to change the environment variables in your local code (e.g., Client ID, Client Secret, Redirect URL for REST API integrations). Common migration scenarios There may be times where you need to migrate an app from one team or account to another. Some common scenarios: The original app was created under a team or account that isn’t the account you wish to use for managing the integration or app going forward The original developer of the app has left the company and the settings aren’t available to other members of the team How to migrate an app To migrate an app from one team to another, you can quickly recreate the same app in the desired destination by copying the app manifest of the original app. This will ensure the app has the same settings behavior and is identical to the original app, aside from the unique Client ID. Note : This will require updating the Client ID and Secret in your external application / local code. To do so, follow these steps: Login to the account and team that the original app currently exists in. Navigate to the app settings in Miro ( Developer Hub &gt; Your Apps &gt; Edit app settings) for the app you wish to migrate Click Edit in manifest This will expose the app manifest From the editor, copy all code: If you’re migrating the app to a new account, log out of the existing account and login to the account and team that you wish to migrate the app to. Note : This should be a developer team . Create a new app under your desired team and account. From the new app, click Edit in manifest This will expose the app manifest Paste in the code that you copied from Step 4 , hit Save . In your external application, replace your environment variables as needed with the updated Client ID and Client Secret for your “migrated” app. Special requests In certain circumstances, it may be necessary for us to manually transfer an app for you. For example, if your app has already been authorized by several end users and you don’t want to break those connections by leveraging a new app/Client ID. Or if you’re unable to access the original app and the team it was created under, we may similarly be able to help migrate the app manually. (For example, the original developer left the company, and you need help moving the app to a team that you can access.) For these situations, please open a ticket with our support team under Miro for Developers &gt; Miro for Developers / Other and provide the following details: App Client ID , original account and team IDs , new account and team IDs. Updated 8 months ago Table of Contents Miro developer apps (settings) Best practices for creating an app Staging app Common migration scenarios How to migrate an app Special requests