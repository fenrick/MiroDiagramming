Session Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Session Session Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Session Experimental üîí Requires scope: boards:write An application can start and manage collaborative sessions for participants on a board through the miro.board.collaboration namespace. In order to implement collaborative features, such as setting the focus and viewport control of other users on a board, an application must first start an active session. Concurrent sessions Applications support the ability to run multiple active sessions at one time on a board (for example, breakout rooms). Only one application can run active, concurrent sessions on a board at a time. Participants on a board can only be in one unique session at a time. ‚ÑπÔ∏è Note: Once you start the session , you get a session object returned, with this object you can perform further operations, such as ending the session. A flow diagram which shows collaboration.startSession() method returns a session object, which allows you to access session methods. Methods invite(...) (users: Array&lt; OnlineUserInfo &gt; | Array&lt;Array&lt; OnlineUserInfo &gt;&gt;) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:write Invites users on the board to a session. Accepts a list of OnlineUsers to be invited to a session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const onlineUsers = await miro.board.getOnlineUsers(); // invites the online users to the session await session.invite(onlineUsers) join(...) () =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:write Joins current user to a session without an invitation. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }) // joins the current user to the session, without invitation await session.join() leave(...) () =&gt; Promise&lt;void&gt; üîí Requires scope: boards:write üö¶ Rate limit: Level 1 Removes the current user from a session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); // joins the current user to the session, without invitation await session.join() // leaves session as current user await session.leave() getUsers(...) () =&gt; Promise&lt;Array&lt;string&gt;&gt; üîí Requires scope: boards:read üö¶ Rate limit: Level 1 Retrieves users currently in a session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const onlineUsers = await miro.board.getOnlineUsers(); const usersInSession = await session.getUsers(); const unassignedUsers = onlineUsers.filter((online) =&gt; !usersInSession.some(inSession =&gt; inSession.id === online.id) ); hasJoined(...) (user: string) =&gt; Promise&lt;boolean&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:read Checks if the specified user has joined the session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const onlineUsers = await miro.board.getOnlineUsers(); const [participant] = onlineUsers // invites the online users to the session const hasJoined = await session.hasJoined(participant); if (hasJoined) { const [frame] = await miro.board.get({ type: &#x27;frame&#x27; }); await miro.board.collaboration.zoomTo(participant, frame); } on(...) ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; Subscribes to specific session events in your app: user-joined : triggered when a user joins the session. user-left : triggered when a user leaves the session. invitation-responded : triggered when user responds to an invitation for a session. Both user-joined and user-left events will receive a UserSessionEvent object as a parameter. The invitation-responded event will receive an InvitationResponseEvent object as a parameter. UserSessionEvent Property Type id string sessionId string userId string InvitationResponseEvent Property Type response { reason: &#x27;clicked-button&#x27; | &#x27;timed-out&#x27; | &#x27;clicked-outside&#x27; status : &#x27;accepted&#x27; | &#x27;rejected&#x27; user: string } TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const handlerJoined = (event: UserSessionEvent) =&gt; console.log(`User ${event.user} has joined the session.`) const handlerLeft = (event: UserSessionEvent) =&gt; console.log(`User ${event.user} has left the session.`) const handlerInvitationResponded = (event: InvitationResponseEvent) =&gt; console.log(`User ${event.user} has ${event.status} the invitation due to ${event.reason}.`) await session.on(&#x27;user-joined&#x27;, handlerJoined); await session.on(&#x27;user-left&#x27;, handlerLeft); await session.on(&#x27;invitation-responded&#x27;, handlerInvitationResponded); off(...) ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; Unsubscribes from previously subscribed session events in your app: user-joined : triggered when a user joins the session. user-left : triggered when a user leaves the session. invitation-responded : triggered when user responds to an invitation for a session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const handlerJoined = (event: UserSessionEvent) =&gt; console.log(`User ${event.user} has joined the session.`) const handlerLeft = (event: UserSessionEvent) =&gt; console.log(`User ${event.user} has left the session.`) const handlerInvitationResponded = (event: InvitationResponseEvent) =&gt; console.log(`User ${event.user} has ${event.status} the invitation due to ${event.reason}.`) await session.on(&#x27;user-joined&#x27;, handlerJoined); await session.on(&#x27;user-left&#x27;, handlerLeft); await session.on(&#x27;invitation-responded&#x27;, handlerInvitationResponded); // Unsubscribe to events await session.off(&#x27;user-joined&#x27;, handlerJoined); await session.off(&#x27;user-left&#x27;, handlerLeft); await session.off(&#x27;invitation-responded&#x27;, handlerInvitationResponded); end(...) () =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 üîí Requires scope: boards:write Ends the session and automatically clears all events associated with the session. TypeScript const session = await miro.board.collaboration.startSession({ name: &#x27;My session&#x27; }); const handler = (event) =&gt; console.log(&#x27;Session event&#x27;, { event }) await session.on(&#x27;user-joined&#x27;, handler); // events are automatically cleared up await session.end(); All properties Property Type color readonly string description readonly string id readonly string name readonly string starterId readonly string starterName readonly string end(...) () =&gt; Promise&lt;void&gt; getUsers(...) () =&gt; Promise&lt;Array&lt;string&gt;&gt; hasJoined(...) (user: string) =&gt; Promise&lt;boolean&gt; invite(...) (users: Array&lt; OnlineUserInfo &gt; | Array&lt;Array&lt; OnlineUserInfo &gt;&gt;) =&gt; Promise&lt;void&gt; join(...) () =&gt; Promise&lt;void&gt; leave(...) () =&gt; Promise&lt;void&gt; off(...) ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; on(...) ( title =&quot;name&quot;&gt;name: &#x27;user-joined&#x27;, handler: (event: UserSessionEvent) =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods invite(...) join(...) leave(...) getUsers(...) hasJoined(...) on(...) off(...) end(...) All properties