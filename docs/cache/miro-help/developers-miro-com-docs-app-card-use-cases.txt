App card use cases Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation App card use cases App card use cases Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy App card use cases Overview App cards are customizable cards that enable you to visualize and manage information from third-party tools directly on the Miro board and to seamlessly send information from a Miro board to a third-party tool. With app cards, you now have easy access to up-to-date, structured information on your Miro boards without having the need to open multiple tools or switch between various tools repeatedly. These third-party tools include but are not limited to productivity, task management, project management, portfolio management, and program management tools. The following table lists the user flows where you use the Miro Web SDK, Miro REST API, and the backend implementation that you have at your end. Use case Action Product/Infrastructure Miro app installation Install app Web SDK OAuth authorization Authorize app Required for REST API flows Backend use cases Initiate and store oAuth tokens needed to access Miro REST APIs Backend Access and store oAuth tokens needed for the third-party tool Backend Map users (User ABC on Miro = User ABC on third-party tool) Backend Map issues (App Card widget ID ABC on Miro = Issue 123 on third-party tool) Backend Third-party tool sends information about the updates to the integration backend Subscribe to webhooks of third-party tool/use their API or Web SDK Create app card in Miro Convert sticky notes, shapes, or text items to app cards Web SDK Convert cards to app cards Web SDK Import data using your app Import from app modal Web SDK Drag and drop from app panel Web SDK Edit, update, and keep app cards synced Edit details in third-party tool and sync back changes to Miro 1. Update information in third-party tool Third-party tool 2. Sync back changes to Preview REST API update method 3. Sync back changes to Detailed view Automatically through iFrame Edit app card detailed view 1. Open iFrame in Miro Web SDK 2. Sync back changes to Preview Web SDK or REST API update method App card status: Connected, disconnected, and disabled app cards User takes actions on the Miro UI, such as app card duplication by copy-pasting an app card Web SDK User deletes a task, issue, or item on the third-party tool and the associated app card status needs to be updated in Miro REST API App installation and authorization App cards need both a frontend and a backend. When you have an app that uses both the Miro WEB SDK (frontend) and the Miro REST API (backend), you must authorize the Web SDK app and also go through the OAuth 2.0 flow to generate an access token so that you can use our REST APIs. The app settings page allows you to connect the Web SDK and REST API authorization in a single step. This means that when the user authorizes the SDK app, this will also start the OAuth 2.0 flow for the REST API in parallel and is totally transparent for the users. For more information, see Enable REST API authentication from Miro&#x27;s Web SDK authorization . You can also see our Mirotone UI flow for the app installation and authorization . Create app card in Miro Convert sticky notes, shapes, or text items to app cards You can convert a selection of sticky notes, shapes, or text items on a Miro board to app cards, and in turn, create or connect with the corresponding issues, tasks, or entries in the appropriate third-party tool. This can be implemented in your app by using the Miro Web SDK methods. Figures 1 and 2 illustrate an example of an app that converts existing sticky notes on a Miro board into app cards. Figure 1. Existing sticky notes on a Miro board. Figure 2. App cards that were created by converting existing sticky note items. Here are some handy resources for the use case of converting sticky notes, shapes, or text items to app cards: Mirotone flow for converting a sticky note to an app card How-to and app example: Convert Miro sticky notes to GitHub project cards Code sample Convert cards to app cards You can convert a selection of cards on a Miro board to app cards, and in turn, create or connect with the corresponding issues, tasks, or entries in the appropriate third-party tool. This can be implemented in your app either by using the Miro Web SDK methods and REST API endpoints. Figures 3 and 4 illustrate an example of an app that converts existing card items on a Miro board into app cards. Figure 3. Existing card items on a Miro board. Figure 4. App cards that were created by converting existing card items. For more information, see the Mirotone flow for converting a card to an app card . Import data using your app Import from app modal You can create an app modal that allows your users to import a selection of cards, tasks, issues, or entries from a third-party tool and create them as app cards on a Miro board. This can be implemented in your app by using the Miro Web SDK methods and REST API endpoints. You can also implement the integration logic to ensure that the updates in the app cards and the third-party tool are always synced and up-to-date. It is implicitly understood that as the app card detailed view is an iFrame that you‚Äôve implemented and hosted, you‚Äôve also implemented the data sync logic with a third-party tool. If the fields in the app card preview are a subset of the fields in the iFrame in the app card detailed view, you need to implement the logic to sync the changes made by the user on the detailed view so that the changes are reflected on the app card preview. Figures 5, 6, and 7 illustrate an example of an app that imports existing tasks from a third-party tool and creates app card items, on a Miro board, for each of these tasks. Figure 5. Sample app that allows users to import tasks from a third-party tool and create app cards for those tasks on a Miro board. Figure 6. UI implemented as part of the app that allows users to select the tasks they want to import and create app card equivalents on a Miro board. Figure 7. App card items created on a Miro board for the tasks that the user selected to import from the third-party tool. Here are some handy resources for this use case: Mirotone flow for importing data from app modal How-to and app example: Import GitHub project cards to Miro Code sample Drag and drop from app panel You can implement an integration logic for displaying cards, tasks, issues, or entries from a third-party tool on your app panel. You can then enable your users to create an app card by simply dragging and dropping a card, task, or issue from your app panel to the Miro board. This can be implemented in your app by using the Miro Web SDK methods and REST API endpoints. You can also implement the integration logic to ensure that the updates in the app cards and the third-party tool are always synced and up-to-date. Additionally, if the fields in the app card preview are a subset of the fields in the iFrame in the app card detailed view, you need to implement the logic to sync the changes made by the user on the detailed view so that the changes are reflected on the app card preview. Figures 8 and 9 illustrate an example of an app that lets users drag and drop existing tasks from a third-party tool and instantly creates the associated app card item on a Miro board. Figure 8. App panel that contains tasks from a third-party tool. Figure 9. App card created on the Miro board after the user dragged and dropped the task from the app panel to the Miro board. For more information, see the Mirotone flow for dragging and dropping a task from an app panel . Edit, update, and keep app cards synced See the documentation on edit, update, and keep app cards synced . Duplicate app cards When copying and pasting app cards or duplicating app cards, the new app card is not considered as a clone of the original app card. At the moment, we do not support cloning of app cards. This means that the new (duplicate) app card is considered as a new instance, it has a different item ID, and the status of the new app card is set to disconnected by default. The original app card will be synced with the data source on the third-party tool, but the duplicate app card will not be synced as the connection with the third-party tool is not retained for duplicate app cards. The duplicate app card is available in read-only mode. If you want to sync data between the duplicate app card and the data in an external tool, you need to explicitly sync the app card. For more information see edit, update, and keep app cards synced . Figure 10 illustrates an example of an existing app card A that was copy pasted and therefore app card B was created as a duplicate of app card A. Figure 11 illustrates the updates for app card A reflected on the Miro board, and in turn the update is also synced to the third-party tool assuming that the third-party integration logic is in place. Figure 11 also illustrates the updated details of app card A were not propagated to the duplicate app card B on the Miro board and neither on the third-party tool as app card B is a completely new app card item. There is no linking or correlation between an original app card and a duplicated app card therefore the updates are not propagated from an original app card to a duplicate app card. Figure 10. Sample of an original app card A that is copy pasted which creates the duplicate app card B. Figure 11. App card A title is updated on the Miro board while app card B title remains the same and is in a disconnected state. App card status: Connected, disconnected, and disabled app cards See the documentation on app card status . See also App card Web SDK reference App card REST API reference Edit, update, and keep app cards synced . Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Updated almost 2 years ago What&#x27;s next Learn how to use app cards: edit, update, and sync them. Edit, update, and keep app cards synced Table of Contents Overview App installation and authorization Create app card in Miro Convert sticky notes, shapes, or text items to app cards Convert cards to app cards Import data using your app Import from app modal Drag and drop from app panel Edit, update, and keep app cards synced Duplicate app cards App card status: Connected, disconnected, and disabled app cards See also