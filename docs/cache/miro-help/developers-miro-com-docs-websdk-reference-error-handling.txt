Error handling Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Error handling Error handling Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Error handling When the Miro Web SDK handles input that it cannot process correctly, it throws an error. Error messages help you understand what went wrong, where, and why. They give you context to make it easier to troubleshoot issues. This is a reference overview of error messages that the Miro Web SDK can throw to notify about a failed operation. Error messages are grouped in sections: Authorization Error notifications ranging from missing permissions, to users rejecting to grant the required permissions to an app during the installation, to users lacking authorization to interact with apps or boards. Installation Error notifications about issues occurring when installing an app to the board. Initialization Error notifications about failed initialization of the Web SDK, of the instance of an item, and so on. They can occur when a command initiates an action on an object that isn&#x27;t yet available on the board. User interface Error notifications about a failed interaction with a UI component of the board. For example: the board UI may be unresponsive, or the app may attempt to interact with an element that isn&#x27;t associated with the ID of the app. CRUD operations Error notifications about failed attempts to create, read, update, or delete a board item or a resource. Invalid input Error notifications about failed operations because of passing invalid arguments. For example: incomplete, malformed, or outside the range of the expected values. Rate limiting Errors notifications about your app using up allocated resources too quickly. Check how you can mitigate the issue by reducing the number of calls per minute or per hour. Backend Error notifications about failed data exchange with the server. Unknown ID Errors notifications about messing IDs to identify a board item or an app. If the Miro Web SDK attempts to perform an action on, or exchange data with an item or an app, it identifies the target object by its unique ID. If the ID reference isn&#x27;t valid, or if it&#x27;s not found, the operation fails. Unsupported Errors notifications about performing actions that aren&#x27;t supported. For example: actions that don&#x27;t comply with existing constraints, or that aren&#x27;t available. Unknown error In this case, the error message includes the original payload to provide a starting point for troubleshooting . Authorization Error message Description The authorization request failed, or the user rejected it. The end user didn&#x27;t complete installing the app to the board when prompted through the UI. Or: the app wasn&#x27;t granted the required permissions. Or: the app authorization information is invalid. Cannot execute ${command}, because the ${appId} app doesn&#x27;t have the following permission: ${requiredScope}. The app wasn&#x27;t granted a permission that enables executing the specified command. For example: Commands that access board items require boards:read Commands that modify board items require boards:write Commands that start and stop audio recording require microphone:listen The user doesn&#x27;t have the necessary permissions in the team to obtain an ID token. The user trying to access the app lacks one or more required permissions that the app needs to work as expected. The user doesn&#x27;t have the necessary permissions to hide content in frames. The showContent property of frame items requires permissions that are available to board owners and co-owners on a Consultant or Enterprise plan. The user is unauthorized in Miro. Only authorized users can obtain ID tokens. The user trying to access the app hasn&#x27;t been authorized as a Miro user. The (${name}) feature is available only on paid plans. To use this feature, upgrade your current plan to a paid one. The feature that you&#x27;re trying to use isn&#x27;t available on your current plan. Upgrade to a paid plan to access it. The current user doesn&#x27;t have enough permissions to access the feature ${feature}. The feature requires additional permissions that the current user hasn&#x27;t been granted. The user needs to first request the additional permissions, and then they can access the feature. Installation Error message Description The &quot;${appName}&quot; app (${appId}) isn&#x27;t installed for the &quot;${teamName}&quot; team. To use the app with this team, install it for them. The currently selected team cannot access the app. Install it for the team to make it available. Initialization Error message Description The Web SDK hasn&#x27;t initialized. The Miro Web SDK hasn&#x27;t initialized on the board, and it&#x27;s not available. The item instance hasn&#x27;t initialized. The app attempted to interact with the instance of an item that hasn&#x27;t initialized on the board, and that&#x27;s not available. The drag state hasn&#x27;t initialized. The app attempted to drag a board item. However, the drag state hasn&#x27;t initialized on the board, and it&#x27;s not available. Cannot execute the command, because the app iframe hasn&#x27;t initialized. The iframe that the app controls hasn&#x27;t initialized on the board, and it&#x27;s not available. Cannot open the modal or the panel, because no iframe is registered with the ${type}. The app attempted to open an iframe to display a modal or a panel. However, no iframe is registered to interact with the app and the Miro Web SDK 2.0. Cannot load the app, because the method to load it is called on a destroyed app instance. It wasn&#x27;t possible to load and start the app, because the app instance no longer exists. User interface Error message Description The app is trying to close a modal, but there&#x27;s no open modal associated with this app. Either the app attempted to close a modal that the app cannot interact with. Or there are currently no open modals that the app can close. The modals that an app can interact with must be registered with the app. The app is trying to close a panel, but there&#x27;s no open panel associated with this app. Either the app attempted to close a panel that the app cannot interact with. Or there are currently no open panels that the app can close. The panels that an app can interact with must be registered with the app. Cannot open the panel. The board GUI may be inactive or hidden. Since the board UI is inactive or hidden, the panel toolbar is not available. Therefore, it&#x27;s not possible to trigger opening a panel. You can drag on the board only items from panels that are opened with the &#x27;openPanel&#x27; method. Apps must open a panel with the openPanel method. Draggable items can be included only in panels opened with openPanel . CRUD operations Error message Description Cannot set item ${id} as a child, because the item isn&#x27;t inside the parent frame. The app attempted to set an item as a child of a parent frame. However, the item the ID refers to isn&#x27;t inside the target frame. Therefore, it cannot be a child of the frame. Cannot set item ${id} as a child, because the item doesn&#x27;t exist. The app attempted to set an item as a child of a parent frame. However, the item the ID refers to doesn&#x27;t exist on the board. Cannot move the ${type} item with ID (${id}) to the specified location, because it&#x27;s a child of another board item. Remove the child item from its parent, and then move it. The app attempted to move an item to a new position on the board. The operation failed, because the item is a child of a parent item. First, remove the child item from its parent. Then, the app can set new coordinates for the item, and sync it to update its position on the board. Cannot create the image. The app attempted to create an image item, but it failed to correctly retrieve the image the URL points to . Cannot upload the image: ${msg}. The app attempted to update an image item, but it failed to correctly retrieve the updated image the URL points to . Cannot change this property, because it&#x27;s read-only: &quot;${prop}&quot; The app attempted to update a property that is available with read-only access. Cannot remove the ${type} item (id=${id}). The app attempted to remove a board item, but the item the ID refers to may not exist on the board, or it may not be possible to retrieve it. The title must be unique. Specify a different title for the tag. The title that the app attempted to assign to a tag already exists. Cannot create more tags. The board has reached the limit of ${limit} tags. It&#x27;s not possible to have more than 100 tags in total on a board . The canvas API returned an unknown color: ${color}. The backend returned a color name for the tag that isn&#x27;t included in the list of allowed tag colors . Cannot resolve the embed URL ${url}. Please try again later. It&#x27;s not possible to correctly resolve the URL pointing to the content of an embed item. This may be a temporary issue. Retry the operation at a later time. Cannot change parent, because item ${id} is locked by another client. The app attempted to update a frame containing one or more child items. At the same time, a different user accessed a child item to modify it. When the user finishes editing the child item, it is unlocked. Then it&#x27;s possible to update the parent frame. Cannot commit the update, because item ${id} is locked by another client. The app attempted to update an item. At the same time, a different user accessed the same item to modify it. When the user finishes editing the item, it is unlocked. Then it&#x27;s possible to update it. The data storage limit for &quot;${featureName}&quot; has been exceeded. The app attempted to store more metadata than the allowed limit to either appdata or item metadata . For more information, see setAppData and setMetadata Cannot attach a locked item to a parent, because another client is locking item ${id}. You&#x27;re trying to attach an item to a parent. However, the item is currently in a locked state. \nAnother user or app may be locking the item; therefore, the operation fails. Cannot detach a locked item from its parent, because another client is locking item ${id}. You&#x27;re trying to detach an item from its parent. However, the item is currently in a locked state. \nAnother user or app may be locking the item; therefore, the operation fails. Cannot update the properties of item ${id}, because another client is locking at least one of the item&#x27;s children: You&#x27;re trying to update a parent item. However, one or more child items of the parent are currently in a locked state. \nAnother user or app may be locking the child items; therefore, the operation fails. Cannot commit the update, because another client is locking item ${id}. You&#x27;re trying to update an item. However, the item is currently in a locked state. \nAnother user or app may be locking the item; therefore, the operation fails. `Cannot resize the frame (${id}) to the specified size, because one or more children would exist outside the Invalid input Error message Description The payload isn&#x27;t valid, because the &#x27;type&#x27; property is missing. The app attempted to pass a board item as an argument, but the item lacked the required type property, which defines the specific type of board item. The ${prop} style property is unknown. The app attempted to pass a board item as an argument, but the item includes a property that doesn&#x27;t belong to the item, or that the Web SDK cannot recognize. The value of the ${prop} style property isn&#x27;t valid. The app attempted to pass a board item as an argument, but the item includes a property with an invalid value. &quot;svgIcon&quot; isn&#x27;t a valid SVG element: ${svgIcon}. The app attempted to upload or retrieve an SVG file that failed validation: it may be malformed or corrupt. The URL isn&#x27;t valid: ${url}. The URL that the app interacted with isn&#x27;t a valid URL. The URL for the ${name} app isn&#x27;t valid. The URL must start with &quot;https&quot; or &quot;http://localhost&quot;. The URL you set on the app settings page under App URL must use the HTTPS transport protocol. HTTP is allowed only when the URL points to a local environment. The date format isn&#x27;t valid. Specify dates as YYYY-MM-DD. Example: 2021-08-29 The date assigned to the dueDate property of the card item must be in the YYYY-MM-DD format. The specified item has no valid ID. Cannot perform actions on items with no valid ID. The app attempted to perform an action‚Äîfor example: update or remove‚Äîon a board item whose ID is invalid. The item may no longer be available on the board. This is an unexpected item type: ${widgetType} The board item that was returned doesn&#x27;t correspond to the expected type for the item. The argument you&#x27;re passing isn&#x27;t valid. Pass the item(s) you want to zoom to. The app attempted to zoom to one or more board items. However, the arguments that were passed to the zoomTo method weren&#x27;t valid board items. You&#x27;re passing one or more frames to board.${command}(). Frames cannot move to the back or the front. Other supported items can. Pass an item that supports sending to front and moving to back. It&#x27;s not possible to move frames to the front or to the back. Pass one or more board items other than frame to the bringToFront or sendToBack methods. Users cannot follow themselves. A user cannot be both the follower and the followed user at the same time. The current user is already following another user. To start following another user, stop the current following session first, and start a new one. You can follow only one user at a time during a given following session. To follow a different user: Unfollow the user in the current session. Start a new session to follow the different user. There&#x27;s no following session in progress. You&#x27;re currently not following any user. To check if a following session is in progress: invoke isFollowing . The user you&#x27;re trying to follow isn&#x27;t online in the current session. The active following session is following a user who isn&#x27;t online on the board. Set either position or snapTo. It&#x27;s not possible to set both properties at the same time. When setting the location of start and end terminal points of a connector, define either position coordinates, or snapTo predefined snap points. snapTo cannot be undefined. snapTo accepts values from a list of options. \nYou cannot assign undefined as a value. Rate limiting Error message Description The API rate limit was exceeded. Requests can use up to ${limit} credits in total per hour. The app made too many calls to the Miro Web SDK. Wait until new credits are issued. The API rate limit was exceeded. Requests can use up to ${limit} credits in total per minute. The app made too many calls to the Miro Web SDK. Wait until new credits are issued. Backend and server Error message Description An error occurred while retrieving an ID token. It&#x27;s not possible to correctly retrieve the app ID token from the server. Cannot upload the ${previewUrl} previewUrl image. It&#x27;s not possible to successfully upload an image to update the preview of an embed item. Unknown ID Error message Description Cannot update the app, because the corresponding client ID ${pluginId} wasn&#x27;t found. The Miro Web SDK identifies apps by their client ID . No client ID was retrieved for the app that attempted to update. Therefore, it&#x27;s not possible to apply the update. Cannot retrieve app data for this app. The app doesn&#x27;t have a valid client ID. The Miro Web SDK identifies apps by their client ID . No valid client ID was retrieved for the app. Therefore, it&#x27;s not possible to retrieve any app data. Cannot set app data for this app. The app doesn&#x27;t have a valid client ID. The Miro Web SDK identifies apps by their client ID . No valid client ID was retrieved for the app. Therefore, it&#x27;s not possible to set any data for the app. Cannot retrieve metadata for this item. The app doesn&#x27;t have a valid client ID. The Miro Web SDK identifies apps by their client ID . No valid client ID was retrieved for the app. Therefore, it&#x27;s not possible to retrieve any board item metadata that the app previously set. Cannot find the item with ID: ${id}. It wasn&#x27;t possible to retrieve the board or the tag item the ID refers to. Unsupported Error message Description Unsupported: during creation you can set &quot;width&quot;, but not &quot;height&quot;. It&#x27;s possible to set only width when creating the board item. height is calculated automatically, based on width . Change either &quot;width&quot;, or &quot;height&quot;. It&#x27;s not possible to change both properties at the same time. It&#x27;s possible to change either width , or heigth when updating the board item. You can update both properties one at a time, in two subsequent calls. Set either ${cap}.position, or ${cap}.snapTo. It&#x27;s not possible to set both properties at the same time. You can set the connector cap on the border of the shape by either defining x and y position , or by using a predefined snapTo value. You cannot assign values to both properties. ${cap}.snapTo cannot be undefined. If you set the connector cap on the border of the shape by using snapTo , you must assign the property one of the following values: top left bottom right auto . The specified embed type is unsupported. Supported embed types: video, audio, and web pages. It&#x27;s possible to generate embed items containing video, audio, or a web page (URL link). Embed items don&#x27;t support other content types. This is an unknown shape type: ${shape}. Specify a supported shape type. The geometric shape type isn&#x27;t one of the supported ones for shape items. Assign to shape.shape one of the supported geometric shape values. sync() not supported for shape &#x27;${shape}&#x27;. You tried to update the properties of an experimental shape . \n \nIn the experimental namespace, some shapes may be available as read-only objects: It&#x27;s possible to Unknown error Error message Description An unknown error occurred: ${payload}. An unknown error was thrown. The original payload is included to provide a starting point for troubleshooting. Updated about 1 year ago Table of Contents Authorization Installation Initialization User interface CRUD operations Invalid input Rate limiting Backend and server Unknown ID Unsupported Unknown error