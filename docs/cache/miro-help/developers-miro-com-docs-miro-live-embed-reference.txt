Reference Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Reference Reference Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman сollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Reference A reference with an overview of the arguments of the miroBoardsPicker.open method: what they are, what values they accept, and how to pass them when using the method. Integrating Miro’s BoardsPicker into your website enables site users to collaborate and share ideas with Miro boards in real time. BoardsPicker enables users to embed and share the details of their boards on your website for free, without the need for authentication protocols, such as Open Authorization (OAuth) or APIs. To get an idea of the possibilities, have a look at the Embed Miro section on the Miro Marketplace . BoardsPicker reference The BoardsPicker component has a core method: miroBoardsPicker.open . This reference gives an overview of the arguments that the miroBoardsPicker.open method can take: what they are, what types and values they accept, what they do, and how to pass them when using the method. The miroBoardsPicker.open method takes a single argument: options . The options object has the following properties: clientId action success cancel error iframeContainer windowRef allowCreateAnonymousBoards getToken clientId (required) The unique Client ID of the app that requests user authorization. To obtain an app client ID: In Miro, go to your apps. In the Created apps section, click the app that you want to obtain the client ID for. The client ID is displayed in the App Credentials section. Example: JavaScript clientId: &quot;3074451123581321347&quot; action (required) Defines the way in which BoardsPicker enables selecting and sharing a board when it&#x27;s embedded in a website. Allowed options: select access-link Example: JavaScript action: &quot;select&quot;, // Or: &quot;access-link&quot; select action: &quot;select&quot; enables selecting a board to share and embed it on a website. If the request is successful, the function passed to the success property returns JSON-formatted details of the board selected with the BoardsPicker component. Example response: JavaScript selectedBoard = { &quot;id&quot;:&quot;uXjVOD9zD_k=&quot;, &quot;name&quot;:&quot;Demo App&quot;, &quot;viewLink&quot;:&quot;https://miro.com/app/board/uXjVOD9zD_k=&quot; } id is the unique identifier of the selected board. name is the human-friendly name of the board. viewLink is a URL link to the selected board. You can pass it to an iframe to embed the board on a website. For more information about the response to a call with action: &quot;select&quot; , see Response for action: &#x27;select&#x27; . access-link action: &quot;access-link&quot; enables selecting an access level to the embedded board that&#x27;s being shared. The selected access level applies to all users accessing the embedded board, regardless of their individual, specific user access rights. If action is set to access-link , the BoardsPicker response includes the same properties that the select action type returns, as well as the accessLink , accessLinkPolicy , and embedHtml additional properties: JavaScript selectedBoard = { &quot;id&quot;:&quot;uXjVOD9zD_k=&quot;, &quot;name&quot;:&quot;Demo App&quot;, &quot;viewLink&quot;:&quot;https://miro.com/app/board/uXjVOD9zD_k=...&quot;, &quot;accessLink&quot;:&quot;https://miro.com/app/live-embed/...&quot;, &quot;accessLinkPolicy&quot;:&quot;EDIT&quot;, &quot;embedHtml&quot;:&quot;&lt;iframe class=\&quot;miro-embedded-board\&quot; src=\&quot;https://miro.com/app/...&quot;&gt;&lt;/iframe&gt;&quot; } accessLink defines the URL link pointing to the selected board. accessLinkPolicy sets the user access level for the shared embedded board. Allowed values, from most to least restricted: private comment view edit embedHtml is an iframe element that enables linking to the selected board so that you can embed it directly into your website. This iframe element must include the miro-embedded-board CSS class. For more information about the response to a call with action: &quot;access-link&quot; , see Response for action: &#x27;access-link&#x27; . success (required) success takes a callback function as an argument. The callback executes when a user successfully completes a board selection and sharing operation with BoardsPicker. When a user selects a board, and they successfully complete an interaction with BoardsPicker, the callback returns the details of the specified board. Example: JavaScript success: function(selectedBoard) { console.log(selectedBoard) }, cancel (optional) cancel takes a callback function as an argument. The callback executes when a user cancels the BoardsPicker interaction, without completing the operation. When a user cancels the operation, they close the BoardsPicker component without selecting a board. Example: JavaScript cancel: function() { // Do something }, error (optional) error takes a callback function as an argument. The callback executes when a user cannot successfully complete a board selection and sharing operation with BoardsPicker. This scenario can occur when BoardsPicker encounters an issue that prevents users from successfully completing the interaction, and the operation throws an error. Example: JavaScript error: function(err) { console.log(err) // Do something... }, iframeContainer (optional) iframeContainer enables opening BoardsPicker in the specified HTML container element. It can take one of the following values: The ID of the item containing BoardsPicker. Pass the ID value as a string. The instance of the HTMLElement containing BoardsPicker. ℹ️ Note: Define either iframeContainer , or windowRef . You cannot use both at the same time. Example: JavaScript function onClick() { miroBoardsPicker.open({ clientId: &#x27;...&#x27;, iframeContainer: &#x27;myContainer&#x27;, // HTMLElement or item ID. // ... Other parameters }) } windowRef (optional) windowRef enables opening BoardsPicker in the specified open window instance. You first need to open the target window, and then you can set it as a container for BoardsPicker. windowRef works only if iframeContainer isn&#x27;t used. ℹ️ Note: Define either iframeContainer , or windowRef . You cannot use both at the same time. Example: JavaScript function onClick() { // Calculate dimensions and position of the pop-up window. const pos = {left, top} const size = {width, height} const windowRef = window.open( &#x27;&#x27;, &#x27;_blank&#x27;, `width=${size.width},height=${size.height},left=${pos.left},top=${pos.top},menubar=0,toolbar=0,location=0,personalbar=0,status=0` ) miroBoardsPicker.open({ clientId: &#x27;...&#x27;, windowRef: windowRef, // Provide the reference of the container window. // ... Other parameters }) } allowCreateAnonymousBoards (optional) If allowCreateAnonymousBoards: true , it allows unregistered users to create and interact with a new temporary Miro board. When it&#x27;s set to true , you must also pass a valid access token with getToken . Example: JavaScript function onClick() { miroBoardsPicker.open({ clientId: &#x27;...&#x27;, // 1) Put your &#x27;clientId&#x27; here. action: &#x27;access-link&#x27;, allowCreateAnonymousBoards: true, //2) Enable this option getToken: () =&gt; getTokenFromServer(), // Provide token in async way success: data =&gt; { console.log(&#x27;on success&#x27;, data) document.querySelector(&#x27;#container&#x27;).innerHTML = data.embedHtml }, error: e =&gt; { console.log(&#x27;on error&#x27;, e) }, cancel: () =&gt; { console.log(&#x27;on cancel&#x27;) }, windowRef: windowRef, // Link to an open popup window }) } getToken (required if allowCreateAnonymousBoards: true . Otherwise, optional) When using temporary boards, you must provide a JSON Web Token (JWT) from your application’s backend to the BoardsPicker component. Example: JavaScript // Type: () =&gt; Promise&lt;string&gt; function getTokenFromServer() { //Get JWT token from your server. Read more about JWT https://jwt.io/ return fetchPost(&#x27;https://example.com/token-for-integration-with-miro&#x27;) } 🚧 If your website has a policy for blocking Referer information, boards embedded with the access-link action type don’t load. To solve the issue, you can override the referrerpolicy attribute inside the iframe HTML element on your site. Example: HTML &lt;iframe src=&quot;https://miro.com/app/...&quot; referrerpolicy=&quot;no-referrer-when-downgrade&quot;&gt;&lt;/iframe&gt; See also Live Embed with a direct link Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Updated over 1 year ago What&#x27;s next Explore the Live Embed tutorials and start embedding Miro boards. Live Embed tutorials Table of Contents BoardsPicker reference clientId action success cancel error iframeContainer windowRef allowCreateAnonymousBoards getToken See also