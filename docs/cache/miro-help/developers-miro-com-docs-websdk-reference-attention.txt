Attention Jump to Content Documentation Resources Marketplace Community Documentation API Reference Changelog v2.0 Documentation Resources Marketplace Community Build your app Documentation Build your app Moon (Dark Mode) Sun (Light Mode) main Documentation Attention Attention Search Platform Essentials Introduction Web SDK vs REST API Getting started Developer team Create a Developer team Change the Developer team name Delete the Developer team Migrating a developer app App manifest Concepts Boards Board items Children inside parent items App card App card use cases Edit, update, and keep app cards synced Backend flow for app cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Enable 2-way sync between app cards and GitHub cards Card Connector Embed Events Frame Image Mind map (Experimental) Preview Shape Sticky note Storage Text Tag Migrate from v1 to v2 Web SDK comparison guide Web SDK reference guide REST API comparison guide REST API reference guide Web SDK Introduction Miro Web SDK and board items App panels and modals Guided onboarding Onboarding essentials 1) Create your first board item with the Web SDK 2) Update an item&#x27;s properties with `sync()` 3) Run your first app in Miro 4) Interact with your app in Miro 5) Join the conversation 6) Install a Marketplace app 7) Add Mirotone to an existing app Onboarding wrap-up Challenge: Where&#x27;s Miro? Submit and share your app 1) Share an app outside of a developer team 2) Understand app submission requirements 3) Publish a Miro app 4) Share your ideas with us Submit and share wrap-up In-depth training modules 1) Create your 1st Miro app locally 2) Build a full-stack Miro app Getting started Quickstart Video: try the Web SDK in less than 1 minute Build your first Hello World app Build a Web SDK app Build a REST API app Build a full-stack (Next.js) app Enable running apps as instant apps How-Tos &amp; tutorials Use the browser developer tools with the Miro Web SDK Update and sync item properties Add icon click to your app Add an icon to your app Add drag and drop to your app Add permission scopes to your app Add search and filter to your app Build a calendar app in Miro Convert sticky notes to shapes Create mind map from CSV Add custom actions to your app Deploy a Miro app Log in to a third-party service using OAuth Enable 2-way sync between app cards and GitHub cards Enable REST API authentication from Miro&#x27;s Web SDK authorization Integrate a digital asset manager in Miro Convert frame coordinates to board coordinates SVG app icon optimization guidelines Upload images and SVGs as base64-encoded strings Connect the Miro Web SDK to a backend (Firebase) Video: Deploy a Next.js App on AWS Amplify Video: Integrate OpenAI + Miro Build collaborative app experiences Display banner/modal on a Miro board using DynamoDB Display banner/modal on a Miro board using AWS S3 Reference Interact with boards and items Rate limiting Error handling Board Card Board UI Viewport Notifications App card Experimental Realtime Events Tag Custom Action Management Shape Frame Image Sticky Note Shape experimental Embed Connector Unsupported Mindmap Node Preview Text Storage collection Storage Collaboration Session Attention Group History REST API Introduction Getting started Quickstart Video: try the REST API in less than 3 minutes Access Enterprise APIs Build your first Hello World REST API app Getting started with webhooks Webhooks using Python How-To&#x27;s &amp; tutorials Get started with OAuth 2.0 and Miro Enable REST API authentication from Miro&#x27;s Web SDK authorization Access Enterprise APIs Create sticky notes and tags Convert code to diagram with Miro PlantUML Get user info and email Create an image from a data URL source Work with connectors Securely manage boards and teams at scale Enable 2-way sync between app cards and GitHub cards Set up a test endpoint for webhooks with Pipedream Troubleshoot OAuth2.0 Video: OAuth Essentials for Frontenders Miro Node.js client Miro Node.js client Readme Miro Node.js client quickstart for task automation Miro Node.js client quickstart with OAuth and Express Implement data storage Reference documentation Miro Python client Reference Marketplace Miro Marketplace Get ready for Marketplace App design guidelines App security guidelines App development policy App listing guidelines Build and deploy your app Your Marketplace profile Publish your app Monetization Monetization with Miro + Stripe Monetization with Miro + Salable Provide pricing details for your app Developer benefits App Metrics SCIM API Introduction User lifecycle management Getting started Concepts Rate limits Errors Reference Users Groups Discovery features Live Embed Introduction Getting started Authentication oEmbed support How-Tos &amp; tutorials Live Embed with a direct link Live Embed view-only mode Live Embed with BoardsPicker for registered users Live Embed with BoardsPicker for unregistered users Reference Resources Resources overview Changelog Roadmap Mirotone Miro app examples Miro Postman —Åollection Policies Developer terms of use App development policy Lifecycle policy Deprecation policy Attention Experimental attention is the namespace that groups methods that apps can use to focus board attention on specific online users. Through miro.board.collaboration.attention , apps can access methods to: Start following another user on the board. Make a list of users follow another specified user on the board. Bring a list of users to the current user on the board. Stop following another user on the board. Stop a list of users from following a specified user on the board. Check if a user is already following another user on the board. Get details about the user that is currently being followed on the board. When a user follows another user on the board, the follower sees the same viewport as the user they are following. This can be convenient in a scenario where a user wants to view or participate in another user&#x27;s actions on the board. For example, during a presentation; or when a moderator wishes to check a user&#x27;s work on the board. To make the feature available on a board, the follower needs to install a dedicated app that manages attention. follow : initiates the process of following a specified online user(s), referred to as the followed user. unfollow : is used to stop a user(s) from following another user. isFollowing : checks whether the current user is already following another user on the board. getFollowedUser : if a user is following another user, the method returns the followed user details. Methods follow(...) (followee: OnlineUserInfo , options?: FollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 Experimental The follow method is part of the miro.board.collaboration.attention namespace. It initiates the process of following a specified online user, referred to as the followed user . Here&#x27;s an example of how to use this method: JavaScript await miro.board.collaboration.attention.follow(followedUser, sessionOptions); Typically, the user who initiates the following is considered the follower . However, when sessionOptions are provided, the followers are determined by the sessionOptions . The sessionOptions parameter can include an array of followers . This allows facilitators to create a custom list of users who will follow the specified followee user. All followers should be in a collaboration session initiated by this app. ‚ÑπÔ∏è Note: Users cannot follow themselves: a user cannot be both the follower and the followed user simultaneously. If the promise doesn&#x27;t return within 3 seconds, the method times out. An error occurs if the followers list contains the initiating follower or if any listed followers are not part of the collaboration session. To start a following session, a dedicated attention manager app must be installed. This app is responsible for managing the collaboration session and ensuring that all followers are part of the session. Follow example: TypeScript // Get current online users. const onlineUsers = await miro.board.getOnlineUsers(); // Retrieve the user that you want to follow. const followedUser = onlineUsers.find((user) =&gt; user.name.includes(&quot;Sara&quot;)); // The current user (follower) starts following the user called &quot;Sara&quot; (followed user or followee). await miro.board.collaboration.attention.follow(followedUser); Initiate a following session for a group of users to collectively follow a specific user: TypeScript // Get current online users. const onlineUsers = await miro.board.getOnlineUsers(); // Retrieve the user that you want to follow. const followedUser = onlineUsers.find((user) =&gt; user.name.includes(&quot;Sara&quot;)); // Specify the followers. const followers = onlineUsers.filter( (user) =&gt; user.name.includes(&quot;John&quot;) || user.name.includes(&quot;Alice&quot;) ); // John and Alice (followers) are set to follow Sara (followed user or followee). // Note: All followers must be in a collaboration session. await miro.board.collaboration.attention.follow(followedUser, { followers }); Bring several users to the current user example (set of users will follow current user): TypeScript const currentUser = await miro.board.getUserInfo(); // Get the current user. const onlineUsers = await miro.board.getOnlineUsers(); // The current user (follower) starts a following session. // John and Alice, will follow the current user. const followers = onlineUsers.filter( (user) =&gt; user.name.includes(&quot;John&quot;) || user.name.includes(&quot;Alice&quot;) ); // Note: All followers must be in a collaboration session. await miro.board.collaboration.attention.follow(currentUser, { followers }); unfollow(...) (options?: UnfollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; üö¶ Rate limit: Level 1 Experimental The unfollow method is used to stop a user from following another user. If a user is currently following another user, invoking this method will stop the following session. If there&#x27;s no following session in progress, the method returns an error . Before invoking unfollow , check if a following session is in progress by running isFollowing . The unfollow method includes support for an additional optional sessionOptions parameter, which enhances its functionality: You can include an array of followers and followee in the sessionOptions parameter. This provides more flexibility and control over the unfollowing process. An error will not occur if the followee is included in the followers array or if there is no ongoing following session. This ensures a smoother handling of the unfollow operation, preventing disruptions in the execution flow. If the sessionOptions parameter is provided, the unfollow operation will be executed only for the specified list of followers and followee , not the current user. This allows developers to tailor the unfollow action to a specific set of users, offering a more customized and targeted approach. However, an error will occur if some of the followers are not in a collaboration session. It&#x27;s important to ensure that all followers are in a collaboration session before attempting to unfollow. Example of unfollowing without specifying the followers: TypeScript // Get the current user. const currentUser = await miro.board.getUserInfo(); // The current user initiates the unfollow operation. await miro.board.collaboration.attention.unfollow(); Example of unfollowing with specifying the followers: TypeScript // Get the current user. const currentUser = await miro.board.getUserInfo(); // Example with specifying followers: const followers = onlineUsers.filter( (user) =&gt; user.name.includes(&quot;John&quot;) || user.name.includes(&quot;Alice&quot;) ); // The current user initiates the unfollow operation for John and Alice. // The specified followers will stop following the followee (if they are following). // Each follower should be in collaboration session, otherwise error will occur. await miro.board.collaboration.attention.unfollow({ followers, followee: currentUser, }); isFollowing(...) () =&gt; Promise&lt;boolean&gt; üö¶ Rate limit: Level 1 Experimental Checks whether the current user is already following another user on the board. If the user is following another user, the method returns true . Otherwise, it returns false . Example: TypeScript // Check if the current user is following another user. const isFollowing = await miro.board.experimental.attention.isFollowing(); // Get currently online users. const onlineUsers = await miro.board.getOnlineUsers(); // You can implement custom logic to return the user object // that you want to assign to the follower as a followed user. const followedUser = onlineUsers.find((user) =&gt; user.name.contains(&#x27;Sara&#x27;)); // In case the session starter is already following a user other than &quot;Sara&quot;: if (isFollowing) { // Get the details of the current followed user. const currentFollowedUser = await miro.board.experimental.attention.getFollowedUser(); if (currentFollowedUser.id !== followedUser.id) { // Unfollow the current followed user. await miro.board.experimental.attention.unfollow(); } } // Start following the user called &quot;Sara&quot;. await miro.board.experimental.attention.follow(followedUser); getFollowedUser(...) () =&gt; Promise&lt; OnlineUserInfo &gt; üö¶ Rate limit: Level 1 Experimental If a user is following another user, the method returns the followed user details. If there&#x27;s no following session in progress, the method returns an error . Before invoking getFollowedUser , check if a following session is in progress by running isFollowing . Example: TypeScript // Check if the current user is following another user. const isFollowing = await miro.board.experimental.attention.isFollowing(); // Get currently online users. const onlineUsers = await miro.board.getOnlineUsers(); // You can implement custom logic to return the user object // that you want to assign to the follower as a followed user. const followedUser = onlineUsers.find((user) =&gt; user.name.contains(&#x27;Sara&#x27;)); // In case the session starter is already following a user other than &quot;Sara&quot;: if (isFollowing) { // Get the details of the current followed user. const currentFollowedUser = await miro.board.experimental.attention.getFollowedUser(); if (currentFollowedUser.id !== followedUser.id) { // Unfollow the current followed user. await miro.board.experimental.attention.unfollow(); } } // Start following the user called &quot;Sara&quot;. await miro.board.experimental.attention.follow(followedUser); Type definitions OnlineUserInfo { title =&quot;id&quot;&gt;id: string; name: string } FollowUserSessionsOptions { followers?: Array&lt; OnlineUserInfo &gt; } UnfollowUserSessionsOptions { followee: OnlineUserInfo ; followers: Array&lt; OnlineUserInfo &gt; } All properties Property Type follow(...) (followee: OnlineUserInfo , options?: FollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; getFollowedUser(...) () =&gt; Promise&lt; OnlineUserInfo &gt; isFollowing(...) () =&gt; Promise&lt;boolean&gt; unfollow(...) (options?: UnfollowUserSessionsOptions ) =&gt; Promise&lt;void&gt; Updated about 1 year ago Table of Contents Methods follow(...) unfollow(...) isFollowing(...) getFollowedUser(...) Type definitions All properties