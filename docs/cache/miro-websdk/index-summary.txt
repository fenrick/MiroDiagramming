### Board
export interface BoardBase {
        sync(item: BaseItem): Promise<void>;
    }
    export interface Experimental extends BoardBase {
        readonly action: CustomActionManagement;
        readonly history: History;
        get(filter: GetFilter & {
            type: 'mindmap_node';
        }): Promise<MindmapNode[]>;
        get(filter?: GetFilter): Promise<Item[]>;
        select(filter: GetFilter & {
            type: 'mindmap_node';
        }): Promise<MindmapNode[]>;
        select(filter?: GetFilter): Promise<Item[]>;
        deselect(filter: GetFilter & {
            type: 'mindmap_node';
        }): Promise<MindmapNode[]>;
        deselect(filter?: GetFilter): Promise<Item[]>;
        getSelection(): Promise<Item[]>;
        getVotingResults(): Promise<VotingResult[]>;
        sync(item: BaseItem): Promise<void>;
        createMindmapNode(props?: MindmapCreateNodeProps): Promise<MindmapNode>;
        createShape(props?: ShapeProps): Promise<Shape>;
        remove(input: BaseItem): Promise<void>;
        findEmptySpace(dimensions: Rect & {
            offset?: number;
        }): Promise<Rect>;
    }
}
declare module "@mirohq/websdk-types/experimental/features/customAction" {
    import { Commander } from "@mirohq/websdk-types/core/index";
    import { CommanderSymbol } from "@mirohq/websdk-types/core/symbols";
    import { ExperimentalClientItem } from "@mirohq/websdk-types/experimental/api/client";
    import { ExperimentalCommandType } from "@mirohq/websdk-types/experimental/api/commands";
    import { CustomActionManagement as ICustomActionManagement, CustomAction } from "@mirohq/websdk-types/experimental/api/customActions";
    export class CustomActionManagement implements ICustomActionManagement {
        protected [CommanderSymbol]: Commander<ExperimentalCommandType>;
        constructor(commander: Commander<ExperimentalCommandType>);
        register<T extends ExperimentalClientItem>(customAction: CustomAction<T>): Promise<CustomAction<T>>;
        deregister<T extends ExperimentalClientItem>(eventName: CustomAction<T>['event']): Promise<void>;
    }
}
declare module "@mirohq/websdk-types/experimental/features/history" {
    import { Commander } from "@mirohq/websdk-types/core/index";
    import { CommanderSymbol } from "@mirohq/websdk-types/core/symbols";
    import { ExperimentalCommandType } from "@mirohq/websdk-types/experimental/api/commands";
    import { History as IHistory } from "@mirohq/websdk-types/experimental/api/history";
    export class History implements IHistory {
        protected [CommanderSymbol]: Commander<ExperimentalCommandType>;
        constructor(commander: Commander<ExperimentalCommandType>);
        undo(): Promise<void>;
        canUndo(): Promise<boolean>;
        redo(): Promise<void>;
        canRedo(): Promise<boolean>;
    }
}
declare module "@mirohq/websdk-types/experimental/features/board" {
    import { Context } from "@mirohq/websdk-types/core/builder/types";
    import { VotingResult } from "@mirohq/websdk-types/experimental/api/board";
    import { CreateGroupProps, Group } from "@mirohq/websdk-types/experimental/features/widgets/group";
    import { CustomActionManagement } from "@mirohq/websdk-types/experimental/features/customAction";
    import { History } from "@mirohq/websdk-types/experimental/features/history";
    export const boardFeature: <T extends Context>(ctx: T) => {
        action: CustomActionManagement;
        history: History;
        getVotingResults(): Promise<VotingResult[]>;
        group(props: CreateGroupProps): Promise<Group>;
    };
}
declare module "@mirohq/websdk-types/stable/client/index" {
    import { Commander } from "@mirohq/websdk-types/core/index";
    import { BoardUI } from "@mirohq/websdk-types/stable/features/ui";
    import { Notifications } from "@mirohq/websdk-types/stable/features/notifications";
    import { Viewport } from "@mirohq/websdk-types/stable/features/viewport";
    import { RealtimeEvents } from "@mirohq/websdk-ty